; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -orcc\stm32f1xx_hal_flash.o --asm_dir=..\ --list_dir=..\ --depend=rcc\stm32f1xx_hal_flash.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy -I../Drivers/CMSIS/Device/ST/STM32F1xx/Include -I../Drivers/CMSIS/Include -ID:\RCCv2\RCC\RCC\MDK-ARM\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=521 -D_RTE_ -DSTM32F10X_MD -DUSE_HAL_DRIVER -DSTM32F103xB --omf_browse=rcc\stm32f1xx_hal_flash.crf ../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_flash.c]
                          THUMB

                          AREA ||i.FLASH_Program_HalfWord||, CODE, READONLY, ALIGN=2

                  FLASH_Program_HalfWord PROC
;;;812      */
;;;813    static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
000000  2200              MOVS     r2,#0
;;;814    {
;;;815      /* Clean the error context */
;;;816      pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000002  4b05              LDR      r3,|L1.24|
000004  61da              STR      r2,[r3,#0x1c]  ; pFlash
;;;817      
;;;818    #if defined(FLASH_BANK2_END)
;;;819      if(Address <= FLASH_BANK1_END)
;;;820      {
;;;821    #endif /* FLASH_BANK2_END */
;;;822        /* Proceed to program the new data */
;;;823        SET_BIT(FLASH->CR, FLASH_CR_PG);
000006  4a05              LDR      r2,|L1.28|
000008  6912              LDR      r2,[r2,#0x10]
00000a  f0420201          ORR      r2,r2,#1
00000e  4b03              LDR      r3,|L1.28|
000010  611a              STR      r2,[r3,#0x10]
;;;824    #if defined(FLASH_BANK2_END)
;;;825      }
;;;826      else
;;;827      {
;;;828        /* Proceed to program the new data */
;;;829        SET_BIT(FLASH->CR2, FLASH_CR2_PG);
;;;830      }
;;;831    #endif /* FLASH_BANK2_END */
;;;832    
;;;833      /* Write data in the address */
;;;834      *(__IO uint16_t*)Address = Data;
000012  8001              STRH     r1,[r0,#0]
;;;835    }
000014  4770              BX       lr
;;;836    
                          ENDP

000016  0000              DCW      0x0000
                  |L1.24|
                          DCD      pFlash
                  |L1.28|
                          DCD      0x40022000

                          AREA ||i.FLASH_SetErrorCode||, CODE, READONLY, ALIGN=2

                  FLASH_SetErrorCode PROC
;;;929      */
;;;930    static void FLASH_SetErrorCode(void)
000000  2000              MOVS     r0,#0
;;;931    {
;;;932      uint32_t flags = 0U;
;;;933      
;;;934    #if defined(FLASH_BANK2_END)
;;;935      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
;;;936    #else
;;;937      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
000002  491e              LDR      r1,|L2.124|
000004  68c9              LDR      r1,[r1,#0xc]
000006  f0010110          AND      r1,r1,#0x10
00000a  b139              CBZ      r1,|L2.28|
;;;938    #endif /* FLASH_BANK2_END */
;;;939      {
;;;940        pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
00000c  491c              LDR      r1,|L2.128|
00000e  69c9              LDR      r1,[r1,#0x1c]  ; pFlash
000010  f0410102          ORR      r1,r1,#2
000014  4a1a              LDR      r2,|L2.128|
000016  61d1              STR      r1,[r2,#0x1c]  ; pFlash
;;;941    #if defined(FLASH_BANK2_END)
;;;942        flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
;;;943    #else
;;;944        flags |= FLASH_FLAG_WRPERR;
000018  f0400010          ORR      r0,r0,#0x10
                  |L2.28|
;;;945    #endif /* FLASH_BANK2_END */
;;;946      }
;;;947    #if defined(FLASH_BANK2_END)
;;;948      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
;;;949    #else
;;;950      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
00001c  4917              LDR      r1,|L2.124|
00001e  68c9              LDR      r1,[r1,#0xc]
000020  f0010104          AND      r1,r1,#4
000024  b139              CBZ      r1,|L2.54|
;;;951    #endif /* FLASH_BANK2_END */
;;;952      {
;;;953        pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
000026  4916              LDR      r1,|L2.128|
000028  69c9              LDR      r1,[r1,#0x1c]  ; pFlash
00002a  f0410101          ORR      r1,r1,#1
00002e  4a14              LDR      r2,|L2.128|
000030  61d1              STR      r1,[r2,#0x1c]  ; pFlash
;;;954    #if defined(FLASH_BANK2_END)
;;;955        flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
;;;956    #else
;;;957        flags |= FLASH_FLAG_PGERR;
000032  f0400004          ORR      r0,r0,#4
                  |L2.54|
;;;958    #endif /* FLASH_BANK2_END */
;;;959      }
;;;960      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
000036  4911              LDR      r1,|L2.124|
000038  69c9              LDR      r1,[r1,#0x1c]
00003a  f0010101          AND      r1,r1,#1
00003e  b169              CBZ      r1,|L2.92|
;;;961      {
;;;962        pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
000040  490f              LDR      r1,|L2.128|
000042  69c9              LDR      r1,[r1,#0x1c]  ; pFlash
000044  f0410104          ORR      r1,r1,#4
000048  4a0d              LDR      r2,|L2.128|
00004a  61d1              STR      r1,[r2,#0x1c]  ; pFlash
;;;963      __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
00004c  bf00              NOP      
00004e  490b              LDR      r1,|L2.124|
000050  69c9              LDR      r1,[r1,#0x1c]
000052  f0210101          BIC      r1,r1,#1
000056  4a09              LDR      r2,|L2.124|
000058  61d1              STR      r1,[r2,#0x1c]
00005a  bf00              NOP      
                  |L2.92|
;;;964      }
;;;965    
;;;966      /* Clear FLASH error pending bits */
;;;967      __HAL_FLASH_CLEAR_FLAG(flags);
00005c  bf00              NOP      
00005e  f2401101          MOV      r1,#0x101
000062  4288              CMP      r0,r1
000064  d106              BNE      |L2.116|
000066  4905              LDR      r1,|L2.124|
000068  69c9              LDR      r1,[r1,#0x1c]
00006a  f0210101          BIC      r1,r1,#1
00006e  4a03              LDR      r2,|L2.124|
000070  61d1              STR      r1,[r2,#0x1c]
000072  e001              B        |L2.120|
                  |L2.116|
000074  4901              LDR      r1,|L2.124|
000076  60c8              STR      r0,[r1,#0xc]
                  |L2.120|
000078  bf00              NOP      
;;;968    }  
00007a  4770              BX       lr
;;;969    /**
                          ENDP

                  |L2.124|
                          DCD      0x40022000
                  |L2.128|
                          DCD      pFlash

                          AREA ||i.FLASH_WaitForLastOperation||, CODE, READONLY, ALIGN=2

                  FLASH_WaitForLastOperation PROC
;;;841      */
;;;842    HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
000000  b570              PUSH     {r4-r6,lr}
;;;843    {
000002  4604              MOV      r4,r0
;;;844      /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
;;;845         Even if the FLASH operation fails, the BUSY flag will be reset and an error
;;;846         flag will be set */
;;;847         
;;;848      uint32_t tickstart = HAL_GetTick();
000004  f7fffffe          BL       HAL_GetTick
000008  4605              MOV      r5,r0
;;;849         
;;;850      while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
00000a  e009              B        |L3.32|
                  |L3.12|
;;;851      { 
;;;852        if (Timeout != HAL_MAX_DELAY)
00000c  1c60              ADDS     r0,r4,#1
00000e  b138              CBZ      r0,|L3.32|
;;;853        {
;;;854          if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
000010  b124              CBZ      r4,|L3.28|
000012  f7fffffe          BL       HAL_GetTick
000016  1b40              SUBS     r0,r0,r5
000018  42a0              CMP      r0,r4
00001a  d901              BLS      |L3.32|
                  |L3.28|
;;;855          {
;;;856            return HAL_TIMEOUT;
00001c  2003              MOVS     r0,#3
                  |L3.30|
;;;857          }
;;;858        }
;;;859      }
;;;860      
;;;861      /* Check FLASH End of Operation flag  */
;;;862      if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
;;;863      {
;;;864        /* Clear FLASH End of Operation pending bit */
;;;865        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
;;;866      }
;;;867      
;;;868      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
;;;869         __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
;;;870         __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
;;;871      {
;;;872        /*Save the error code*/
;;;873        FLASH_SetErrorCode();
;;;874        return HAL_ERROR;
;;;875      }
;;;876    
;;;877      /* There is no error flag set */
;;;878      return HAL_OK;
;;;879    }
00001e  bd70              POP      {r4-r6,pc}
                  |L3.32|
000020  4812              LDR      r0,|L3.108|
000022  68c0              LDR      r0,[r0,#0xc]          ;850
000024  f0000001          AND      r0,r0,#1              ;850
000028  2800              CMP      r0,#0                 ;850
00002a  d1ef              BNE      |L3.12|
00002c  480f              LDR      r0,|L3.108|
00002e  68c0              LDR      r0,[r0,#0xc]          ;862
000030  f0000020          AND      r0,r0,#0x20           ;862
000034  b120              CBZ      r0,|L3.64|
000036  bf00              NOP                            ;865
000038  2020              MOVS     r0,#0x20              ;865
00003a  490c              LDR      r1,|L3.108|
00003c  60c8              STR      r0,[r1,#0xc]          ;865
00003e  bf00              NOP                            ;865
                  |L3.64|
000040  480a              LDR      r0,|L3.108|
000042  68c0              LDR      r0,[r0,#0xc]          ;868
000044  f0000010          AND      r0,r0,#0x10           ;868
000048  b948              CBNZ     r0,|L3.94|
00004a  4808              LDR      r0,|L3.108|
00004c  69c0              LDR      r0,[r0,#0x1c]         ;869
00004e  f0000001          AND      r0,r0,#1              ;869
000052  b920              CBNZ     r0,|L3.94|
000054  4805              LDR      r0,|L3.108|
000056  68c0              LDR      r0,[r0,#0xc]          ;870
000058  f0000004          AND      r0,r0,#4              ;870
00005c  b118              CBZ      r0,|L3.102|
                  |L3.94|
00005e  f7fffffe          BL       FLASH_SetErrorCode
000062  2001              MOVS     r0,#1                 ;874
000064  e7db              B        |L3.30|
                  |L3.102|
000066  2000              MOVS     r0,#0                 ;878
000068  e7d9              B        |L3.30|
;;;880    
                          ENDP

00006a  0000              DCW      0x0000
                  |L3.108|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASH_EndOfOperationCallback||, CODE, READONLY, ALIGN=1

                  HAL_FLASH_EndOfOperationCallback PROC
;;;621      */
;;;622    __weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
000000  4770              BX       lr
;;;623    {
;;;624      /* Prevent unused argument(s) compilation warning */
;;;625      UNUSED(ReturnValue);
;;;626    
;;;627      /* NOTE : This function Should not be modified, when the callback is needed,
;;;628                the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
;;;629       */ 
;;;630    }
;;;631    
                          ENDP


                          AREA ||i.HAL_FLASH_GetError||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_GetError PROC
;;;789      */
;;;790    uint32_t HAL_FLASH_GetError(void)
000000  4801              LDR      r0,|L5.8|
;;;791    {
;;;792       return pFlash.ErrorCode;
000002  69c0              LDR      r0,[r0,#0x1c]  ; pFlash
;;;793    }
000004  4770              BX       lr
;;;794    
                          ENDP

000006  0000              DCW      0x0000
                  |L5.8|
                          DCD      pFlash

                          AREA ||i.HAL_FLASH_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_IRQHandler PROC
;;;347      */
;;;348    void HAL_FLASH_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;349    {
;;;350      uint32_t addresstmp = 0U;
000002  2400              MOVS     r4,#0
;;;351      
;;;352      /* Check FLASH operation error flags */
;;;353    #if defined(FLASH_BANK2_END)
;;;354      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK1) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK1) || \
;;;355        (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2)))
;;;356    #else
;;;357      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
000004  485c              LDR      r0,|L6.376|
000006  68c0              LDR      r0,[r0,#0xc]
000008  f0000010          AND      r0,r0,#0x10
00000c  b920              CBNZ     r0,|L6.24|
00000e  485a              LDR      r0,|L6.376|
000010  68c0              LDR      r0,[r0,#0xc]
000012  f0000004          AND      r0,r0,#4
000016  b168              CBZ      r0,|L6.52|
                  |L6.24|
;;;358    #endif /* FLASH_BANK2_END */
;;;359      {
;;;360        /* Return the faulty address */
;;;361        addresstmp = pFlash.Address;
000018  4858              LDR      r0,|L6.380|
00001a  6884              LDR      r4,[r0,#8]  ; pFlash
;;;362        /* Reset address */
;;;363        pFlash.Address = 0xFFFFFFFFU;
00001c  f04f30ff          MOV      r0,#0xffffffff
000020  4956              LDR      r1,|L6.380|
000022  6088              STR      r0,[r1,#8]  ; pFlash
;;;364      
;;;365        /* Save the Error code */
;;;366        FLASH_SetErrorCode();
000024  f7fffffe          BL       FLASH_SetErrorCode
;;;367        
;;;368        /* FLASH error interrupt user callback */
;;;369        HAL_FLASH_OperationErrorCallback(addresstmp);
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       HAL_FLASH_OperationErrorCallback
;;;370    
;;;371        /* Stop the procedure ongoing */
;;;372        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
00002e  2000              MOVS     r0,#0
000030  4952              LDR      r1,|L6.380|
000032  7008              STRB     r0,[r1,#0]
                  |L6.52|
;;;373      }
;;;374    
;;;375      /* Check FLASH End of Operation flag  */
;;;376    #if defined(FLASH_BANK2_END)
;;;377      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP_BANK1))
;;;378      {
;;;379        /* Clear FLASH End of Operation pending bit */
;;;380        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP_BANK1);
;;;381    #else
;;;382      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
000034  4850              LDR      r0,|L6.376|
000036  68c0              LDR      r0,[r0,#0xc]
000038  f0000020          AND      r0,r0,#0x20
00003c  2800              CMP      r0,#0
00003e  d028              BEQ      |L6.146|
;;;383      {
;;;384        /* Clear FLASH End of Operation pending bit */
;;;385        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
000040  bf00              NOP      
000042  2020              MOVS     r0,#0x20
000044  494c              LDR      r1,|L6.376|
000046  60c8              STR      r0,[r1,#0xc]
000048  bf00              NOP      
;;;386    #endif /* FLASH_BANK2_END */
;;;387        
;;;388        /* Process can continue only if no error detected */
;;;389        if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
00004a  484c              LDR      r0,|L6.380|
00004c  7800              LDRB     r0,[r0,#0]  ; pFlash
00004e  2800              CMP      r0,#0
000050  d07e              BEQ      |L6.336|
;;;390        {
;;;391          if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
000052  484a              LDR      r0,|L6.380|
000054  7800              LDRB     r0,[r0,#0]  ; pFlash
000056  2801              CMP      r0,#1
000058  d127              BNE      |L6.170|
;;;392          {
;;;393            /* Nb of pages to erased can be decreased */
;;;394            pFlash.DataRemaining--;
00005a  4848              LDR      r0,|L6.380|
00005c  6840              LDR      r0,[r0,#4]  ; pFlash
00005e  1e40              SUBS     r0,r0,#1
000060  4946              LDR      r1,|L6.380|
000062  6048              STR      r0,[r1,#4]  ; pFlash
;;;395    
;;;396            /* Check if there are still pages to erase */
;;;397            if(pFlash.DataRemaining != 0U)
000064  4608              MOV      r0,r1
000066  6840              LDR      r0,[r0,#4]  ; pFlash
000068  b1a0              CBZ      r0,|L6.148|
;;;398            {
;;;399              addresstmp = pFlash.Address;
00006a  4608              MOV      r0,r1
00006c  6884              LDR      r4,[r0,#8]  ; pFlash
;;;400              /*Indicate user which sector has been erased */
;;;401              HAL_FLASH_EndOfOperationCallback(addresstmp);
00006e  4620              MOV      r0,r4
000070  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
;;;402    
;;;403              /*Increment sector number*/
;;;404              addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
000074  4841              LDR      r0,|L6.380|
000076  6880              LDR      r0,[r0,#8]  ; pFlash
000078  f5006480          ADD      r4,r0,#0x400
;;;405              pFlash.Address = addresstmp;
00007c  483f              LDR      r0,|L6.380|
00007e  6084              STR      r4,[r0,#8]  ; pFlash
;;;406    
;;;407              /* If the erase operation is completed, disable the PER Bit */
;;;408              CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
000080  483d              LDR      r0,|L6.376|
000082  6900              LDR      r0,[r0,#0x10]
000084  f0200002          BIC      r0,r0,#2
000088  493b              LDR      r1,|L6.376|
00008a  6108              STR      r0,[r1,#0x10]
;;;409    
;;;410              FLASH_PageErase(addresstmp);
00008c  4620              MOV      r0,r4
00008e  f7fffffe          BL       FLASH_PageErase
                  |L6.146|
000092  e05d              B        |L6.336|
                  |L6.148|
;;;411            }
;;;412            else
;;;413            {
;;;414              /* No more pages to Erase, user callback can be called. */
;;;415              /* Reset Sector and stop Erase pages procedure */
;;;416              pFlash.Address = addresstmp = 0xFFFFFFFFU;
000094  f04f30ff          MOV      r0,#0xffffffff
000098  4604              MOV      r4,r0
00009a  4938              LDR      r1,|L6.380|
00009c  6088              STR      r0,[r1,#8]  ; pFlash
;;;417              pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
00009e  2000              MOVS     r0,#0
0000a0  7008              STRB     r0,[r1,#0]
;;;418              /* FLASH EOP interrupt user callback */
;;;419              HAL_FLASH_EndOfOperationCallback(addresstmp);
0000a2  4620              MOV      r0,r4
0000a4  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
0000a8  e052              B        |L6.336|
                  |L6.170|
;;;420            }
;;;421          }
;;;422          else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
0000aa  4834              LDR      r0,|L6.380|
0000ac  7800              LDRB     r0,[r0,#0]  ; pFlash
0000ae  2802              CMP      r0,#2
0000b0  d10c              BNE      |L6.204|
;;;423          {
;;;424            /* Operation is completed, disable the MER Bit */
;;;425            CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
0000b2  4831              LDR      r0,|L6.376|
0000b4  6900              LDR      r0,[r0,#0x10]
0000b6  f0200004          BIC      r0,r0,#4
0000ba  492f              LDR      r1,|L6.376|
0000bc  6108              STR      r0,[r1,#0x10]
;;;426    
;;;427    #if defined(FLASH_BANK2_END)
;;;428            /* Stop Mass Erase procedure if no pending mass erase on other bank */
;;;429            if (HAL_IS_BIT_CLR(FLASH->CR2, FLASH_CR2_MER))
;;;430            {
;;;431    #endif /* FLASH_BANK2_END */
;;;432              /* MassErase ended. Return the selected bank */
;;;433              /* FLASH EOP interrupt user callback */
;;;434              HAL_FLASH_EndOfOperationCallback(0U);
0000be  2000              MOVS     r0,#0
0000c0  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
;;;435    
;;;436              /* Stop Mass Erase procedure*/
;;;437              pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
0000c4  2000              MOVS     r0,#0
0000c6  492d              LDR      r1,|L6.380|
0000c8  7008              STRB     r0,[r1,#0]
0000ca  e041              B        |L6.336|
                  |L6.204|
;;;438            }
;;;439    #if defined(FLASH_BANK2_END)
;;;440          }
;;;441    #endif /* FLASH_BANK2_END */
;;;442          else
;;;443          {
;;;444            /* Nb of 16-bit data to program can be decreased */
;;;445            pFlash.DataRemaining--;
0000cc  482b              LDR      r0,|L6.380|
0000ce  6840              LDR      r0,[r0,#4]  ; pFlash
0000d0  1e40              SUBS     r0,r0,#1
0000d2  492a              LDR      r1,|L6.380|
0000d4  6048              STR      r0,[r1,#4]  ; pFlash
;;;446            
;;;447            /* Check if there are still 16-bit data to program */
;;;448            if(pFlash.DataRemaining != 0U)
0000d6  4608              MOV      r0,r1
0000d8  6840              LDR      r0,[r0,#4]  ; pFlash
0000da  b1d8              CBZ      r0,|L6.276|
;;;449            {
;;;450              /* Increment address to 16-bit */
;;;451              pFlash.Address += 2U;
0000dc  4608              MOV      r0,r1
0000de  6880              LDR      r0,[r0,#8]  ; pFlash
0000e0  1c80              ADDS     r0,r0,#2
0000e2  6088              STR      r0,[r1,#8]  ; pFlash
;;;452              addresstmp = pFlash.Address;
0000e4  4608              MOV      r0,r1
0000e6  6884              LDR      r4,[r0,#8]  ; pFlash
;;;453              
;;;454              /* Shift to have next 16-bit data */
;;;455              pFlash.Data = (pFlash.Data >> 16U);
0000e8  6908              LDR      r0,[r1,#0x10]  ; pFlash
0000ea  6949              LDR      r1,[r1,#0x14]  ; pFlash
0000ec  0c00              LSRS     r0,r0,#16
0000ee  ea404001          ORR      r0,r0,r1,LSL #16
0000f2  0c09              LSRS     r1,r1,#16
0000f4  4a21              LDR      r2,|L6.380|
0000f6  6110              STR      r0,[r2,#0x10]  ; pFlash
0000f8  6151              STR      r1,[r2,#0x14]  ; pFlash
;;;456              
;;;457              /* Operation is completed, disable the PG Bit */
;;;458              CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
0000fa  481f              LDR      r0,|L6.376|
0000fc  6900              LDR      r0,[r0,#0x10]
0000fe  f0200001          BIC      r0,r0,#1
000102  491d              LDR      r1,|L6.376|
000104  6108              STR      r0,[r1,#0x10]
;;;459    
;;;460              /*Program halfword (16-bit) at a specified address.*/
;;;461              FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
000106  6910              LDR      r0,[r2,#0x10]  ; pFlash
000108  6952              LDR      r2,[r2,#0x14]  ; pFlash
00010a  b281              UXTH     r1,r0
00010c  4620              MOV      r0,r4
00010e  f7fffffe          BL       FLASH_Program_HalfWord
000112  e01d              B        |L6.336|
                  |L6.276|
;;;462            }
;;;463            else
;;;464            {
;;;465              /* Program ended. Return the selected address */
;;;466              /* FLASH EOP interrupt user callback */
;;;467              if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
000114  4819              LDR      r0,|L6.380|
000116  7800              LDRB     r0,[r0,#0]  ; pFlash
000118  2803              CMP      r0,#3
00011a  d104              BNE      |L6.294|
;;;468              {
;;;469                HAL_FLASH_EndOfOperationCallback(pFlash.Address);
00011c  4917              LDR      r1,|L6.380|
00011e  6888              LDR      r0,[r1,#8]  ; pFlash
000120  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
000124  e00e              B        |L6.324|
                  |L6.294|
;;;470              }
;;;471              else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
000126  4815              LDR      r0,|L6.380|
000128  7800              LDRB     r0,[r0,#0]  ; pFlash
00012a  2804              CMP      r0,#4
00012c  d105              BNE      |L6.314|
;;;472              {
;;;473                HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
00012e  4913              LDR      r1,|L6.380|
000130  6889              LDR      r1,[r1,#8]  ; pFlash
000132  1e88              SUBS     r0,r1,#2
000134  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
000138  e004              B        |L6.324|
                  |L6.314|
;;;474              }
;;;475              else 
;;;476              {
;;;477                HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
00013a  4910              LDR      r1,|L6.380|
00013c  6889              LDR      r1,[r1,#8]  ; pFlash
00013e  1f88              SUBS     r0,r1,#6
000140  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
                  |L6.324|
;;;478              }
;;;479            
;;;480              /* Reset Address and stop Program procedure */
;;;481              pFlash.Address = 0xFFFFFFFFU;
000144  f04f30ff          MOV      r0,#0xffffffff
000148  490c              LDR      r1,|L6.380|
00014a  6088              STR      r0,[r1,#8]  ; pFlash
;;;482              pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
00014c  2000              MOVS     r0,#0
00014e  7008              STRB     r0,[r1,#0]
                  |L6.336|
;;;483            }
;;;484          }
;;;485        }
;;;486      }
;;;487      
;;;488    #if defined(FLASH_BANK2_END)
;;;489      /* Check FLASH End of Operation flag  */
;;;490      if(__HAL_FLASH_GET_FLAG( FLASH_FLAG_EOP_BANK2))
;;;491      {
;;;492        /* Clear FLASH End of Operation pending bit */
;;;493        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP_BANK2);
;;;494        
;;;495        /* Process can continue only if no error detected */
;;;496        if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
;;;497        {
;;;498          if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
;;;499          {
;;;500            /* Nb of pages to erased can be decreased */
;;;501            pFlash.DataRemaining--;
;;;502            
;;;503            /* Check if there are still pages to erase*/
;;;504            if(pFlash.DataRemaining != 0U)
;;;505            {
;;;506              /* Indicate user which page address has been erased*/
;;;507              HAL_FLASH_EndOfOperationCallback(pFlash.Address);
;;;508            
;;;509              /* Increment page address to next page */
;;;510              pFlash.Address += FLASH_PAGE_SIZE;
;;;511              addresstmp = pFlash.Address;
;;;512    
;;;513              /* Operation is completed, disable the PER Bit */
;;;514              CLEAR_BIT(FLASH->CR2, FLASH_CR2_PER);
;;;515    
;;;516              FLASH_PageErase(addresstmp);
;;;517            }
;;;518            else
;;;519            {
;;;520              /*No more pages to Erase*/
;;;521              
;;;522              /*Reset Address and stop Erase pages procedure*/
;;;523              pFlash.Address = 0xFFFFFFFFU;
;;;524              pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
;;;525    
;;;526              /* FLASH EOP interrupt user callback */
;;;527              HAL_FLASH_EndOfOperationCallback(pFlash.Address);
;;;528            }
;;;529          }
;;;530          else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
;;;531          {
;;;532            /* Operation is completed, disable the MER Bit */
;;;533            CLEAR_BIT(FLASH->CR2, FLASH_CR2_MER);
;;;534    
;;;535            if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_MER))
;;;536            {
;;;537              /* MassErase ended. Return the selected bank*/
;;;538              /* FLASH EOP interrupt user callback */
;;;539              HAL_FLASH_EndOfOperationCallback(0U);
;;;540            
;;;541              pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
;;;542            }
;;;543          }
;;;544          else
;;;545          {
;;;546            /* Nb of 16-bit data to program can be decreased */
;;;547            pFlash.DataRemaining--;
;;;548            
;;;549            /* Check if there are still 16-bit data to program */
;;;550            if(pFlash.DataRemaining != 0U)
;;;551            {
;;;552              /* Increment address to 16-bit */
;;;553              pFlash.Address += 2U;
;;;554              addresstmp = pFlash.Address;
;;;555              
;;;556              /* Shift to have next 16-bit data */
;;;557              pFlash.Data = (pFlash.Data >> 16U);
;;;558              
;;;559              /* Operation is completed, disable the PG Bit */
;;;560              CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
;;;561    
;;;562              /*Program halfword (16-bit) at a specified address.*/
;;;563              FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
;;;564            }
;;;565            else
;;;566            {
;;;567              /*Program ended. Return the selected address*/
;;;568              /* FLASH EOP interrupt user callback */
;;;569              if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
;;;570              {
;;;571                HAL_FLASH_EndOfOperationCallback(pFlash.Address);
;;;572              }
;;;573              else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
;;;574              {
;;;575                HAL_FLASH_EndOfOperationCallback(pFlash.Address-2U);
;;;576              }
;;;577              else 
;;;578              {
;;;579                HAL_FLASH_EndOfOperationCallback(pFlash.Address-6U);
;;;580              }
;;;581              
;;;582              /* Reset Address and stop Program procedure*/
;;;583              pFlash.Address = 0xFFFFFFFFU;
;;;584              pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
;;;585            }
;;;586          }
;;;587        }
;;;588      }
;;;589    #endif 
;;;590    
;;;591      if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
000150  480a              LDR      r0,|L6.380|
000152  7800              LDRB     r0,[r0,#0]  ; pFlash
000154  b978              CBNZ     r0,|L6.374|
;;;592      {
;;;593    #if defined(FLASH_BANK2_END)
;;;594        /* Operation is completed, disable the PG, PER and MER Bits for both bank */
;;;595        CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
;;;596        CLEAR_BIT(FLASH->CR2, (FLASH_CR2_PG | FLASH_CR2_PER | FLASH_CR2_MER));  
;;;597      
;;;598        /* Disable End of FLASH Operation and Error source interrupts for both banks */
;;;599        __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP_BANK1 | FLASH_IT_ERR_BANK1 | FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
;;;600    #else
;;;601        /* Operation is completed, disable the PG, PER and MER Bits */
;;;602        CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
000156  4808              LDR      r0,|L6.376|
000158  6900              LDR      r0,[r0,#0x10]
00015a  f0200007          BIC      r0,r0,#7
00015e  4906              LDR      r1,|L6.376|
000160  6108              STR      r0,[r1,#0x10]
;;;603    
;;;604        /* Disable End of FLASH Operation and Error source interrupts */
;;;605        __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
000162  4608              MOV      r0,r1
000164  6900              LDR      r0,[r0,#0x10]
000166  f42050a0          BIC      r0,r0,#0x1400
00016a  6108              STR      r0,[r1,#0x10]
;;;606    #endif /* FLASH_BANK2_END */
;;;607    
;;;608        /* Process Unlocked */
;;;609        __HAL_UNLOCK(&pFlash);
00016c  bf00              NOP      
00016e  2000              MOVS     r0,#0
000170  4902              LDR      r1,|L6.380|
000172  7608              STRB     r0,[r1,#0x18]
000174  bf00              NOP      
                  |L6.374|
;;;610      }
;;;611    }
000176  bd10              POP      {r4,pc}
;;;612    
                          ENDP

                  |L6.376|
                          DCD      0x40022000
                  |L6.380|
                          DCD      pFlash

                          AREA ||i.HAL_FLASH_Lock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Lock PROC
;;;710      */
;;;711    HAL_StatusTypeDef HAL_FLASH_Lock(void)
000000  4803              LDR      r0,|L7.16|
;;;712    {
;;;713      /* Set the LOCK Bit to lock the FLASH Registers access */
;;;714      SET_BIT(FLASH->CR, FLASH_CR_LOCK);
000002  6900              LDR      r0,[r0,#0x10]
000004  f0400080          ORR      r0,r0,#0x80
000008  4901              LDR      r1,|L7.16|
00000a  6108              STR      r0,[r1,#0x10]
;;;715      
;;;716    #if defined(FLASH_BANK2_END)
;;;717      /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
;;;718      SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);
;;;719    
;;;720    #endif /* FLASH_BANK2_END */
;;;721      return HAL_OK;  
00000c  2000              MOVS     r0,#0
;;;722    }
00000e  4770              BX       lr
;;;723    
                          ENDP

                  |L7.16|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASH_OB_Launch||, CODE, READONLY, ALIGN=1

                  HAL_FLASH_OB_Launch PROC
;;;760      */
;;;761    void HAL_FLASH_OB_Launch(void)
000000  b510              PUSH     {r4,lr}
;;;762    {
;;;763      /* Initiates a system reset request to launch the option byte loading */
;;;764      HAL_NVIC_SystemReset();
000002  f7fffffe          BL       HAL_NVIC_SystemReset
;;;765    }
000006  bd10              POP      {r4,pc}
;;;766    
                          ENDP


                          AREA ||i.HAL_FLASH_OB_Lock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_OB_Lock PROC
;;;747      */
;;;748    HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
000000  4803              LDR      r0,|L9.16|
;;;749    {
;;;750      /* Clear the OPTWRE Bit to lock the FLASH Option Byte Registers access */
;;;751      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
000002  6900              LDR      r0,[r0,#0x10]
000004  f4207000          BIC      r0,r0,#0x200
000008  4901              LDR      r1,|L9.16|
00000a  6108              STR      r0,[r1,#0x10]
;;;752      
;;;753      return HAL_OK;  
00000c  2000              MOVS     r0,#0
;;;754    }
00000e  4770              BX       lr
;;;755      
                          ENDP

                  |L9.16|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASH_OB_Unlock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_OB_Unlock PROC
;;;727      */
;;;728    HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
000000  4807              LDR      r0,|L10.32|
;;;729    {
;;;730      if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
000002  6900              LDR      r0,[r0,#0x10]
000004  f4007000          AND      r0,r0,#0x200
000008  b928              CBNZ     r0,|L10.22|
;;;731      {
;;;732        /* Authorizes the Option Byte register programming */
;;;733        WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
00000a  4806              LDR      r0,|L10.36|
00000c  4904              LDR      r1,|L10.32|
00000e  6088              STR      r0,[r1,#8]
;;;734        WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
000010  4805              LDR      r0,|L10.40|
000012  6088              STR      r0,[r1,#8]
000014  e001              B        |L10.26|
                  |L10.22|
;;;735      }
;;;736      else
;;;737      {
;;;738        return HAL_ERROR;
000016  2001              MOVS     r0,#1
                  |L10.24|
;;;739      }  
;;;740      
;;;741      return HAL_OK;  
;;;742    }
000018  4770              BX       lr
                  |L10.26|
00001a  2000              MOVS     r0,#0                 ;741
00001c  e7fc              B        |L10.24|
;;;743    
                          ENDP

00001e  0000              DCW      0x0000
                  |L10.32|
                          DCD      0x40022000
                  |L10.36|
                          DCD      0x45670123
                  |L10.40|
                          DCD      0xcdef89ab

                          AREA ||i.HAL_FLASH_OperationErrorCallback||, CODE, READONLY, ALIGN=1

                  HAL_FLASH_OperationErrorCallback PROC
;;;639      */
;;;640    __weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
000000  4770              BX       lr
;;;641    {
;;;642      /* Prevent unused argument(s) compilation warning */
;;;643      UNUSED(ReturnValue);
;;;644    
;;;645      /* NOTE : This function Should not be modified, when the callback is needed,
;;;646                the HAL_FLASH_OperationErrorCallback could be implemented in the user file
;;;647       */ 
;;;648    }
;;;649    
                          ENDP


                          AREA ||i.HAL_FLASH_Program||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Program PROC
;;;183      */
;;;184    HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;185    {
000004  4605              MOV      r5,r0
000006  468b              MOV      r11,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
;;;186      HAL_StatusTypeDef status = HAL_ERROR;
00000c  2601              MOVS     r6,#1
;;;187      uint8_t index = 0;
00000e  2400              MOVS     r4,#0
;;;188      uint8_t nbiterations = 0;
000010  2000              MOVS     r0,#0
000012  9002              STR      r0,[sp,#8]
;;;189      
;;;190      /* Process Locked */
;;;191      __HAL_LOCK(&pFlash);
000014  bf00              NOP      
000016  4824              LDR      r0,|L12.168|
000018  7e00              LDRB     r0,[r0,#0x18]  ; pFlash
00001a  2801              CMP      r0,#1
00001c  d102              BNE      |L12.36|
00001e  2002              MOVS     r0,#2
                  |L12.32|
;;;192    
;;;193      /* Check the parameters */
;;;194      assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
;;;195      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
;;;196    
;;;197    #if defined(FLASH_BANK2_END)
;;;198      if(Address <= FLASH_BANK1_END)
;;;199      {
;;;200    #endif /* FLASH_BANK2_END */
;;;201        /* Wait for last operation to be completed */
;;;202        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
;;;203    #if defined(FLASH_BANK2_END)
;;;204      }
;;;205      else
;;;206      {
;;;207        /* Wait for last operation to be completed */
;;;208        status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
;;;209      }
;;;210    #endif /* FLASH_BANK2_END */
;;;211      
;;;212      if(status == HAL_OK)
;;;213      {
;;;214        if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
;;;215        {
;;;216          /* Program halfword (16-bit) at a specified address. */
;;;217          nbiterations = 1U;
;;;218        }
;;;219        else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
;;;220        {
;;;221          /* Program word (32-bit = 2*16-bit) at a specified address. */
;;;222          nbiterations = 2U;
;;;223        }
;;;224        else
;;;225        {
;;;226          /* Program double word (64-bit = 4*16-bit) at a specified address. */
;;;227          nbiterations = 4U;
;;;228        }
;;;229    
;;;230        for (index = 0U; index < nbiterations; index++)
;;;231        {
;;;232          FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
;;;233    
;;;234    #if defined(FLASH_BANK2_END)
;;;235          if(Address <= FLASH_BANK1_END)
;;;236          {
;;;237    #endif /* FLASH_BANK2_END */
;;;238            /* Wait for last operation to be completed */
;;;239            status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
;;;240        
;;;241            /* If the program operation is completed, disable the PG Bit */
;;;242            CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
;;;243    #if defined(FLASH_BANK2_END)
;;;244          }
;;;245          else
;;;246          {
;;;247            /* Wait for last operation to be completed */
;;;248            status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
;;;249            
;;;250            /* If the program operation is completed, disable the PG Bit */
;;;251            CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
;;;252          }
;;;253    #endif /* FLASH_BANK2_END */
;;;254          /* In case of error, stop programation procedure */
;;;255          if (status != HAL_OK)
;;;256          {
;;;257            break;
;;;258          }
;;;259        }
;;;260      }
;;;261    
;;;262      /* Process Unlocked */
;;;263      __HAL_UNLOCK(&pFlash);
;;;264    
;;;265      return status;
;;;266    }
000020  e8bd8ffe          POP      {r1-r11,pc}
                  |L12.36|
000024  2001              MOVS     r0,#1                 ;191
000026  4920              LDR      r1,|L12.168|
000028  7608              STRB     r0,[r1,#0x18]         ;191
00002a  bf00              NOP                            ;191
00002c  f24c3050          MOV      r0,#0xc350            ;202
000030  f7fffffe          BL       FLASH_WaitForLastOperation
000034  4606              MOV      r6,r0                 ;202
000036  bb86              CBNZ     r6,|L12.154|
000038  2d01              CMP      r5,#1                 ;214
00003a  d102              BNE      |L12.66|
00003c  2001              MOVS     r0,#1                 ;217
00003e  9002              STR      r0,[sp,#8]            ;217
000040  e006              B        |L12.80|
                  |L12.66|
000042  2d02              CMP      r5,#2                 ;219
000044  d102              BNE      |L12.76|
000046  2002              MOVS     r0,#2                 ;222
000048  9002              STR      r0,[sp,#8]            ;222
00004a  e001              B        |L12.80|
                  |L12.76|
00004c  2004              MOVS     r0,#4                 ;227
00004e  9002              STR      r0,[sp,#8]            ;227
                  |L12.80|
000050  2400              MOVS     r4,#0                 ;230
000052  e01e              B        |L12.146|
                  |L12.84|
000054  0122              LSLS     r2,r4,#4              ;232
000056  46b9              MOV      r9,r7                 ;232
000058  46c2              MOV      r10,r8                ;232
00005a  4648              MOV      r0,r9                 ;232
00005c  4651              MOV      r1,r10                ;232
00005e  f7fffffe          BL       __aeabi_llsr
000062  b280              UXTH     r0,r0                 ;232
000064  9001              STR      r0,[sp,#4]            ;232
000066  2002              MOVS     r0,#2                 ;232
000068  fb00b004          MLA      r0,r0,r4,r11          ;232
00006c  9000              STR      r0,[sp,#0]            ;232
00006e  9901              LDR      r1,[sp,#4]            ;232
000070  f7fffffe          BL       FLASH_Program_HalfWord
000074  f24c3050          MOV      r0,#0xc350            ;239
000078  f7fffffe          BL       FLASH_WaitForLastOperation
00007c  4606              MOV      r6,r0                 ;239
00007e  480b              LDR      r0,|L12.172|
000080  6900              LDR      r0,[r0,#0x10]         ;242
000082  f0200001          BIC      r0,r0,#1              ;242
000086  4909              LDR      r1,|L12.172|
000088  6108              STR      r0,[r1,#0x10]         ;242
00008a  b106              CBZ      r6,|L12.142|
00008c  e004              B        |L12.152|
                  |L12.142|
00008e  1c60              ADDS     r0,r4,#1              ;230
000090  b2c4              UXTB     r4,r0                 ;230
                  |L12.146|
000092  9802              LDR      r0,[sp,#8]            ;230
000094  4284              CMP      r4,r0                 ;230
000096  dbdd              BLT      |L12.84|
                  |L12.152|
000098  bf00              NOP                            ;257
                  |L12.154|
00009a  bf00              NOP                            ;263
00009c  2000              MOVS     r0,#0                 ;263
00009e  4902              LDR      r1,|L12.168|
0000a0  7608              STRB     r0,[r1,#0x18]         ;263
0000a2  bf00              NOP                            ;263
0000a4  4630              MOV      r0,r6                 ;265
0000a6  e7bb              B        |L12.32|
;;;267    
                          ENDP

                  |L12.168|
                          DCD      pFlash
                  |L12.172|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASH_Program_IT||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Program_IT PROC
;;;282      */
;;;283    HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;284    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
;;;285      HAL_StatusTypeDef status = HAL_OK;
00000c  f04f0800          MOV      r8,#0
;;;286      
;;;287      /* Process Locked */
;;;288      __HAL_LOCK(&pFlash);
000010  bf00              NOP      
000012  4818              LDR      r0,|L13.116|
000014  7e00              LDRB     r0,[r0,#0x18]  ; pFlash
000016  2801              CMP      r0,#1
000018  d102              BNE      |L13.32|
00001a  2002              MOVS     r0,#2
                  |L13.28|
;;;289    
;;;290      /* Check the parameters */
;;;291      assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
;;;292      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
;;;293    
;;;294    #if defined(FLASH_BANK2_END)
;;;295      /* If procedure already ongoing, reject the next one */
;;;296      if (pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
;;;297      {
;;;298        return HAL_ERROR;
;;;299      }
;;;300      
;;;301      if(Address <= FLASH_BANK1_END)
;;;302      {
;;;303        /* Enable End of FLASH Operation and Error source interrupts */
;;;304        __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP_BANK1 | FLASH_IT_ERR_BANK1);
;;;305    
;;;306      }else
;;;307      {
;;;308        /* Enable End of FLASH Operation and Error source interrupts */
;;;309        __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
;;;310      }
;;;311    #else
;;;312      /* Enable End of FLASH Operation and Error source interrupts */
;;;313      __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
;;;314    #endif /* FLASH_BANK2_END */
;;;315      
;;;316      pFlash.Address = Address;
;;;317      pFlash.Data = Data;
;;;318    
;;;319      if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
;;;320      {
;;;321        pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAMHALFWORD;
;;;322        /* Program halfword (16-bit) at a specified address. */
;;;323        pFlash.DataRemaining = 1U;
;;;324      }
;;;325      else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
;;;326      {
;;;327        pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAMWORD;
;;;328        /* Program word (32-bit : 2*16-bit) at a specified address. */
;;;329        pFlash.DataRemaining = 2U;
;;;330      }
;;;331      else
;;;332      {
;;;333        pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAMDOUBLEWORD;
;;;334        /* Program double word (64-bit : 4*16-bit) at a specified address. */
;;;335        pFlash.DataRemaining = 4U;
;;;336      }
;;;337    
;;;338      /* Program halfword (16-bit) at a specified address. */
;;;339      FLASH_Program_HalfWord(Address, (uint16_t)Data);
;;;340    
;;;341      return status;
;;;342    }
00001c  e8bd81f0          POP      {r4-r8,pc}
                  |L13.32|
000020  2001              MOVS     r0,#1                 ;288
000022  4914              LDR      r1,|L13.116|
000024  7608              STRB     r0,[r1,#0x18]         ;288
000026  bf00              NOP                            ;288
000028  4813              LDR      r0,|L13.120|
00002a  6900              LDR      r0,[r0,#0x10]         ;313
00002c  f44050a0          ORR      r0,r0,#0x1400         ;313
000030  4911              LDR      r1,|L13.120|
000032  6108              STR      r0,[r1,#0x10]         ;313
000034  480f              LDR      r0,|L13.116|
000036  6087              STR      r7,[r0,#8]            ;316  ; pFlash
000038  6104              STR      r4,[r0,#0x10]         ;317  ; pFlash
00003a  6145              STR      r5,[r0,#0x14]         ;317  ; pFlash
00003c  2e01              CMP      r6,#1                 ;319
00003e  d105              BNE      |L13.76|
000040  2003              MOVS     r0,#3                 ;321
000042  490c              LDR      r1,|L13.116|
000044  7008              STRB     r0,[r1,#0]            ;321
000046  2001              MOVS     r0,#1                 ;323
000048  6048              STR      r0,[r1,#4]            ;323  ; pFlash
00004a  e00c              B        |L13.102|
                  |L13.76|
00004c  2e02              CMP      r6,#2                 ;325
00004e  d105              BNE      |L13.92|
000050  2004              MOVS     r0,#4                 ;327
000052  4908              LDR      r1,|L13.116|
000054  7008              STRB     r0,[r1,#0]            ;327
000056  2002              MOVS     r0,#2                 ;329
000058  6048              STR      r0,[r1,#4]            ;329  ; pFlash
00005a  e004              B        |L13.102|
                  |L13.92|
00005c  2005              MOVS     r0,#5                 ;333
00005e  4905              LDR      r1,|L13.116|
000060  7008              STRB     r0,[r1,#0]            ;333
000062  2004              MOVS     r0,#4                 ;335
000064  6048              STR      r0,[r1,#4]            ;335  ; pFlash
                  |L13.102|
000066  b2a1              UXTH     r1,r4                 ;339
000068  4638              MOV      r0,r7                 ;339
00006a  f7fffffe          BL       FLASH_Program_HalfWord
00006e  4640              MOV      r0,r8                 ;341
000070  e7d4              B        |L13.28|
;;;343    
                          ENDP

000072  0000              DCW      0x0000
                  |L13.116|
                          DCD      pFlash
                  |L13.120|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASH_Unlock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Unlock PROC
;;;672      */
;;;673    HAL_StatusTypeDef HAL_FLASH_Unlock(void)
000000  2000              MOVS     r0,#0
;;;674    {
;;;675      HAL_StatusTypeDef status = HAL_OK;
;;;676    
;;;677      if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
000002  4908              LDR      r1,|L14.36|
000004  6909              LDR      r1,[r1,#0x10]
000006  f0010180          AND      r1,r1,#0x80
00000a  b151              CBZ      r1,|L14.34|
;;;678      {
;;;679        /* Authorize the FLASH Registers access */
;;;680        WRITE_REG(FLASH->KEYR, FLASH_KEY1);
00000c  4906              LDR      r1,|L14.40|
00000e  4a05              LDR      r2,|L14.36|
000010  6051              STR      r1,[r2,#4]
;;;681        WRITE_REG(FLASH->KEYR, FLASH_KEY2);
000012  4906              LDR      r1,|L14.44|
000014  6051              STR      r1,[r2,#4]
;;;682    
;;;683        /* Verify Flash is unlocked */
;;;684        if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
000016  4611              MOV      r1,r2
000018  6909              LDR      r1,[r1,#0x10]
00001a  f0010180          AND      r1,r1,#0x80
00001e  b101              CBZ      r1,|L14.34|
;;;685        {
;;;686          status = HAL_ERROR;
000020  2001              MOVS     r0,#1
                  |L14.34|
;;;687        }
;;;688      }
;;;689    #if defined(FLASH_BANK2_END)
;;;690      if(READ_BIT(FLASH->CR2, FLASH_CR2_LOCK) != RESET)
;;;691      {
;;;692        /* Authorize the FLASH BANK2 Registers access */
;;;693        WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
;;;694        WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
;;;695        
;;;696        /* Verify Flash BANK2 is unlocked */
;;;697        if(READ_BIT(FLASH->CR2, FLASH_CR2_LOCK) != RESET)
;;;698        {
;;;699          status = HAL_ERROR;
;;;700        }
;;;701      }
;;;702    #endif /* FLASH_BANK2_END */
;;;703    
;;;704      return status;
;;;705    }
000022  4770              BX       lr
;;;706    
                          ENDP

                  |L14.36|
                          DCD      0x40022000
                  |L14.40|
                          DCD      0x45670123
                  |L14.44|
                          DCD      0xcdef89ab

                          AREA ||.bss||, DATA, NOINIT, ALIGN=3

                  pFlash
                          %        32

;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_flash.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f1xx_hal_flash_c_48aa8f3e____REV16|
#line 388 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___21_stm32f1xx_hal_flash_c_48aa8f3e____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f1xx_hal_flash_c_48aa8f3e____REVSH|
#line 402
|__asm___21_stm32f1xx_hal_flash_c_48aa8f3e____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f1xx_hal_flash_c_48aa8f3e____RRX|
#line 587
|__asm___21_stm32f1xx_hal_flash_c_48aa8f3e____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
