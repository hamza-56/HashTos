; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -orcc\stm32f1xx_hal_dma.o --asm_dir=..\ --list_dir=..\ --depend=rcc\stm32f1xx_hal_dma.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy -I../Drivers/CMSIS/Device/ST/STM32F1xx/Include -I../Drivers/CMSIS/Include -ID:\RCCv2\RCC\RCC\MDK-ARM\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=521 -D_RTE_ -DSTM32F10X_MD -DUSE_HAL_DRIVER -DSTM32F103xB --omf_browse=rcc\stm32f1xx_hal_dma.crf ../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_dma.c]
                          THUMB

                          AREA ||i.DMA_SetConfig||, CODE, READONLY, ALIGN=1

                  DMA_SetConfig PROC
;;;861      */
;;;862    static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
000000  b530              PUSH     {r4,r5,lr}
;;;863    {
;;;864      /* Clear all flags */
;;;865      hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
000002  f8905040          LDRB     r5,[r0,#0x40]
000006  2401              MOVS     r4,#1
000008  40ac              LSLS     r4,r4,r5
00000a  6bc5              LDR      r5,[r0,#0x3c]
00000c  606c              STR      r4,[r5,#4]
;;;866    
;;;867      /* Configure DMA Channel data length */
;;;868      hdma->Instance->CNDTR = DataLength;
00000e  6804              LDR      r4,[r0,#0]
000010  6063              STR      r3,[r4,#4]
;;;869    
;;;870      /* Memory to Peripheral */
;;;871      if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
000012  6844              LDR      r4,[r0,#4]
000014  2c10              CMP      r4,#0x10
000016  d104              BNE      |L1.34|
;;;872      {
;;;873        /* Configure DMA Channel destination address */
;;;874        hdma->Instance->CPAR = DstAddress;
000018  6804              LDR      r4,[r0,#0]
00001a  60a2              STR      r2,[r4,#8]
;;;875    
;;;876        /* Configure DMA Channel source address */
;;;877        hdma->Instance->CMAR = SrcAddress;
00001c  6804              LDR      r4,[r0,#0]
00001e  60e1              STR      r1,[r4,#0xc]
000020  e003              B        |L1.42|
                  |L1.34|
;;;878      }
;;;879      /* Peripheral to Memory */
;;;880      else
;;;881      {
;;;882        /* Configure DMA Channel source address */
;;;883        hdma->Instance->CPAR = SrcAddress;
000022  6804              LDR      r4,[r0,#0]
000024  60a1              STR      r1,[r4,#8]
;;;884    
;;;885        /* Configure DMA Channel destination address */
;;;886        hdma->Instance->CMAR = DstAddress;
000026  6804              LDR      r4,[r0,#0]
000028  60e2              STR      r2,[r4,#0xc]
                  |L1.42|
;;;887      }
;;;888    }
00002a  bd30              POP      {r4,r5,pc}
;;;889    
                          ENDP


                          AREA ||i.HAL_DMA_Abort||, CODE, READONLY, ALIGN=1

                  HAL_DMA_Abort PROC
;;;432      */
;;;433    HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
000000  4601              MOV      r1,r0
;;;434    {
;;;435      HAL_StatusTypeDef status = HAL_OK;
000002  2000              MOVS     r0,#0
;;;436    
;;;437      /* Disable DMA IT */
;;;438      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
000004  680a              LDR      r2,[r1,#0]
000006  6812              LDR      r2,[r2,#0]
000008  f022020e          BIC      r2,r2,#0xe
00000c  680b              LDR      r3,[r1,#0]
00000e  601a              STR      r2,[r3,#0]
;;;439        
;;;440      /* Disable the channel */
;;;441      __HAL_DMA_DISABLE(hdma);
000010  680a              LDR      r2,[r1,#0]
000012  6812              LDR      r2,[r2,#0]
000014  f0220201          BIC      r2,r2,#1
000018  680b              LDR      r3,[r1,#0]
00001a  601a              STR      r2,[r3,#0]
;;;442        
;;;443      /* Clear all flags */
;;;444      hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
00001c  f8913040          LDRB     r3,[r1,#0x40]
000020  2201              MOVS     r2,#1
000022  409a              LSLS     r2,r2,r3
000024  6bcb              LDR      r3,[r1,#0x3c]
000026  605a              STR      r2,[r3,#4]
;;;445    
;;;446      /* Change the DMA state */
;;;447      hdma->State = HAL_DMA_STATE_READY;
000028  2201              MOVS     r2,#1
00002a  f8812021          STRB     r2,[r1,#0x21]
;;;448    
;;;449      /* Process Unlocked */
;;;450      __HAL_UNLOCK(hdma);      
00002e  bf00              NOP      
000030  2200              MOVS     r2,#0
000032  f8812020          STRB     r2,[r1,#0x20]
000036  bf00              NOP      
;;;451      
;;;452      return status; 
;;;453    }
000038  4770              BX       lr
;;;454    
                          ENDP


                          AREA ||i.HAL_DMA_Abort_IT||, CODE, READONLY, ALIGN=2

                  HAL_DMA_Abort_IT PROC
;;;460      */
;;;461    HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
000000  b570              PUSH     {r4-r6,lr}
;;;462    {  
000002  4604              MOV      r4,r0
;;;463      HAL_StatusTypeDef status = HAL_OK;
000004  2500              MOVS     r5,#0
;;;464      
;;;465      if(HAL_DMA_STATE_BUSY != hdma->State)
000006  f8940021          LDRB     r0,[r4,#0x21]
00000a  2802              CMP      r0,#2
00000c  d003              BEQ      |L3.22|
;;;466      {
;;;467        /* no transfer ongoing */
;;;468        hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
00000e  2004              MOVS     r0,#4
000010  63a0              STR      r0,[r4,#0x38]
;;;469            
;;;470        status = HAL_ERROR;
000012  2501              MOVS     r5,#1
000014  e048              B        |L3.168|
                  |L3.22|
;;;471      }
;;;472      else
;;;473      { 
;;;474        /* Disable DMA IT */
;;;475        __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
000016  6820              LDR      r0,[r4,#0]
000018  6800              LDR      r0,[r0,#0]
00001a  f020000e          BIC      r0,r0,#0xe
00001e  6821              LDR      r1,[r4,#0]
000020  6008              STR      r0,[r1,#0]
;;;476    
;;;477        /* Disable the channel */
;;;478        __HAL_DMA_DISABLE(hdma);
000022  6820              LDR      r0,[r4,#0]
000024  6800              LDR      r0,[r0,#0]
000026  f0200001          BIC      r0,r0,#1
00002a  6821              LDR      r1,[r4,#0]
00002c  6008              STR      r0,[r1,#0]
;;;479    
;;;480        /* Clear all flags */
;;;481        __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
00002e  491f              LDR      r1,|L3.172|
000030  6820              LDR      r0,[r4,#0]
000032  4288              CMP      r0,r1
000034  d101              BNE      |L3.58|
000036  2001              MOVS     r0,#1
000038  e026              B        |L3.136|
                  |L3.58|
00003a  491c              LDR      r1,|L3.172|
00003c  3114              ADDS     r1,r1,#0x14
00003e  6820              LDR      r0,[r4,#0]
000040  4288              CMP      r0,r1
000042  d101              BNE      |L3.72|
000044  2010              MOVS     r0,#0x10
000046  e01f              B        |L3.136|
                  |L3.72|
000048  4918              LDR      r1,|L3.172|
00004a  3128              ADDS     r1,r1,#0x28
00004c  6820              LDR      r0,[r4,#0]
00004e  4288              CMP      r0,r1
000050  d101              BNE      |L3.86|
000052  1580              ASRS     r0,r0,#22
000054  e018              B        |L3.136|
                  |L3.86|
000056  4915              LDR      r1,|L3.172|
000058  313c              ADDS     r1,r1,#0x3c
00005a  6820              LDR      r0,[r4,#0]
00005c  4288              CMP      r0,r1
00005e  d101              BNE      |L3.100|
000060  1480              ASRS     r0,r0,#18
000062  e011              B        |L3.136|
                  |L3.100|
000064  4911              LDR      r1,|L3.172|
000066  3150              ADDS     r1,r1,#0x50
000068  6820              LDR      r0,[r4,#0]
00006a  4288              CMP      r0,r1
00006c  d102              BNE      |L3.116|
00006e  f44f3080          MOV      r0,#0x10000
000072  e009              B        |L3.136|
                  |L3.116|
000074  490d              LDR      r1,|L3.172|
000076  3164              ADDS     r1,r1,#0x64
000078  6820              LDR      r0,[r4,#0]
00007a  4288              CMP      r0,r1
00007c  d102              BNE      |L3.132|
00007e  f44f1080          MOV      r0,#0x100000
000082  e001              B        |L3.136|
                  |L3.132|
000084  f04f7080          MOV      r0,#0x1000000
                  |L3.136|
000088  4908              LDR      r1,|L3.172|
00008a  3908              SUBS     r1,r1,#8
00008c  6048              STR      r0,[r1,#4]
;;;482    
;;;483        /* Change the DMA state */
;;;484        hdma->State = HAL_DMA_STATE_READY;
00008e  2001              MOVS     r0,#1
000090  f8840021          STRB     r0,[r4,#0x21]
;;;485    
;;;486        /* Process Unlocked */
;;;487        __HAL_UNLOCK(hdma);
000094  bf00              NOP      
000096  2000              MOVS     r0,#0
000098  f8840020          STRB     r0,[r4,#0x20]
00009c  bf00              NOP      
;;;488    
;;;489        /* Call User Abort callback */
;;;490        if(hdma->XferAbortCallback != NULL)
00009e  6b60              LDR      r0,[r4,#0x34]
0000a0  b110              CBZ      r0,|L3.168|
;;;491        {
;;;492          hdma->XferAbortCallback(hdma);
0000a2  4620              MOV      r0,r4
0000a4  6b61              LDR      r1,[r4,#0x34]
0000a6  4788              BLX      r1
                  |L3.168|
;;;493        } 
;;;494      }
;;;495      return status;
0000a8  4628              MOV      r0,r5
;;;496    }
0000aa  bd70              POP      {r4-r6,pc}
;;;497    
                          ENDP

                  |L3.172|
                          DCD      0x40020008

                          AREA ||i.HAL_DMA_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_DMA_DeInit PROC
;;;242      */
;;;243    HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
000000  4601              MOV      r1,r0
;;;244    {
;;;245      /* Check the DMA handle allocation */
;;;246      if(hdma == NULL)
000002  b909              CBNZ     r1,|L4.8|
;;;247      {
;;;248        return HAL_ERROR;
000004  2001              MOVS     r0,#1
                  |L4.6|
;;;249      }
;;;250    
;;;251      /* Check the parameters */
;;;252      assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
;;;253    
;;;254      /* Disable the selected DMA Channelx */
;;;255      __HAL_DMA_DISABLE(hdma);
;;;256    
;;;257      /* Reset DMA Channel control register */
;;;258      hdma->Instance->CCR  = 0U;
;;;259    
;;;260      /* Reset DMA Channel Number of Data to Transfer register */
;;;261      hdma->Instance->CNDTR = 0U;
;;;262    
;;;263      /* Reset DMA Channel peripheral address register */
;;;264      hdma->Instance->CPAR  = 0U;
;;;265    
;;;266      /* Reset DMA Channel memory address register */
;;;267      hdma->Instance->CMAR = 0U;
;;;268    
;;;269    #if defined (STM32F101xE) || defined (STM32F101xG) || defined (STM32F103xE) || defined (STM32F103xG) || defined (STM32F100xE) || defined (STM32F105xC) || defined (STM32F107xC)
;;;270      /* calculation of the channel index */
;;;271      if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
;;;272      {
;;;273        /* DMA1 */
;;;274        hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
;;;275        hdma->DmaBaseAddress = DMA1;
;;;276      }
;;;277      else 
;;;278      {
;;;279        /* DMA2 */
;;;280        hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
;;;281        hdma->DmaBaseAddress = DMA2;
;;;282      }
;;;283    #else
;;;284      /* DMA1 */
;;;285      hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
;;;286      hdma->DmaBaseAddress = DMA1;
;;;287    #endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */
;;;288    
;;;289      /* Clear all flags */
;;;290      hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
;;;291    
;;;292      /* Initialize the error code */
;;;293      hdma->ErrorCode = HAL_DMA_ERROR_NONE;
;;;294    
;;;295      /* Initialize the DMA state */
;;;296      hdma->State = HAL_DMA_STATE_RESET;
;;;297    
;;;298      /* Release Lock */
;;;299      __HAL_UNLOCK(hdma);
;;;300    
;;;301      return HAL_OK;
;;;302    }
000006  4770              BX       lr
                  |L4.8|
000008  6808              LDR      r0,[r1,#0]            ;255
00000a  6800              LDR      r0,[r0,#0]            ;255
00000c  f0200001          BIC      r0,r0,#1              ;255
000010  680a              LDR      r2,[r1,#0]            ;255
000012  6010              STR      r0,[r2,#0]            ;255
000014  2000              MOVS     r0,#0                 ;258
000016  680a              LDR      r2,[r1,#0]            ;258
000018  6010              STR      r0,[r2,#0]            ;258
00001a  680a              LDR      r2,[r1,#0]            ;261
00001c  6050              STR      r0,[r2,#4]            ;261
00001e  680a              LDR      r2,[r1,#0]            ;264
000020  6090              STR      r0,[r2,#8]            ;264
000022  680a              LDR      r2,[r1,#0]            ;267
000024  60d0              STR      r0,[r2,#0xc]          ;267
000026  4a0d              LDR      r2,|L4.92|
000028  6808              LDR      r0,[r1,#0]            ;285
00002a  1a80              SUBS     r0,r0,r2              ;285
00002c  2214              MOVS     r2,#0x14              ;285
00002e  fbb0f0f2          UDIV     r0,r0,r2              ;285
000032  0080              LSLS     r0,r0,#2              ;285
000034  6408              STR      r0,[r1,#0x40]         ;285
000036  4809              LDR      r0,|L4.92|
000038  3808              SUBS     r0,r0,#8              ;286
00003a  63c8              STR      r0,[r1,#0x3c]         ;286
00003c  f8912040          LDRB     r2,[r1,#0x40]         ;290
000040  2001              MOVS     r0,#1                 ;290
000042  4090              LSLS     r0,r0,r2              ;290
000044  6bca              LDR      r2,[r1,#0x3c]         ;290
000046  6050              STR      r0,[r2,#4]            ;290
000048  2000              MOVS     r0,#0                 ;293
00004a  6388              STR      r0,[r1,#0x38]         ;293
00004c  f8810021          STRB     r0,[r1,#0x21]         ;296
000050  bf00              NOP                            ;299
000052  f8810020          STRB     r0,[r1,#0x20]         ;299
000056  bf00              NOP                            ;299
000058  bf00              NOP                            ;301
00005a  e7d4              B        |L4.6|
;;;303    
                          ENDP

                  |L4.92|
                          DCD      0x40020008

                          AREA ||i.HAL_DMA_GetError||, CODE, READONLY, ALIGN=1

                  HAL_DMA_GetError PROC
;;;835      */
;;;836    uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
000000  4601              MOV      r1,r0
;;;837    {
;;;838      return hdma->ErrorCode;
000002  6b88              LDR      r0,[r1,#0x38]
;;;839    }
000004  4770              BX       lr
;;;840    
                          ENDP


                          AREA ||i.HAL_DMA_GetState||, CODE, READONLY, ALIGN=1

                  HAL_DMA_GetState PROC
;;;823      */
;;;824    HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
000000  4601              MOV      r1,r0
;;;825    {
;;;826      /* Return DMA handle state */
;;;827      return hdma->State;
000002  f8910021          LDRB     r0,[r1,#0x21]
;;;828    }
000006  4770              BX       lr
;;;829    
                          ENDP


                          AREA ||i.HAL_DMA_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_DMA_IRQHandler PROC
;;;606      */
;;;607    void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
000000  b570              PUSH     {r4-r6,lr}
;;;608    {
000002  4604              MOV      r4,r0
;;;609      uint32_t flag_it = hdma->DmaBaseAddress->ISR;
000004  6be0              LDR      r0,[r4,#0x3c]
000006  6805              LDR      r5,[r0,#0]
;;;610      uint32_t source_it = hdma->Instance->CCR;
000008  6820              LDR      r0,[r4,#0]
00000a  6806              LDR      r6,[r0,#0]
;;;611      
;;;612      /* Half Transfer Complete Interrupt management ******************************/
;;;613      if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
00000c  f8941040          LDRB     r1,[r4,#0x40]
000010  2004              MOVS     r0,#4
000012  4088              LSLS     r0,r0,r1
000014  4028              ANDS     r0,r0,r5
000016  2800              CMP      r0,#0
000018  d046              BEQ      |L7.168|
00001a  f0060004          AND      r0,r6,#4
00001e  2800              CMP      r0,#0
000020  d042              BEQ      |L7.168|
;;;614      {
;;;615        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
;;;616        if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
000022  6820              LDR      r0,[r4,#0]
000024  6800              LDR      r0,[r0,#0]
000026  f0000020          AND      r0,r0,#0x20
00002a  b928              CBNZ     r0,|L7.56|
;;;617        {
;;;618          /* Disable the half transfer interrupt */
;;;619          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
00002c  6820              LDR      r0,[r4,#0]
00002e  6800              LDR      r0,[r0,#0]
000030  f0200004          BIC      r0,r0,#4
000034  6821              LDR      r1,[r4,#0]
000036  6008              STR      r0,[r1,#0]
                  |L7.56|
;;;620        }
;;;621        /* Clear the half transfer complete flag */
;;;622        __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
000038  4957              LDR      r1,|L7.408|
00003a  6820              LDR      r0,[r4,#0]
00003c  4288              CMP      r0,r1
00003e  d101              BNE      |L7.68|
000040  2004              MOVS     r0,#4
000042  e027              B        |L7.148|
                  |L7.68|
000044  4954              LDR      r1,|L7.408|
000046  3114              ADDS     r1,r1,#0x14
000048  6820              LDR      r0,[r4,#0]
00004a  4288              CMP      r0,r1
00004c  d101              BNE      |L7.82|
00004e  2040              MOVS     r0,#0x40
000050  e020              B        |L7.148|
                  |L7.82|
000052  4951              LDR      r1,|L7.408|
000054  3128              ADDS     r1,r1,#0x28
000056  6820              LDR      r0,[r4,#0]
000058  4288              CMP      r0,r1
00005a  d101              BNE      |L7.96|
00005c  1500              ASRS     r0,r0,#20
00005e  e019              B        |L7.148|
                  |L7.96|
000060  494d              LDR      r1,|L7.408|
000062  313c              ADDS     r1,r1,#0x3c
000064  6820              LDR      r0,[r4,#0]
000066  4288              CMP      r0,r1
000068  d102              BNE      |L7.112|
00006a  f44f4080          MOV      r0,#0x4000
00006e  e011              B        |L7.148|
                  |L7.112|
000070  4949              LDR      r1,|L7.408|
000072  3150              ADDS     r1,r1,#0x50
000074  6820              LDR      r0,[r4,#0]
000076  4288              CMP      r0,r1
000078  d102              BNE      |L7.128|
00007a  f44f2080          MOV      r0,#0x40000
00007e  e009              B        |L7.148|
                  |L7.128|
000080  4945              LDR      r1,|L7.408|
000082  3164              ADDS     r1,r1,#0x64
000084  6820              LDR      r0,[r4,#0]
000086  4288              CMP      r0,r1
000088  d102              BNE      |L7.144|
00008a  f44f0080          MOV      r0,#0x400000
00008e  e001              B        |L7.148|
                  |L7.144|
000090  f04f6080          MOV      r0,#0x4000000
                  |L7.148|
000094  4940              LDR      r1,|L7.408|
000096  3908              SUBS     r1,r1,#8
000098  6048              STR      r0,[r1,#4]
;;;623    
;;;624        /* DMA peripheral state is not updated in Half Transfer */
;;;625        /* but in Transfer Complete case */
;;;626    
;;;627        if(hdma->XferHalfCpltCallback != NULL)
00009a  6ae0              LDR      r0,[r4,#0x2c]
00009c  2800              CMP      r0,#0
00009e  d07a              BEQ      |L7.406|
;;;628        {
;;;629          /* Half transfer callback */
;;;630          hdma->XferHalfCpltCallback(hdma);
0000a0  4620              MOV      r0,r4
0000a2  6ae1              LDR      r1,[r4,#0x2c]
0000a4  4788              BLX      r1
0000a6  e076              B        |L7.406|
                  |L7.168|
;;;631        }
;;;632      }
;;;633    
;;;634      /* Transfer Complete Interrupt management ***********************************/
;;;635      else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
0000a8  f8941040          LDRB     r1,[r4,#0x40]
0000ac  2002              MOVS     r0,#2
0000ae  4088              LSLS     r0,r0,r1
0000b0  4028              ANDS     r0,r0,r5
0000b2  b3a0              CBZ      r0,|L7.286|
0000b4  f0060002          AND      r0,r6,#2
0000b8  b388              CBZ      r0,|L7.286|
;;;636      {
;;;637        if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
0000ba  6820              LDR      r0,[r4,#0]
0000bc  6800              LDR      r0,[r0,#0]
0000be  f0000020          AND      r0,r0,#0x20
0000c2  b940              CBNZ     r0,|L7.214|
;;;638        {
;;;639          /* Disable the transfer complete and error interrupt */
;;;640          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
0000c4  6820              LDR      r0,[r4,#0]
0000c6  6800              LDR      r0,[r0,#0]
0000c8  f020000a          BIC      r0,r0,#0xa
0000cc  6821              LDR      r1,[r4,#0]
0000ce  6008              STR      r0,[r1,#0]
;;;641    
;;;642          /* Change the DMA state */
;;;643          hdma->State = HAL_DMA_STATE_READY;
0000d0  2001              MOVS     r0,#1
0000d2  f8840021          STRB     r0,[r4,#0x21]
                  |L7.214|
;;;644        }
;;;645        /* Clear the transfer complete flag */
;;;646          __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
0000d6  4930              LDR      r1,|L7.408|
0000d8  6820              LDR      r0,[r4,#0]
0000da  4288              CMP      r0,r1
0000dc  d101              BNE      |L7.226|
0000de  2002              MOVS     r0,#2
0000e0  e028              B        |L7.308|
                  |L7.226|
0000e2  492d              LDR      r1,|L7.408|
0000e4  3114              ADDS     r1,r1,#0x14
0000e6  6820              LDR      r0,[r4,#0]
0000e8  4288              CMP      r0,r1
0000ea  d101              BNE      |L7.240|
0000ec  2020              MOVS     r0,#0x20
0000ee  e021              B        |L7.308|
                  |L7.240|
0000f0  4929              LDR      r1,|L7.408|
0000f2  3128              ADDS     r1,r1,#0x28
0000f4  6820              LDR      r0,[r4,#0]
0000f6  4288              CMP      r0,r1
0000f8  d101              BNE      |L7.254|
0000fa  1540              ASRS     r0,r0,#21
0000fc  e01a              B        |L7.308|
                  |L7.254|
0000fe  4926              LDR      r1,|L7.408|
000100  313c              ADDS     r1,r1,#0x3c
000102  6820              LDR      r0,[r4,#0]
000104  4288              CMP      r0,r1
000106  d102              BNE      |L7.270|
000108  f44f5000          MOV      r0,#0x2000
00010c  e012              B        |L7.308|
                  |L7.270|
00010e  4922              LDR      r1,|L7.408|
000110  3150              ADDS     r1,r1,#0x50
000112  6820              LDR      r0,[r4,#0]
000114  4288              CMP      r0,r1
000116  d103              BNE      |L7.288|
000118  f44f3000          MOV      r0,#0x20000
00011c  e00a              B        |L7.308|
                  |L7.286|
00011e  e017              B        |L7.336|
                  |L7.288|
000120  491d              LDR      r1,|L7.408|
000122  3164              ADDS     r1,r1,#0x64
000124  6820              LDR      r0,[r4,#0]
000126  4288              CMP      r0,r1
000128  d102              BNE      |L7.304|
00012a  f44f1000          MOV      r0,#0x200000
00012e  e001              B        |L7.308|
                  |L7.304|
000130  f04f7000          MOV      r0,#0x2000000
                  |L7.308|
000134  4918              LDR      r1,|L7.408|
000136  3908              SUBS     r1,r1,#8
000138  6048              STR      r0,[r1,#4]
;;;647    
;;;648        /* Process Unlocked */
;;;649        __HAL_UNLOCK(hdma);
00013a  bf00              NOP      
00013c  2000              MOVS     r0,#0
00013e  f8840020          STRB     r0,[r4,#0x20]
000142  bf00              NOP      
;;;650    
;;;651        if(hdma->XferCpltCallback != NULL)
000144  6aa0              LDR      r0,[r4,#0x28]
000146  b330              CBZ      r0,|L7.406|
;;;652        {
;;;653          /* Transfer complete callback */
;;;654          hdma->XferCpltCallback(hdma);
000148  4620              MOV      r0,r4
00014a  6aa1              LDR      r1,[r4,#0x28]
00014c  4788              BLX      r1
00014e  e022              B        |L7.406|
                  |L7.336|
;;;655        }
;;;656      }
;;;657    
;;;658      /* Transfer Error Interrupt management **************************************/
;;;659      else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
000150  f8941040          LDRB     r1,[r4,#0x40]
000154  2008              MOVS     r0,#8
000156  4088              LSLS     r0,r0,r1
000158  4028              ANDS     r0,r0,r5
00015a  b1e0              CBZ      r0,|L7.406|
00015c  f0060008          AND      r0,r6,#8
000160  b1c8              CBZ      r0,|L7.406|
;;;660      {
;;;661        /* When a DMA transfer error occurs */
;;;662        /* A hardware clear of its EN bits is performed */
;;;663        /* Disable ALL DMA IT */
;;;664        __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
000162  6820              LDR      r0,[r4,#0]
000164  6800              LDR      r0,[r0,#0]
000166  f020000e          BIC      r0,r0,#0xe
00016a  6821              LDR      r1,[r4,#0]
00016c  6008              STR      r0,[r1,#0]
;;;665    
;;;666        /* Clear all flags */
;;;667        hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
00016e  f8941040          LDRB     r1,[r4,#0x40]
000172  2001              MOVS     r0,#1
000174  4088              LSLS     r0,r0,r1
000176  6be1              LDR      r1,[r4,#0x3c]
000178  6048              STR      r0,[r1,#4]
;;;668    
;;;669        /* Update error code */
;;;670        hdma->ErrorCode = HAL_DMA_ERROR_TE;
00017a  2001              MOVS     r0,#1
00017c  63a0              STR      r0,[r4,#0x38]
;;;671    
;;;672        /* Change the DMA state */
;;;673        hdma->State = HAL_DMA_STATE_READY;
00017e  f8840021          STRB     r0,[r4,#0x21]
;;;674    
;;;675        /* Process Unlocked */
;;;676        __HAL_UNLOCK(hdma);
000182  bf00              NOP      
000184  2000              MOVS     r0,#0
000186  f8840020          STRB     r0,[r4,#0x20]
00018a  bf00              NOP      
;;;677    
;;;678        if (hdma->XferErrorCallback != NULL)
00018c  6b20              LDR      r0,[r4,#0x30]
00018e  b110              CBZ      r0,|L7.406|
;;;679        {
;;;680          /* Transfer error callback */
;;;681          hdma->XferErrorCallback(hdma);
000190  4620              MOV      r0,r4
000192  6b21              LDR      r1,[r4,#0x30]
000194  4788              BLX      r1
                  |L7.406|
;;;682        }
;;;683      }
;;;684      return;
;;;685    }
000196  bd70              POP      {r4-r6,pc}
;;;686    
                          ENDP

                  |L7.408|
                          DCD      0x40020008

                          AREA ||i.HAL_DMA_Init||, CODE, READONLY, ALIGN=2

                  HAL_DMA_Init PROC
;;;158      */
;;;159    HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
000000  4601              MOV      r1,r0
;;;160    {
;;;161      uint32_t tmp = 0U;
000002  2200              MOVS     r2,#0
;;;162    
;;;163      /* Check the DMA handle allocation */
;;;164      if(hdma == NULL)
000004  b909              CBNZ     r1,|L8.10|
;;;165      {
;;;166        return HAL_ERROR;
000006  2001              MOVS     r0,#1
                  |L8.8|
;;;167      }
;;;168    
;;;169      /* Check the parameters */
;;;170      assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
;;;171      assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
;;;172      assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
;;;173      assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
;;;174      assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
;;;175      assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
;;;176      assert_param(IS_DMA_MODE(hdma->Init.Mode));
;;;177      assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
;;;178    
;;;179    #if defined (STM32F101xE) || defined (STM32F101xG) || defined (STM32F103xE) || defined (STM32F103xG) || defined (STM32F100xE) || defined (STM32F105xC) || defined (STM32F107xC)
;;;180      /* calculation of the channel index */
;;;181      if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
;;;182      {
;;;183        /* DMA1 */
;;;184        hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
;;;185        hdma->DmaBaseAddress = DMA1;
;;;186      }
;;;187      else 
;;;188      {
;;;189        /* DMA2 */
;;;190        hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
;;;191        hdma->DmaBaseAddress = DMA2;
;;;192      }
;;;193    #else
;;;194      /* DMA1 */
;;;195      hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
;;;196      hdma->DmaBaseAddress = DMA1;
;;;197    #endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */
;;;198    
;;;199      /* Change DMA peripheral state */
;;;200      hdma->State = HAL_DMA_STATE_BUSY;
;;;201    
;;;202      /* Get the CR register value */
;;;203      tmp = hdma->Instance->CCR;
;;;204    
;;;205      /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
;;;206      tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
;;;207                          DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
;;;208                          DMA_CCR_DIR));
;;;209    
;;;210      /* Prepare the DMA Channel configuration */
;;;211      tmp |=  hdma->Init.Direction        |
;;;212              hdma->Init.PeriphInc           | hdma->Init.MemInc           |
;;;213              hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
;;;214              hdma->Init.Mode                | hdma->Init.Priority;
;;;215    
;;;216      /* Write to DMA Channel CR register */
;;;217      hdma->Instance->CCR = tmp;
;;;218    
;;;219    
;;;220      /* Clean callbacks */
;;;221      hdma->XferCpltCallback = NULL;
;;;222      hdma->XferHalfCpltCallback = NULL;
;;;223      hdma->XferErrorCallback = NULL;
;;;224      hdma->XferAbortCallback = NULL;
;;;225    
;;;226      /* Initialise the error code */
;;;227      hdma->ErrorCode = HAL_DMA_ERROR_NONE;
;;;228    
;;;229      /* Initialize the DMA state*/
;;;230      hdma->State = HAL_DMA_STATE_READY;
;;;231      /* Allocate lock resource and initialize it */
;;;232      hdma->Lock = HAL_UNLOCKED;
;;;233      
;;;234      return HAL_OK;
;;;235    }
000008  4770              BX       lr
                  |L8.10|
00000a  4b18              LDR      r3,|L8.108|
00000c  6808              LDR      r0,[r1,#0]            ;195
00000e  1ac0              SUBS     r0,r0,r3              ;195
000010  2314              MOVS     r3,#0x14              ;195
000012  fbb0f0f3          UDIV     r0,r0,r3              ;195
000016  0080              LSLS     r0,r0,#2              ;195
000018  6408              STR      r0,[r1,#0x40]         ;195
00001a  4814              LDR      r0,|L8.108|
00001c  3808              SUBS     r0,r0,#8              ;196
00001e  63c8              STR      r0,[r1,#0x3c]         ;196
000020  2002              MOVS     r0,#2                 ;200
000022  f8810021          STRB     r0,[r1,#0x21]         ;200
000026  6808              LDR      r0,[r1,#0]            ;203
000028  6802              LDR      r2,[r0,#0]            ;203
00002a  f64370f0          MOV      r0,#0x3ff0            ;206
00002e  4382              BICS     r2,r2,r0              ;206
000030  e9d10301          LDRD     r0,r3,[r1,#4]         ;211
000034  4318              ORRS     r0,r0,r3              ;211
000036  68cb              LDR      r3,[r1,#0xc]          ;211
000038  4318              ORRS     r0,r0,r3              ;211
00003a  690b              LDR      r3,[r1,#0x10]         ;211
00003c  4318              ORRS     r0,r0,r3              ;211
00003e  694b              LDR      r3,[r1,#0x14]         ;211
000040  4318              ORRS     r0,r0,r3              ;211
000042  698b              LDR      r3,[r1,#0x18]         ;211
000044  4318              ORRS     r0,r0,r3              ;211
000046  69cb              LDR      r3,[r1,#0x1c]         ;211
000048  4318              ORRS     r0,r0,r3              ;211
00004a  4302              ORRS     r2,r2,r0              ;211
00004c  6808              LDR      r0,[r1,#0]            ;217
00004e  6002              STR      r2,[r0,#0]            ;217
000050  2000              MOVS     r0,#0                 ;221
000052  6288              STR      r0,[r1,#0x28]         ;221
000054  62c8              STR      r0,[r1,#0x2c]         ;222
000056  6308              STR      r0,[r1,#0x30]         ;223
000058  6348              STR      r0,[r1,#0x34]         ;224
00005a  6388              STR      r0,[r1,#0x38]         ;227
00005c  2001              MOVS     r0,#1                 ;230
00005e  f8810021          STRB     r0,[r1,#0x21]         ;230
000062  2000              MOVS     r0,#0                 ;232
000064  f8810020          STRB     r0,[r1,#0x20]         ;232
000068  bf00              NOP                            ;234
00006a  e7cd              B        |L8.8|
;;;236    
                          ENDP

                  |L8.108|
                          DCD      0x40020008

                          AREA ||i.HAL_DMA_PollForTransfer||, CODE, READONLY, ALIGN=2

                  HAL_DMA_PollForTransfer PROC
;;;505      */
;;;506    HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, uint32_t CompleteLevel, uint32_t Timeout)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;507    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
;;;508      uint32_t temp;
;;;509      uint32_t tickstart = 0U;
00000a  f04f0800          MOV      r8,#0
;;;510    
;;;511      if(HAL_DMA_STATE_BUSY != hdma->State)
00000e  f8940021          LDRB     r0,[r4,#0x21]
000012  2802              CMP      r0,#2
000014  d009              BEQ      |L9.42|
;;;512      {
;;;513        /* no transfer ongoing */
;;;514        hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
000016  2004              MOVS     r0,#4
000018  63a0              STR      r0,[r4,#0x38]
;;;515        __HAL_UNLOCK(hdma);
00001a  bf00              NOP      
00001c  2000              MOVS     r0,#0
00001e  f8840020          STRB     r0,[r4,#0x20]
000022  bf00              NOP      
;;;516        return HAL_ERROR;
000024  2001              MOVS     r0,#1
                  |L9.38|
;;;517      }
;;;518    
;;;519      /* Polling mode not supported in circular mode */
;;;520      if (RESET != (hdma->Instance->CCR & DMA_CCR_CIRC))
;;;521      {
;;;522        hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
;;;523        return HAL_ERROR;
;;;524      }
;;;525      
;;;526      /* Get the level transfer complete flag */
;;;527      if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
;;;528      {
;;;529        /* Transfer Complete flag */
;;;530        temp = __HAL_DMA_GET_TC_FLAG_INDEX(hdma);
;;;531      }
;;;532      else
;;;533      {
;;;534        /* Half Transfer Complete flag */
;;;535        temp = __HAL_DMA_GET_HT_FLAG_INDEX(hdma);
;;;536      }
;;;537    
;;;538      /* Get tick */
;;;539      tickstart = HAL_GetTick();
;;;540    
;;;541      while(__HAL_DMA_GET_FLAG(hdma, temp) == RESET)
;;;542      {
;;;543        if((__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET))
;;;544        {
;;;545          /* When a DMA transfer error occurs */
;;;546          /* A hardware clear of its EN bits is performed */
;;;547          /* Clear all flags */
;;;548          hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
;;;549    
;;;550          /* Update error code */
;;;551          SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
;;;552    
;;;553          /* Change the DMA state */
;;;554          hdma->State= HAL_DMA_STATE_READY;
;;;555    
;;;556          /* Process Unlocked */
;;;557          __HAL_UNLOCK(hdma);
;;;558    
;;;559          return HAL_ERROR;
;;;560        }
;;;561        /* Check for the Timeout */
;;;562        if(Timeout != HAL_MAX_DELAY)
;;;563        {
;;;564          if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
;;;565          {
;;;566            /* Update error code */
;;;567            SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
;;;568    
;;;569            /* Change the DMA state */
;;;570            hdma->State = HAL_DMA_STATE_READY;
;;;571    
;;;572            /* Process Unlocked */
;;;573            __HAL_UNLOCK(hdma);
;;;574    
;;;575            return HAL_ERROR;
;;;576          }
;;;577        }
;;;578      }
;;;579    
;;;580      if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
;;;581      {
;;;582        /* Clear the transfer complete flag */
;;;583        __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
;;;584    
;;;585        /* The selected Channelx EN bit is cleared (DMA is disabled and
;;;586        all transfers are complete) */
;;;587        hdma->State = HAL_DMA_STATE_READY;
;;;588      }
;;;589      else
;;;590      {
;;;591        /* Clear the half transfer complete flag */
;;;592        __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
;;;593      }
;;;594      
;;;595      /* Process unlocked */
;;;596      __HAL_UNLOCK(hdma);
;;;597    
;;;598      return HAL_OK;
;;;599    }
000026  e8bd81f0          POP      {r4-r8,pc}
                  |L9.42|
00002a  6820              LDR      r0,[r4,#0]            ;520
00002c  6800              LDR      r0,[r0,#0]            ;520
00002e  f0000020          AND      r0,r0,#0x20           ;520
000032  b120              CBZ      r0,|L9.62|
000034  f44f7080          MOV      r0,#0x100             ;522
000038  63a0              STR      r0,[r4,#0x38]         ;522
00003a  2001              MOVS     r0,#1                 ;523
00003c  e7f3              B        |L9.38|
                  |L9.62|
00003e  bb7e              CBNZ     r6,|L9.160|
000040  499b              LDR      r1,|L9.688|
000042  6820              LDR      r0,[r4,#0]            ;530
000044  4288              CMP      r0,r1                 ;530
000046  d101              BNE      |L9.76|
000048  2002              MOVS     r0,#2                 ;530
00004a  e027              B        |L9.156|
                  |L9.76|
00004c  4998              LDR      r1,|L9.688|
00004e  3114              ADDS     r1,r1,#0x14           ;530
000050  6820              LDR      r0,[r4,#0]            ;530
000052  4288              CMP      r0,r1                 ;530
000054  d101              BNE      |L9.90|
000056  2020              MOVS     r0,#0x20              ;530
000058  e020              B        |L9.156|
                  |L9.90|
00005a  4995              LDR      r1,|L9.688|
00005c  3128              ADDS     r1,r1,#0x28           ;530
00005e  6820              LDR      r0,[r4,#0]            ;530
000060  4288              CMP      r0,r1                 ;530
000062  d101              BNE      |L9.104|
000064  1540              ASRS     r0,r0,#21             ;530
000066  e019              B        |L9.156|
                  |L9.104|
000068  4991              LDR      r1,|L9.688|
00006a  313c              ADDS     r1,r1,#0x3c           ;530
00006c  6820              LDR      r0,[r4,#0]            ;530
00006e  4288              CMP      r0,r1                 ;530
000070  d102              BNE      |L9.120|
000072  f44f5000          MOV      r0,#0x2000            ;530
000076  e011              B        |L9.156|
                  |L9.120|
000078  498d              LDR      r1,|L9.688|
00007a  3150              ADDS     r1,r1,#0x50           ;530
00007c  6820              LDR      r0,[r4,#0]            ;530
00007e  4288              CMP      r0,r1                 ;530
000080  d102              BNE      |L9.136|
000082  f44f3000          MOV      r0,#0x20000           ;530
000086  e009              B        |L9.156|
                  |L9.136|
000088  4989              LDR      r1,|L9.688|
00008a  3164              ADDS     r1,r1,#0x64           ;530
00008c  6820              LDR      r0,[r4,#0]            ;530
00008e  4288              CMP      r0,r1                 ;530
000090  d102              BNE      |L9.152|
000092  f44f1000          MOV      r0,#0x200000          ;530
000096  e001              B        |L9.156|
                  |L9.152|
000098  f04f7000          MOV      r0,#0x2000000         ;530
                  |L9.156|
00009c  4607              MOV      r7,r0                 ;530
00009e  e02f              B        |L9.256|
                  |L9.160|
0000a0  e7ff              B        |L9.162|
                  |L9.162|
0000a2  4983              LDR      r1,|L9.688|
0000a4  6820              LDR      r0,[r4,#0]            ;535
0000a6  4288              CMP      r0,r1                 ;535
0000a8  d101              BNE      |L9.174|
0000aa  2004              MOVS     r0,#4                 ;535
0000ac  e027              B        |L9.254|
                  |L9.174|
0000ae  4980              LDR      r1,|L9.688|
0000b0  3114              ADDS     r1,r1,#0x14           ;535
0000b2  6820              LDR      r0,[r4,#0]            ;535
0000b4  4288              CMP      r0,r1                 ;535
0000b6  d101              BNE      |L9.188|
0000b8  2040              MOVS     r0,#0x40              ;535
0000ba  e020              B        |L9.254|
                  |L9.188|
0000bc  497c              LDR      r1,|L9.688|
0000be  3128              ADDS     r1,r1,#0x28           ;535
0000c0  6820              LDR      r0,[r4,#0]            ;535
0000c2  4288              CMP      r0,r1                 ;535
0000c4  d101              BNE      |L9.202|
0000c6  1500              ASRS     r0,r0,#20             ;535
0000c8  e019              B        |L9.254|
                  |L9.202|
0000ca  4979              LDR      r1,|L9.688|
0000cc  313c              ADDS     r1,r1,#0x3c           ;535
0000ce  6820              LDR      r0,[r4,#0]            ;535
0000d0  4288              CMP      r0,r1                 ;535
0000d2  d102              BNE      |L9.218|
0000d4  f44f4080          MOV      r0,#0x4000            ;535
0000d8  e011              B        |L9.254|
                  |L9.218|
0000da  4975              LDR      r1,|L9.688|
0000dc  3150              ADDS     r1,r1,#0x50           ;535
0000de  6820              LDR      r0,[r4,#0]            ;535
0000e0  4288              CMP      r0,r1                 ;535
0000e2  d102              BNE      |L9.234|
0000e4  f44f2080          MOV      r0,#0x40000           ;535
0000e8  e009              B        |L9.254|
                  |L9.234|
0000ea  4971              LDR      r1,|L9.688|
0000ec  3164              ADDS     r1,r1,#0x64           ;535
0000ee  6820              LDR      r0,[r4,#0]            ;535
0000f0  4288              CMP      r0,r1                 ;535
0000f2  d102              BNE      |L9.250|
0000f4  f44f0080          MOV      r0,#0x400000          ;535
0000f8  e001              B        |L9.254|
                  |L9.250|
0000fa  f04f6080          MOV      r0,#0x4000000         ;535
                  |L9.254|
0000fe  4607              MOV      r7,r0                 ;535
                  |L9.256|
000100  f7fffffe          BL       HAL_GetTick
000104  4680              MOV      r8,r0                 ;539
000106  e05d              B        |L9.452|
                  |L9.264|
000108  4869              LDR      r0,|L9.688|
00010a  3808              SUBS     r0,r0,#8              ;543
00010c  6800              LDR      r0,[r0,#0]            ;543
00010e  4a68              LDR      r2,|L9.688|
000110  6821              LDR      r1,[r4,#0]            ;543
000112  4291              CMP      r1,r2                 ;543
000114  d101              BNE      |L9.282|
000116  2108              MOVS     r1,#8                 ;543
000118  e027              B        |L9.362|
                  |L9.282|
00011a  4a65              LDR      r2,|L9.688|
00011c  3214              ADDS     r2,r2,#0x14           ;543
00011e  6821              LDR      r1,[r4,#0]            ;543
000120  4291              CMP      r1,r2                 ;543
000122  d101              BNE      |L9.296|
000124  2180              MOVS     r1,#0x80              ;543
000126  e020              B        |L9.362|
                  |L9.296|
000128  4a61              LDR      r2,|L9.688|
00012a  3228              ADDS     r2,r2,#0x28           ;543
00012c  6821              LDR      r1,[r4,#0]            ;543
00012e  4291              CMP      r1,r2                 ;543
000130  d101              BNE      |L9.310|
000132  14c9              ASRS     r1,r1,#19             ;543
000134  e019              B        |L9.362|
                  |L9.310|
000136  4a5e              LDR      r2,|L9.688|
000138  323c              ADDS     r2,r2,#0x3c           ;543
00013a  6821              LDR      r1,[r4,#0]            ;543
00013c  4291              CMP      r1,r2                 ;543
00013e  d102              BNE      |L9.326|
000140  f44f4100          MOV      r1,#0x8000            ;543
000144  e011              B        |L9.362|
                  |L9.326|
000146  4a5a              LDR      r2,|L9.688|
000148  3250              ADDS     r2,r2,#0x50           ;543
00014a  6821              LDR      r1,[r4,#0]            ;543
00014c  4291              CMP      r1,r2                 ;543
00014e  d102              BNE      |L9.342|
000150  f44f2100          MOV      r1,#0x80000           ;543
000154  e009              B        |L9.362|
                  |L9.342|
000156  4a56              LDR      r2,|L9.688|
000158  3264              ADDS     r2,r2,#0x64           ;543
00015a  6821              LDR      r1,[r4,#0]            ;543
00015c  4291              CMP      r1,r2                 ;543
00015e  d102              BNE      |L9.358|
000160  f44f0100          MOV      r1,#0x800000          ;543
000164  e001              B        |L9.362|
                  |L9.358|
000166  f04f6100          MOV      r1,#0x8000000         ;543
                  |L9.362|
00016a  4008              ANDS     r0,r0,r1              ;543
00016c  b198              CBZ      r0,|L9.406|
00016e  f8941040          LDRB     r1,[r4,#0x40]         ;548
000172  2001              MOVS     r0,#1                 ;548
000174  4088              LSLS     r0,r0,r1              ;548
000176  6be1              LDR      r1,[r4,#0x3c]         ;548
000178  6048              STR      r0,[r1,#4]            ;548
00017a  6ba0              LDR      r0,[r4,#0x38]         ;551
00017c  f0400001          ORR      r0,r0,#1              ;551
000180  63a0              STR      r0,[r4,#0x38]         ;551
000182  2001              MOVS     r0,#1                 ;554
000184  f8840021          STRB     r0,[r4,#0x21]         ;554
000188  bf00              NOP                            ;557
00018a  2000              MOVS     r0,#0                 ;557
00018c  f8840020          STRB     r0,[r4,#0x20]         ;557
000190  bf00              NOP                            ;557
000192  2001              MOVS     r0,#1                 ;559
000194  e747              B        |L9.38|
                  |L9.406|
000196  1c68              ADDS     r0,r5,#1              ;562
000198  b1a0              CBZ      r0,|L9.452|
00019a  b12d              CBZ      r5,|L9.424|
00019c  f7fffffe          BL       HAL_GetTick
0001a0  eba00008          SUB      r0,r0,r8              ;564
0001a4  42a8              CMP      r0,r5                 ;564
0001a6  d90d              BLS      |L9.452|
                  |L9.424|
0001a8  6ba0              LDR      r0,[r4,#0x38]         ;567
0001aa  f0400020          ORR      r0,r0,#0x20           ;567
0001ae  63a0              STR      r0,[r4,#0x38]         ;567
0001b0  2001              MOVS     r0,#1                 ;570
0001b2  f8840021          STRB     r0,[r4,#0x21]         ;570
0001b6  bf00              NOP                            ;573
0001b8  2000              MOVS     r0,#0                 ;573
0001ba  f8840020          STRB     r0,[r4,#0x20]         ;573
0001be  bf00              NOP                            ;573
0001c0  2001              MOVS     r0,#1                 ;575
0001c2  e730              B        |L9.38|
                  |L9.452|
0001c4  483a              LDR      r0,|L9.688|
0001c6  3808              SUBS     r0,r0,#8              ;541
0001c8  6800              LDR      r0,[r0,#0]            ;541
0001ca  4038              ANDS     r0,r0,r7              ;541
0001cc  2800              CMP      r0,#0                 ;541
0001ce  d09b              BEQ      |L9.264|
0001d0  bba6              CBNZ     r6,|L9.572|
0001d2  4937              LDR      r1,|L9.688|
0001d4  6820              LDR      r0,[r4,#0]            ;583
0001d6  4288              CMP      r0,r1                 ;583
0001d8  d101              BNE      |L9.478|
0001da  2002              MOVS     r0,#2                 ;583
0001dc  e027              B        |L9.558|
                  |L9.478|
0001de  4934              LDR      r1,|L9.688|
0001e0  3114              ADDS     r1,r1,#0x14           ;583
0001e2  6820              LDR      r0,[r4,#0]            ;583
0001e4  4288              CMP      r0,r1                 ;583
0001e6  d101              BNE      |L9.492|
0001e8  2020              MOVS     r0,#0x20              ;583
0001ea  e020              B        |L9.558|
                  |L9.492|
0001ec  4930              LDR      r1,|L9.688|
0001ee  3128              ADDS     r1,r1,#0x28           ;583
0001f0  6820              LDR      r0,[r4,#0]            ;583
0001f2  4288              CMP      r0,r1                 ;583
0001f4  d101              BNE      |L9.506|
0001f6  1540              ASRS     r0,r0,#21             ;583
0001f8  e019              B        |L9.558|
                  |L9.506|
0001fa  492d              LDR      r1,|L9.688|
0001fc  313c              ADDS     r1,r1,#0x3c           ;583
0001fe  6820              LDR      r0,[r4,#0]            ;583
000200  4288              CMP      r0,r1                 ;583
000202  d102              BNE      |L9.522|
000204  f44f5000          MOV      r0,#0x2000            ;583
000208  e011              B        |L9.558|
                  |L9.522|
00020a  4929              LDR      r1,|L9.688|
00020c  3150              ADDS     r1,r1,#0x50           ;583
00020e  6820              LDR      r0,[r4,#0]            ;583
000210  4288              CMP      r0,r1                 ;583
000212  d102              BNE      |L9.538|
000214  f44f3000          MOV      r0,#0x20000           ;583
000218  e009              B        |L9.558|
                  |L9.538|
00021a  4925              LDR      r1,|L9.688|
00021c  3164              ADDS     r1,r1,#0x64           ;583
00021e  6820              LDR      r0,[r4,#0]            ;583
000220  4288              CMP      r0,r1                 ;583
000222  d102              BNE      |L9.554|
000224  f44f1000          MOV      r0,#0x200000          ;583
000228  e001              B        |L9.558|
                  |L9.554|
00022a  f04f7000          MOV      r0,#0x2000000         ;583
                  |L9.558|
00022e  4920              LDR      r1,|L9.688|
000230  3908              SUBS     r1,r1,#8              ;583
000232  6048              STR      r0,[r1,#4]            ;583
000234  2001              MOVS     r0,#1                 ;587
000236  f8840021          STRB     r0,[r4,#0x21]         ;587
00023a  e031              B        |L9.672|
                  |L9.572|
00023c  e7ff              B        |L9.574|
                  |L9.574|
00023e  491c              LDR      r1,|L9.688|
000240  6820              LDR      r0,[r4,#0]            ;592
000242  4288              CMP      r0,r1                 ;592
000244  d101              BNE      |L9.586|
000246  2004              MOVS     r0,#4                 ;592
000248  e027              B        |L9.666|
                  |L9.586|
00024a  4919              LDR      r1,|L9.688|
00024c  3114              ADDS     r1,r1,#0x14           ;592
00024e  6820              LDR      r0,[r4,#0]            ;592
000250  4288              CMP      r0,r1                 ;592
000252  d101              BNE      |L9.600|
000254  2040              MOVS     r0,#0x40              ;592
000256  e020              B        |L9.666|
                  |L9.600|
000258  4915              LDR      r1,|L9.688|
00025a  3128              ADDS     r1,r1,#0x28           ;592
00025c  6820              LDR      r0,[r4,#0]            ;592
00025e  4288              CMP      r0,r1                 ;592
000260  d101              BNE      |L9.614|
000262  1500              ASRS     r0,r0,#20             ;592
000264  e019              B        |L9.666|
                  |L9.614|
000266  4912              LDR      r1,|L9.688|
000268  313c              ADDS     r1,r1,#0x3c           ;592
00026a  6820              LDR      r0,[r4,#0]            ;592
00026c  4288              CMP      r0,r1                 ;592
00026e  d102              BNE      |L9.630|
000270  f44f4080          MOV      r0,#0x4000            ;592
000274  e011              B        |L9.666|
                  |L9.630|
000276  490e              LDR      r1,|L9.688|
000278  3150              ADDS     r1,r1,#0x50           ;592
00027a  6820              LDR      r0,[r4,#0]            ;592
00027c  4288              CMP      r0,r1                 ;592
00027e  d102              BNE      |L9.646|
000280  f44f2080          MOV      r0,#0x40000           ;592
000284  e009              B        |L9.666|
                  |L9.646|
000286  490a              LDR      r1,|L9.688|
000288  3164              ADDS     r1,r1,#0x64           ;592
00028a  6820              LDR      r0,[r4,#0]            ;592
00028c  4288              CMP      r0,r1                 ;592
00028e  d102              BNE      |L9.662|
000290  f44f0080          MOV      r0,#0x400000          ;592
000294  e001              B        |L9.666|
                  |L9.662|
000296  f04f6080          MOV      r0,#0x4000000         ;592
                  |L9.666|
00029a  4905              LDR      r1,|L9.688|
00029c  3908              SUBS     r1,r1,#8              ;592
00029e  6048              STR      r0,[r1,#4]            ;592
                  |L9.672|
0002a0  bf00              NOP                            ;596
0002a2  2000              MOVS     r0,#0                 ;596
0002a4  f8840020          STRB     r0,[r4,#0x20]         ;596
0002a8  bf00              NOP                            ;596
0002aa  bf00              NOP                            ;598
0002ac  e6bb              B        |L9.38|
;;;600    
                          ENDP

0002ae  0000              DCW      0x0000
                  |L9.688|
                          DCD      0x40020008

                          AREA ||i.HAL_DMA_RegisterCallback||, CODE, READONLY, ALIGN=1

                  HAL_DMA_RegisterCallback PROC
;;;696      */                          
;;;697    HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
000000  b510              PUSH     {r4,lr}
;;;698    {
000002  4603              MOV      r3,r0
;;;699      HAL_StatusTypeDef status = HAL_OK;
000004  2400              MOVS     r4,#0
;;;700      
;;;701      /* Process locked */
;;;702      __HAL_LOCK(hdma);
000006  bf00              NOP      
000008  f8930020          LDRB     r0,[r3,#0x20]
00000c  2801              CMP      r0,#1
00000e  d101              BNE      |L10.20|
000010  2002              MOVS     r0,#2
                  |L10.18|
;;;703      
;;;704      if(HAL_DMA_STATE_READY == hdma->State)
;;;705      {
;;;706        switch (CallbackID)
;;;707        {
;;;708        case  HAL_DMA_XFER_CPLT_CB_ID:
;;;709          hdma->XferCpltCallback = pCallback;
;;;710          break;
;;;711          
;;;712        case  HAL_DMA_XFER_HALFCPLT_CB_ID:
;;;713          hdma->XferHalfCpltCallback = pCallback;
;;;714          break;         
;;;715    
;;;716        case  HAL_DMA_XFER_ERROR_CB_ID:
;;;717          hdma->XferErrorCallback = pCallback;
;;;718          break;         
;;;719          
;;;720        case  HAL_DMA_XFER_ABORT_CB_ID:
;;;721          hdma->XferAbortCallback = pCallback;
;;;722          break; 
;;;723          
;;;724        default:
;;;725          status = HAL_ERROR;
;;;726          break;                                                            
;;;727        }
;;;728      }
;;;729      else
;;;730      {
;;;731        status = HAL_ERROR;
;;;732      } 
;;;733      
;;;734      /* Release Lock */
;;;735      __HAL_UNLOCK(hdma);
;;;736      
;;;737      return status;
;;;738    }
000012  bd10              POP      {r4,pc}
                  |L10.20|
000014  2001              MOVS     r0,#1                 ;702
000016  f8830020          STRB     r0,[r3,#0x20]         ;702
00001a  bf00              NOP                            ;702
00001c  f8930021          LDRB     r0,[r3,#0x21]         ;704
000020  2801              CMP      r0,#1                 ;704
000022  d112              BNE      |L10.74|
000024  b131              CBZ      r1,|L10.52|
000026  2901              CMP      r1,#1                 ;706
000028  d006              BEQ      |L10.56|
00002a  2902              CMP      r1,#2                 ;706
00002c  d006              BEQ      |L10.60|
00002e  2903              CMP      r1,#3                 ;706
000030  d108              BNE      |L10.68|
000032  e005              B        |L10.64|
                  |L10.52|
000034  629a              STR      r2,[r3,#0x28]         ;709
000036  e007              B        |L10.72|
                  |L10.56|
000038  62da              STR      r2,[r3,#0x2c]         ;713
00003a  e005              B        |L10.72|
                  |L10.60|
00003c  631a              STR      r2,[r3,#0x30]         ;717
00003e  e003              B        |L10.72|
                  |L10.64|
000040  635a              STR      r2,[r3,#0x34]         ;721
000042  e001              B        |L10.72|
                  |L10.68|
000044  2401              MOVS     r4,#1                 ;725
000046  bf00              NOP                            ;726
                  |L10.72|
000048  e000              B        |L10.76|
                  |L10.74|
00004a  2401              MOVS     r4,#1                 ;731
                  |L10.76|
00004c  bf00              NOP                            ;735
00004e  2000              MOVS     r0,#0                 ;735
000050  f8830020          STRB     r0,[r3,#0x20]         ;735
000054  bf00              NOP                            ;735
000056  4620              MOV      r0,r4                 ;737
000058  e7db              B        |L10.18|
;;;739    
                          ENDP


                          AREA ||i.HAL_DMA_Start||, CODE, READONLY, ALIGN=1

                  HAL_DMA_Start PROC
;;;335      */
;;;336    HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;337    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;338      HAL_StatusTypeDef status = HAL_OK;
00000c  f04f0800          MOV      r8,#0
;;;339    
;;;340      /* Check the parameters */
;;;341      assert_param(IS_DMA_BUFFER_SIZE(DataLength));
;;;342    
;;;343      /* Process locked */
;;;344      __HAL_LOCK(hdma);
000010  bf00              NOP      
000012  f8940020          LDRB     r0,[r4,#0x20]
000016  2801              CMP      r0,#1
000018  d102              BNE      |L11.32|
00001a  2002              MOVS     r0,#2
                  |L11.28|
;;;345    
;;;346      if(HAL_DMA_STATE_READY == hdma->State)
;;;347      {
;;;348        /* Change DMA peripheral state */
;;;349        hdma->State = HAL_DMA_STATE_BUSY;
;;;350        hdma->ErrorCode = HAL_DMA_ERROR_NONE;
;;;351                
;;;352        /* Disable the peripheral */
;;;353        __HAL_DMA_DISABLE(hdma);
;;;354        
;;;355        /* Configure the source, destination address and the data length & clear flags*/
;;;356        DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
;;;357        
;;;358        /* Enable the Peripheral */
;;;359        __HAL_DMA_ENABLE(hdma);
;;;360      }
;;;361      else
;;;362      {
;;;363       /* Process Unlocked */
;;;364       __HAL_UNLOCK(hdma);  
;;;365       status = HAL_BUSY;
;;;366      }  
;;;367      return status;
;;;368    }
00001c  e8bd81f0          POP      {r4-r8,pc}
                  |L11.32|
000020  2001              MOVS     r0,#1                 ;344
000022  f8840020          STRB     r0,[r4,#0x20]         ;344
000026  bf00              NOP                            ;344
000028  f8940021          LDRB     r0,[r4,#0x21]         ;346
00002c  2801              CMP      r0,#1                 ;346
00002e  d117              BNE      |L11.96|
000030  2002              MOVS     r0,#2                 ;349
000032  f8840021          STRB     r0,[r4,#0x21]         ;349
000036  2000              MOVS     r0,#0                 ;350
000038  63a0              STR      r0,[r4,#0x38]         ;350
00003a  6820              LDR      r0,[r4,#0]            ;353
00003c  6800              LDR      r0,[r0,#0]            ;353
00003e  f0200001          BIC      r0,r0,#1              ;353
000042  6821              LDR      r1,[r4,#0]            ;353
000044  6008              STR      r0,[r1,#0]            ;353
000046  463b              MOV      r3,r7                 ;356
000048  4632              MOV      r2,r6                 ;356
00004a  4629              MOV      r1,r5                 ;356
00004c  4620              MOV      r0,r4                 ;356
00004e  f7fffffe          BL       DMA_SetConfig
000052  6820              LDR      r0,[r4,#0]            ;359
000054  6800              LDR      r0,[r0,#0]            ;359
000056  f0400001          ORR      r0,r0,#1              ;359
00005a  6821              LDR      r1,[r4,#0]            ;359
00005c  6008              STR      r0,[r1,#0]            ;359
00005e  e006              B        |L11.110|
                  |L11.96|
000060  bf00              NOP                            ;364
000062  2000              MOVS     r0,#0                 ;364
000064  f8840020          STRB     r0,[r4,#0x20]         ;364
000068  bf00              NOP                            ;364
00006a  f04f0802          MOV      r8,#2                 ;365
                  |L11.110|
00006e  4640              MOV      r0,r8                 ;367
000070  e7d4              B        |L11.28|
;;;369    
                          ENDP


                          AREA ||i.HAL_DMA_Start_IT||, CODE, READONLY, ALIGN=1

                  HAL_DMA_Start_IT PROC
;;;378      */
;;;379    HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;380    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;381      HAL_StatusTypeDef status = HAL_OK;
00000c  f04f0800          MOV      r8,#0
;;;382    
;;;383      /* Check the parameters */
;;;384      assert_param(IS_DMA_BUFFER_SIZE(DataLength));
;;;385    
;;;386      /* Process locked */
;;;387      __HAL_LOCK(hdma);
000010  bf00              NOP      
000012  f8940020          LDRB     r0,[r4,#0x20]
000016  2801              CMP      r0,#1
000018  d102              BNE      |L12.32|
00001a  2002              MOVS     r0,#2
                  |L12.28|
;;;388      
;;;389      if(HAL_DMA_STATE_READY == hdma->State)
;;;390      {
;;;391        /* Change DMA peripheral state */
;;;392        hdma->State = HAL_DMA_STATE_BUSY;
;;;393        hdma->ErrorCode = HAL_DMA_ERROR_NONE;
;;;394        
;;;395        /* Disable the peripheral */
;;;396        __HAL_DMA_DISABLE(hdma);
;;;397        
;;;398        /* Configure the source, destination address and the data length & clear flags*/
;;;399        DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
;;;400        
;;;401        /* Enable the transfer complete interrupt */
;;;402        /* Enable the transfer Error interrupt */
;;;403        if(NULL != hdma->XferHalfCpltCallback)
;;;404        {
;;;405          /* Enable the Half transfer complete interrupt as well */
;;;406          __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
;;;407        }
;;;408        else
;;;409        {
;;;410          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
;;;411          __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
;;;412        }
;;;413        /* Enable the Peripheral */
;;;414        __HAL_DMA_ENABLE(hdma);
;;;415      }
;;;416      else
;;;417      {      
;;;418        /* Process Unlocked */
;;;419        __HAL_UNLOCK(hdma); 
;;;420    
;;;421        /* Remain BUSY */
;;;422        status = HAL_BUSY;
;;;423      }    
;;;424      return status;
;;;425    }
00001c  e8bd81f0          POP      {r4-r8,pc}
                  |L12.32|
000020  2001              MOVS     r0,#1                 ;387
000022  f8840020          STRB     r0,[r4,#0x20]         ;387
000026  bf00              NOP                            ;387
000028  f8940021          LDRB     r0,[r4,#0x21]         ;389
00002c  2801              CMP      r0,#1                 ;389
00002e  d12c              BNE      |L12.138|
000030  2002              MOVS     r0,#2                 ;392
000032  f8840021          STRB     r0,[r4,#0x21]         ;392
000036  2000              MOVS     r0,#0                 ;393
000038  63a0              STR      r0,[r4,#0x38]         ;393
00003a  6820              LDR      r0,[r4,#0]            ;396
00003c  6800              LDR      r0,[r0,#0]            ;396
00003e  f0200001          BIC      r0,r0,#1              ;396
000042  6821              LDR      r1,[r4,#0]            ;396
000044  6008              STR      r0,[r1,#0]            ;396
000046  463b              MOV      r3,r7                 ;399
000048  4632              MOV      r2,r6                 ;399
00004a  4629              MOV      r1,r5                 ;399
00004c  4620              MOV      r0,r4                 ;399
00004e  f7fffffe          BL       DMA_SetConfig
000052  6ae0              LDR      r0,[r4,#0x2c]         ;403
000054  b130              CBZ      r0,|L12.100|
000056  6820              LDR      r0,[r4,#0]            ;406
000058  6800              LDR      r0,[r0,#0]            ;406
00005a  f040000e          ORR      r0,r0,#0xe            ;406
00005e  6821              LDR      r1,[r4,#0]            ;406
000060  6008              STR      r0,[r1,#0]            ;406
000062  e00b              B        |L12.124|
                  |L12.100|
000064  6820              LDR      r0,[r4,#0]            ;410
000066  6800              LDR      r0,[r0,#0]            ;410
000068  f0200004          BIC      r0,r0,#4              ;410
00006c  6821              LDR      r1,[r4,#0]            ;410
00006e  6008              STR      r0,[r1,#0]            ;410
000070  6820              LDR      r0,[r4,#0]            ;411
000072  6800              LDR      r0,[r0,#0]            ;411
000074  f040000a          ORR      r0,r0,#0xa            ;411
000078  6821              LDR      r1,[r4,#0]            ;411
00007a  6008              STR      r0,[r1,#0]            ;411
                  |L12.124|
00007c  6820              LDR      r0,[r4,#0]            ;414
00007e  6800              LDR      r0,[r0,#0]            ;414
000080  f0400001          ORR      r0,r0,#1              ;414
000084  6821              LDR      r1,[r4,#0]            ;414
000086  6008              STR      r0,[r1,#0]            ;414
000088  e006              B        |L12.152|
                  |L12.138|
00008a  bf00              NOP                            ;419
00008c  2000              MOVS     r0,#0                 ;419
00008e  f8840020          STRB     r0,[r4,#0x20]         ;419
000092  bf00              NOP                            ;419
000094  f04f0802          MOV      r8,#2                 ;422
                  |L12.152|
000098  4640              MOV      r0,r8                 ;424
00009a  e7bf              B        |L12.28|
;;;426    
                          ENDP


                          AREA ||i.HAL_DMA_UnRegisterCallback||, CODE, READONLY, ALIGN=1

                  HAL_DMA_UnRegisterCallback PROC
;;;747      */              
;;;748    HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
000000  4602              MOV      r2,r0
;;;749    {
;;;750      HAL_StatusTypeDef status = HAL_OK;
000002  2300              MOVS     r3,#0
;;;751    
;;;752      /* Process locked */
;;;753      __HAL_LOCK(hdma);
000004  bf00              NOP      
000006  f8920020          LDRB     r0,[r2,#0x20]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L13.18|
00000e  2002              MOVS     r0,#2
                  |L13.16|
;;;754      
;;;755      if(HAL_DMA_STATE_READY == hdma->State)
;;;756      {
;;;757        switch (CallbackID)
;;;758        {
;;;759        case  HAL_DMA_XFER_CPLT_CB_ID:
;;;760          hdma->XferCpltCallback = NULL;
;;;761          break;
;;;762    
;;;763        case  HAL_DMA_XFER_HALFCPLT_CB_ID:
;;;764          hdma->XferHalfCpltCallback = NULL;
;;;765          break;         
;;;766    
;;;767        case  HAL_DMA_XFER_ERROR_CB_ID:
;;;768          hdma->XferErrorCallback = NULL;
;;;769          break;         
;;;770    
;;;771        case  HAL_DMA_XFER_ABORT_CB_ID:
;;;772          hdma->XferAbortCallback = NULL;
;;;773          break; 
;;;774    
;;;775        case   HAL_DMA_XFER_ALL_CB_ID:
;;;776          hdma->XferCpltCallback = NULL;
;;;777          hdma->XferHalfCpltCallback = NULL;
;;;778          hdma->XferErrorCallback = NULL;
;;;779          hdma->XferAbortCallback = NULL;
;;;780          break; 
;;;781    
;;;782        default:
;;;783          status = HAL_ERROR;
;;;784          break;
;;;785        }
;;;786      }
;;;787      else
;;;788      {
;;;789        status = HAL_ERROR;
;;;790      } 
;;;791      
;;;792      /* Release Lock */
;;;793      __HAL_UNLOCK(hdma);
;;;794      
;;;795      return status;
;;;796    }
000010  4770              BX       lr
                  |L13.18|
000012  2001              MOVS     r0,#1                 ;753
000014  f8820020          STRB     r0,[r2,#0x20]         ;753
000018  bf00              NOP                            ;753
00001a  f8920021          LDRB     r0,[r2,#0x21]         ;755
00001e  2801              CMP      r0,#1                 ;755
000020  d11b              BNE      |L13.90|
000022  2905              CMP      r1,#5                 ;757
000024  d216              BCS      |L13.84|
000026  e8dff001          TBB      [pc,r1]               ;757
00002a  0306              DCB      0x03,0x06
00002c  090c0f00          DCB      0x09,0x0c,0x0f,0x00
000030  2000              MOVS     r0,#0                 ;760
000032  6290              STR      r0,[r2,#0x28]         ;760
000034  e010              B        |L13.88|
000036  2000              MOVS     r0,#0                 ;764
000038  62d0              STR      r0,[r2,#0x2c]         ;764
00003a  e00d              B        |L13.88|
00003c  2000              MOVS     r0,#0                 ;768
00003e  6310              STR      r0,[r2,#0x30]         ;768
000040  e00a              B        |L13.88|
000042  2000              MOVS     r0,#0                 ;772
000044  6350              STR      r0,[r2,#0x34]         ;772
000046  e007              B        |L13.88|
000048  2000              MOVS     r0,#0                 ;776
00004a  6290              STR      r0,[r2,#0x28]         ;776
00004c  62d0              STR      r0,[r2,#0x2c]         ;777
00004e  6310              STR      r0,[r2,#0x30]         ;778
000050  6350              STR      r0,[r2,#0x34]         ;779
000052  e001              B        |L13.88|
                  |L13.84|
000054  2301              MOVS     r3,#1                 ;783
000056  bf00              NOP                            ;784
                  |L13.88|
000058  e000              B        |L13.92|
                  |L13.90|
00005a  2301              MOVS     r3,#1                 ;789
                  |L13.92|
00005c  bf00              NOP                            ;793
00005e  2000              MOVS     r0,#0                 ;793
000060  f8820020          STRB     r0,[r2,#0x20]         ;793
000064  bf00              NOP                            ;793
000066  4618              MOV      r0,r3                 ;795
000068  e7d2              B        |L13.16|
;;;797      
                          ENDP


;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_dma.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_dma_c_c25f65ec____REV16|
#line 388 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___19_stm32f1xx_hal_dma_c_c25f65ec____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_dma_c_c25f65ec____REVSH|
#line 402
|__asm___19_stm32f1xx_hal_dma_c_c25f65ec____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_dma_c_c25f65ec____RRX|
#line 587
|__asm___19_stm32f1xx_hal_dma_c_c25f65ec____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
