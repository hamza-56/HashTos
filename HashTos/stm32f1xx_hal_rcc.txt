; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -orcc\stm32f1xx_hal_rcc.o --asm_dir=..\ --list_dir=..\ --depend=rcc\stm32f1xx_hal_rcc.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy -I../Drivers/CMSIS/Device/ST/STM32F1xx/Include -I../Drivers/CMSIS/Include -ID:\RCCv2\RCC\RCC\MDK-ARM\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=521 -D_RTE_ -DSTM32F10X_MD -DUSE_HAL_DRIVER -DSTM32F103xB --omf_browse=rcc\stm32f1xx_hal_rcc.crf ../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c]
                          THUMB

                          AREA ||i.HAL_RCC_CSSCallback||, CODE, READONLY, ALIGN=1

                  HAL_RCC_CSSCallback PROC
;;;1378     */
;;;1379   __weak void HAL_RCC_CSSCallback(void)
000000  4770              BX       lr
;;;1380   {
;;;1381     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1382       the HAL_RCC_CSSCallback could be implemented in the user file
;;;1383       */ 
;;;1384   }
;;;1385   
                          ENDP


                          AREA ||i.HAL_RCC_ClockConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_ClockConfig PROC
;;;808      */
;;;809    HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
000000  b570              PUSH     {r4-r6,lr}
;;;810    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;811      uint32_t tickstart = 0U;
000006  2600              MOVS     r6,#0
;;;812      
;;;813      /* Check the parameters */
;;;814      assert_param(RCC_ClkInitStruct != NULL);
;;;815      assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
;;;816      assert_param(IS_FLASH_LATENCY(FLatency));
;;;817    
;;;818      /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
;;;819      must be correctly programmed according to the frequency of the CPU clock 
;;;820        (HCLK) of the device. */
;;;821    
;;;822    #if defined(FLASH_ACR_LATENCY)
;;;823      /* Increasing the number of wait states because of higher CPU frequency */
;;;824      if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
000008  4862              LDR      r0,|L2.404|
00000a  6800              LDR      r0,[r0,#0]
00000c  f0000007          AND      r0,r0,#7
000010  42a8              CMP      r0,r5
000012  d20e              BCS      |L2.50|
;;;825      {    
;;;826        /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
;;;827        __HAL_FLASH_SET_LATENCY(FLatency);
000014  485f              LDR      r0,|L2.404|
000016  6800              LDR      r0,[r0,#0]
000018  f0200007          BIC      r0,r0,#7
00001c  4328              ORRS     r0,r0,r5
00001e  495d              LDR      r1,|L2.404|
000020  6008              STR      r0,[r1,#0]
;;;828        
;;;829        /* Check that the new number of wait states is taken into account to access the Flash
;;;830        memory by reading the FLASH_ACR register */
;;;831        if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
000022  4608              MOV      r0,r1
000024  6800              LDR      r0,[r0,#0]
000026  f0000007          AND      r0,r0,#7
00002a  42a8              CMP      r0,r5
00002c  d001              BEQ      |L2.50|
;;;832        {
;;;833          return HAL_ERROR;
00002e  2001              MOVS     r0,#1
                  |L2.48|
;;;834        }
;;;835      }
;;;836    
;;;837    #endif /* FLASH_ACR_LATENCY */
;;;838      /*-------------------------- HCLK Configuration --------------------------*/
;;;839      if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
;;;840      {
;;;841        assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
;;;842        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
;;;843      }
;;;844    
;;;845      /*------------------------- SYSCLK Configuration ---------------------------*/ 
;;;846      if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
;;;847      {    
;;;848        assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
;;;849        
;;;850        /* HSE is selected as System Clock Source */
;;;851        if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
;;;852        {
;;;853          /* Check the HSE ready flag */  
;;;854          if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
;;;855          {
;;;856            return HAL_ERROR;
;;;857          }
;;;858        }
;;;859        /* PLL is selected as System Clock Source */
;;;860        else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
;;;861        {
;;;862          /* Check the PLL ready flag */  
;;;863          if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
;;;864          {
;;;865            return HAL_ERROR;
;;;866          }
;;;867        }
;;;868        /* HSI is selected as System Clock Source */
;;;869        else
;;;870        {
;;;871          /* Check the HSI ready flag */  
;;;872          if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
;;;873          {
;;;874            return HAL_ERROR;
;;;875          }
;;;876        }
;;;877        __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
;;;878    
;;;879        /* Get Start Tick */
;;;880        tickstart = HAL_GetTick();
;;;881        
;;;882        if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
;;;883        {
;;;884          while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
;;;885          {
;;;886            if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
;;;887            {
;;;888              return HAL_TIMEOUT;
;;;889            }
;;;890          }
;;;891        }
;;;892        else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
;;;893        {
;;;894          while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
;;;895          {
;;;896            if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
;;;897            {
;;;898              return HAL_TIMEOUT;
;;;899            }
;;;900          }
;;;901        }
;;;902        else
;;;903        {
;;;904          while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
;;;905          {
;;;906            if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
;;;907            {
;;;908              return HAL_TIMEOUT;
;;;909            }
;;;910          }
;;;911        }      
;;;912      }    
;;;913    #if defined(FLASH_ACR_LATENCY)
;;;914      /* Decreasing the number of wait states because of lower CPU frequency */
;;;915      if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
;;;916      {    
;;;917        /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
;;;918        __HAL_FLASH_SET_LATENCY(FLatency);
;;;919        
;;;920        /* Check that the new number of wait states is taken into account to access the Flash
;;;921        memory by reading the FLASH_ACR register */
;;;922        if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
;;;923        {
;;;924          return HAL_ERROR;
;;;925        }
;;;926      }    
;;;927    #endif /* FLASH_ACR_LATENCY */
;;;928    
;;;929      /*-------------------------- PCLK1 Configuration ---------------------------*/ 
;;;930      if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
;;;931      {
;;;932        assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
;;;933        MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
;;;934      }
;;;935      
;;;936      /*-------------------------- PCLK2 Configuration ---------------------------*/ 
;;;937      if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
;;;938      {
;;;939        assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
;;;940        MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
;;;941      }
;;;942     
;;;943      /* Update the SystemCoreClock global variable */
;;;944      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
;;;945    
;;;946      /* Configure the source of time base considering new system clocks settings*/
;;;947      HAL_InitTick (TICK_INT_PRIORITY);
;;;948      
;;;949      return HAL_OK;
;;;950    }
000030  bd70              POP      {r4-r6,pc}
                  |L2.50|
000032  7820              LDRB     r0,[r4,#0]            ;839
000034  f0000002          AND      r0,r0,#2              ;839
000038  2802              CMP      r0,#2                 ;839
00003a  d107              BNE      |L2.76|
00003c  4856              LDR      r0,|L2.408|
00003e  6840              LDR      r0,[r0,#4]            ;842
000040  f02000f0          BIC      r0,r0,#0xf0           ;842
000044  68a1              LDR      r1,[r4,#8]            ;842
000046  4308              ORRS     r0,r0,r1              ;842
000048  4953              LDR      r1,|L2.408|
00004a  6048              STR      r0,[r1,#4]            ;842
                  |L2.76|
00004c  7820              LDRB     r0,[r4,#0]            ;846
00004e  f0000001          AND      r0,r0,#1              ;846
000052  2800              CMP      r0,#0                 ;846
000054  d05d              BEQ      |L2.274|
000056  6860              LDR      r0,[r4,#4]            ;851
000058  2801              CMP      r0,#1                 ;851
00005a  d106              BNE      |L2.106|
00005c  484e              LDR      r0,|L2.408|
00005e  6800              LDR      r0,[r0,#0]            ;854
000060  f4003000          AND      r0,r0,#0x20000        ;854
000064  b990              CBNZ     r0,|L2.140|
000066  2001              MOVS     r0,#1                 ;856
000068  e7e2              B        |L2.48|
                  |L2.106|
00006a  6860              LDR      r0,[r4,#4]            ;860
00006c  2802              CMP      r0,#2                 ;860
00006e  d106              BNE      |L2.126|
000070  4849              LDR      r0,|L2.408|
000072  6800              LDR      r0,[r0,#0]            ;863
000074  f0007000          AND      r0,r0,#0x2000000      ;863
000078  b940              CBNZ     r0,|L2.140|
00007a  2001              MOVS     r0,#1                 ;865
00007c  e7d8              B        |L2.48|
                  |L2.126|
00007e  4846              LDR      r0,|L2.408|
000080  6800              LDR      r0,[r0,#0]            ;872
000082  f0000002          AND      r0,r0,#2              ;872
000086  b908              CBNZ     r0,|L2.140|
000088  2001              MOVS     r0,#1                 ;874
00008a  e7d1              B        |L2.48|
                  |L2.140|
00008c  4842              LDR      r0,|L2.408|
00008e  6840              LDR      r0,[r0,#4]            ;877
000090  f0200003          BIC      r0,r0,#3              ;877
000094  6861              LDR      r1,[r4,#4]            ;877
000096  4308              ORRS     r0,r0,r1              ;877
000098  493f              LDR      r1,|L2.408|
00009a  6048              STR      r0,[r1,#4]            ;877
00009c  f7fffffe          BL       HAL_GetTick
0000a0  4606              MOV      r6,r0                 ;880
0000a2  6860              LDR      r0,[r4,#4]            ;882
0000a4  2801              CMP      r0,#1                 ;882
0000a6  d110              BNE      |L2.202|
0000a8  e008              B        |L2.188|
                  |L2.170|
0000aa  f7fffffe          BL       HAL_GetTick
0000ae  1b80              SUBS     r0,r0,r6              ;886
0000b0  f2413188          MOV      r1,#0x1388            ;886
0000b4  4288              CMP      r0,r1                 ;886
0000b6  d901              BLS      |L2.188|
0000b8  2003              MOVS     r0,#3                 ;888
0000ba  e7b9              B        |L2.48|
                  |L2.188|
0000bc  4836              LDR      r0,|L2.408|
0000be  6840              LDR      r0,[r0,#4]            ;884
0000c0  f000000c          AND      r0,r0,#0xc            ;884
0000c4  2804              CMP      r0,#4                 ;884
0000c6  d1f0              BNE      |L2.170|
0000c8  e023              B        |L2.274|
                  |L2.202|
0000ca  6860              LDR      r0,[r4,#4]            ;892
0000cc  2802              CMP      r0,#2                 ;892
0000ce  d110              BNE      |L2.242|
0000d0  e008              B        |L2.228|
                  |L2.210|
0000d2  f7fffffe          BL       HAL_GetTick
0000d6  1b80              SUBS     r0,r0,r6              ;896
0000d8  f2413188          MOV      r1,#0x1388            ;896
0000dc  4288              CMP      r0,r1                 ;896
0000de  d901              BLS      |L2.228|
0000e0  2003              MOVS     r0,#3                 ;898
0000e2  e7a5              B        |L2.48|
                  |L2.228|
0000e4  482c              LDR      r0,|L2.408|
0000e6  6840              LDR      r0,[r0,#4]            ;894
0000e8  f000000c          AND      r0,r0,#0xc            ;894
0000ec  2808              CMP      r0,#8                 ;894
0000ee  d1f0              BNE      |L2.210|
0000f0  e00f              B        |L2.274|
                  |L2.242|
0000f2  e008              B        |L2.262|
                  |L2.244|
0000f4  f7fffffe          BL       HAL_GetTick
0000f8  1b80              SUBS     r0,r0,r6              ;906
0000fa  f2413188          MOV      r1,#0x1388            ;906
0000fe  4288              CMP      r0,r1                 ;906
000100  d901              BLS      |L2.262|
000102  2003              MOVS     r0,#3                 ;908
000104  e794              B        |L2.48|
                  |L2.262|
000106  4824              LDR      r0,|L2.408|
000108  6840              LDR      r0,[r0,#4]            ;904
00010a  f000000c          AND      r0,r0,#0xc            ;904
00010e  2800              CMP      r0,#0                 ;904
000110  d1f0              BNE      |L2.244|
                  |L2.274|
000112  4820              LDR      r0,|L2.404|
000114  6800              LDR      r0,[r0,#0]            ;915
000116  f0000007          AND      r0,r0,#7              ;915
00011a  42a8              CMP      r0,r5                 ;915
00011c  d90e              BLS      |L2.316|
00011e  481d              LDR      r0,|L2.404|
000120  6800              LDR      r0,[r0,#0]            ;918
000122  f0200007          BIC      r0,r0,#7              ;918
000126  4328              ORRS     r0,r0,r5              ;918
000128  491a              LDR      r1,|L2.404|
00012a  6008              STR      r0,[r1,#0]            ;918
00012c  4608              MOV      r0,r1                 ;922
00012e  6800              LDR      r0,[r0,#0]            ;922
000130  f0000007          AND      r0,r0,#7              ;922
000134  42a8              CMP      r0,r5                 ;922
000136  d001              BEQ      |L2.316|
000138  2001              MOVS     r0,#1                 ;924
00013a  e779              B        |L2.48|
                  |L2.316|
00013c  7820              LDRB     r0,[r4,#0]            ;930
00013e  f0000004          AND      r0,r0,#4              ;930
000142  2804              CMP      r0,#4                 ;930
000144  d107              BNE      |L2.342|
000146  4814              LDR      r0,|L2.408|
000148  6840              LDR      r0,[r0,#4]            ;933
00014a  f42060e0          BIC      r0,r0,#0x700          ;933
00014e  68e1              LDR      r1,[r4,#0xc]          ;933
000150  4308              ORRS     r0,r0,r1              ;933
000152  4911              LDR      r1,|L2.408|
000154  6048              STR      r0,[r1,#4]            ;933
                  |L2.342|
000156  7820              LDRB     r0,[r4,#0]            ;937
000158  f0000008          AND      r0,r0,#8              ;937
00015c  2808              CMP      r0,#8                 ;937
00015e  d108              BNE      |L2.370|
000160  480d              LDR      r0,|L2.408|
000162  6840              LDR      r0,[r0,#4]            ;940
000164  f4205060          BIC      r0,r0,#0x3800         ;940
000168  6921              LDR      r1,[r4,#0x10]         ;940
00016a  ea4000c1          ORR      r0,r0,r1,LSL #3       ;940
00016e  490a              LDR      r1,|L2.408|
000170  6048              STR      r0,[r1,#4]            ;940
                  |L2.370|
000172  f7fffffe          BL       HAL_RCC_GetSysClockFreq
000176  4908              LDR      r1,|L2.408|
000178  6849              LDR      r1,[r1,#4]            ;944
00017a  f3c11103          UBFX     r1,r1,#4,#4           ;944
00017e  4a07              LDR      r2,|L2.412|
000180  5c51              LDRB     r1,[r2,r1]            ;944
000182  40c8              LSRS     r0,r0,r1              ;944
000184  4906              LDR      r1,|L2.416|
000186  6008              STR      r0,[r1,#0]            ;944  ; SystemCoreClock
000188  2000              MOVS     r0,#0                 ;947
00018a  f7fffffe          BL       HAL_InitTick
00018e  2000              MOVS     r0,#0                 ;949
000190  e74e              B        |L2.48|
;;;951    
                          ENDP

000192  0000              DCW      0x0000
                  |L2.404|
                          DCD      0x40022000
                  |L2.408|
                          DCD      0x40021000
                  |L2.412|
                          DCD      AHBPrescTable
                  |L2.416|
                          DCD      SystemCoreClock

                          AREA ||i.HAL_RCC_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_RCC_DeInit PROC
;;;217      */
;;;218    HAL_StatusTypeDef HAL_RCC_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;219    {
;;;220      uint32_t tickstart;
;;;221    
;;;222      /* Get Start Tick */
;;;223      tickstart = HAL_GetTick();
000002  f7fffffe          BL       HAL_GetTick
000006  4604              MOV      r4,r0
;;;224    
;;;225      /* Set HSION bit */
;;;226      SET_BIT(RCC->CR, RCC_CR_HSION);
000008  483c              LDR      r0,|L3.252|
00000a  6800              LDR      r0,[r0,#0]
00000c  f0400001          ORR      r0,r0,#1
000010  493a              LDR      r1,|L3.252|
000012  6008              STR      r0,[r1,#0]
;;;227    
;;;228      /* Wait till HSI is ready */
;;;229      while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
000014  e006              B        |L3.36|
                  |L3.22|
;;;230      {
;;;231        if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
000016  f7fffffe          BL       HAL_GetTick
00001a  1b00              SUBS     r0,r0,r4
00001c  2802              CMP      r0,#2
00001e  d901              BLS      |L3.36|
;;;232        {
;;;233          return HAL_TIMEOUT;
000020  2003              MOVS     r0,#3
                  |L3.34|
;;;234        }
;;;235      }
;;;236    
;;;237      /* Set HSITRIM bits to the reset value */
;;;238      MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
;;;239    
;;;240      /* Get Start Tick */
;;;241      tickstart = HAL_GetTick();
;;;242    
;;;243      /* Reset CFGR register */
;;;244      CLEAR_REG(RCC->CFGR);
;;;245    
;;;246      /* Wait till clock switch is ready */
;;;247      while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
;;;248      {
;;;249        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
;;;250        {
;;;251          return HAL_TIMEOUT;
;;;252        }
;;;253      }
;;;254    
;;;255      /* Update the SystemCoreClock global variable */
;;;256      SystemCoreClock = HSI_VALUE;
;;;257    
;;;258      /* Adapt Systick interrupt period */
;;;259      if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
;;;260      {
;;;261        return HAL_ERROR;
;;;262      }
;;;263    
;;;264      /* Get Start Tick */
;;;265      tickstart = HAL_GetTick();
;;;266    
;;;267      /* Second step is to clear PLLON bit */
;;;268      CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
;;;269    
;;;270      /* Wait till PLL is disabled */
;;;271      while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
;;;272      {
;;;273        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
;;;274        {
;;;275          return HAL_TIMEOUT;
;;;276        }
;;;277      }
;;;278    
;;;279      /* Ensure to reset PLLSRC and PLLMUL bits */
;;;280      CLEAR_REG(RCC->CFGR);
;;;281    
;;;282      /* Get Start Tick */
;;;283      tickstart = HAL_GetTick();
;;;284    
;;;285      /* Reset HSEON & CSSON bits */
;;;286      CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
;;;287    
;;;288      /* Wait till HSE is disabled */
;;;289      while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
;;;290      {
;;;291        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
;;;292        {
;;;293          return HAL_TIMEOUT;
;;;294        }
;;;295      }
;;;296    
;;;297      /* Reset HSEBYP bit */
;;;298      CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
;;;299    
;;;300    #if defined(RCC_PLL2_SUPPORT)
;;;301      /* Get Start Tick */
;;;302      tickstart = HAL_GetTick();
;;;303    
;;;304      /* Clear PLL2ON bit */
;;;305      CLEAR_BIT(RCC->CR, RCC_CR_PLL2ON);
;;;306    
;;;307      /* Wait till PLL2 is disabled */
;;;308      while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != RESET)
;;;309      {
;;;310        if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
;;;311        {
;;;312          return HAL_TIMEOUT;
;;;313        }
;;;314      }
;;;315    #endif /* RCC_PLL2_SUPPORT */
;;;316    
;;;317    #if defined(RCC_PLLI2S_SUPPORT)
;;;318      /* Get Start Tick */
;;;319      tickstart = HAL_GetTick();
;;;320    
;;;321      /* Clear PLL3ON bit */
;;;322      CLEAR_BIT(RCC->CR, RCC_CR_PLL3ON);
;;;323    
;;;324      /* Wait till PLL3 is disabled */
;;;325      while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != RESET)
;;;326      {
;;;327        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
;;;328        {
;;;329          return HAL_TIMEOUT;
;;;330        }
;;;331      }
;;;332    #endif /* RCC_PLLI2S_SUPPORT */
;;;333    
;;;334    #if defined(RCC_CFGR2_PREDIV1)
;;;335      /* Reset CFGR2 register */
;;;336      CLEAR_REG(RCC->CFGR2);
;;;337    #endif /* RCC_CFGR2_PREDIV1 */
;;;338    
;;;339      /* Reset all CSR flags */
;;;340      SET_BIT(RCC->CSR, RCC_CSR_RMVF);
;;;341    
;;;342      /* Disable all interrupts */
;;;343      CLEAR_REG(RCC->CIR);
;;;344    
;;;345      return HAL_OK;
;;;346    }
000022  bd10              POP      {r4,pc}
                  |L3.36|
000024  4835              LDR      r0,|L3.252|
000026  6800              LDR      r0,[r0,#0]            ;229
000028  f0000002          AND      r0,r0,#2              ;229
00002c  2800              CMP      r0,#0                 ;229
00002e  d0f2              BEQ      |L3.22|
000030  4832              LDR      r0,|L3.252|
000032  6800              LDR      r0,[r0,#0]            ;238
000034  f02000f8          BIC      r0,r0,#0xf8           ;238
000038  f0400080          ORR      r0,r0,#0x80           ;238
00003c  492f              LDR      r1,|L3.252|
00003e  6008              STR      r0,[r1,#0]            ;238
000040  f7fffffe          BL       HAL_GetTick
000044  4604              MOV      r4,r0                 ;241
000046  2000              MOVS     r0,#0                 ;244
000048  492c              LDR      r1,|L3.252|
00004a  6048              STR      r0,[r1,#4]            ;244
00004c  e008              B        |L3.96|
                  |L3.78|
00004e  f7fffffe          BL       HAL_GetTick
000052  1b00              SUBS     r0,r0,r4              ;249
000054  f2413188          MOV      r1,#0x1388            ;249
000058  4288              CMP      r0,r1                 ;249
00005a  d901              BLS      |L3.96|
00005c  2003              MOVS     r0,#3                 ;251
00005e  e7e0              B        |L3.34|
                  |L3.96|
000060  4826              LDR      r0,|L3.252|
000062  6840              LDR      r0,[r0,#4]            ;247
000064  f000000c          AND      r0,r0,#0xc            ;247
000068  2800              CMP      r0,#0                 ;247
00006a  d1f0              BNE      |L3.78|
00006c  4824              LDR      r0,|L3.256|
00006e  4925              LDR      r1,|L3.260|
000070  6008              STR      r0,[r1,#0]            ;256  ; SystemCoreClock
000072  2000              MOVS     r0,#0                 ;259
000074  f7fffffe          BL       HAL_InitTick
000078  b108              CBZ      r0,|L3.126|
00007a  2001              MOVS     r0,#1                 ;261
00007c  e7d1              B        |L3.34|
                  |L3.126|
00007e  f7fffffe          BL       HAL_GetTick
000082  4604              MOV      r4,r0                 ;265
000084  481d              LDR      r0,|L3.252|
000086  6800              LDR      r0,[r0,#0]            ;268
000088  f0207080          BIC      r0,r0,#0x1000000      ;268
00008c  491b              LDR      r1,|L3.252|
00008e  6008              STR      r0,[r1,#0]            ;268
000090  e006              B        |L3.160|
                  |L3.146|
000092  f7fffffe          BL       HAL_GetTick
000096  1b00              SUBS     r0,r0,r4              ;273
000098  2802              CMP      r0,#2                 ;273
00009a  d901              BLS      |L3.160|
00009c  2003              MOVS     r0,#3                 ;275
00009e  e7c0              B        |L3.34|
                  |L3.160|
0000a0  4816              LDR      r0,|L3.252|
0000a2  6800              LDR      r0,[r0,#0]            ;271
0000a4  f0007000          AND      r0,r0,#0x2000000      ;271
0000a8  2800              CMP      r0,#0                 ;271
0000aa  d1f2              BNE      |L3.146|
0000ac  4913              LDR      r1,|L3.252|
0000ae  6048              STR      r0,[r1,#4]            ;280
0000b0  f7fffffe          BL       HAL_GetTick
0000b4  4604              MOV      r4,r0                 ;283
0000b6  4811              LDR      r0,|L3.252|
0000b8  6800              LDR      r0,[r0,#0]            ;286
0000ba  f4202010          BIC      r0,r0,#0x90000        ;286
0000be  490f              LDR      r1,|L3.252|
0000c0  6008              STR      r0,[r1,#0]            ;286
0000c2  e006              B        |L3.210|
                  |L3.196|
0000c4  f7fffffe          BL       HAL_GetTick
0000c8  1b00              SUBS     r0,r0,r4              ;291
0000ca  2864              CMP      r0,#0x64              ;291
0000cc  d901              BLS      |L3.210|
0000ce  2003              MOVS     r0,#3                 ;293
0000d0  e7a7              B        |L3.34|
                  |L3.210|
0000d2  480a              LDR      r0,|L3.252|
0000d4  6800              LDR      r0,[r0,#0]            ;289
0000d6  f4003000          AND      r0,r0,#0x20000        ;289
0000da  2800              CMP      r0,#0                 ;289
0000dc  d1f2              BNE      |L3.196|
0000de  4807              LDR      r0,|L3.252|
0000e0  6800              LDR      r0,[r0,#0]            ;298
0000e2  f4202080          BIC      r0,r0,#0x40000        ;298
0000e6  4905              LDR      r1,|L3.252|
0000e8  6008              STR      r0,[r1,#0]            ;298
0000ea  4608              MOV      r0,r1                 ;340
0000ec  6a40              LDR      r0,[r0,#0x24]         ;340
0000ee  f0407080          ORR      r0,r0,#0x1000000      ;340
0000f2  6248              STR      r0,[r1,#0x24]         ;340
0000f4  2000              MOVS     r0,#0                 ;343
0000f6  6088              STR      r0,[r1,#8]            ;343
0000f8  bf00              NOP                            ;345
0000fa  e792              B        |L3.34|
;;;347    
                          ENDP

                  |L3.252|
                          DCD      0x40021000
                  |L3.256|
                          DCD      0x007a1200
                  |L3.260|
                          DCD      SystemCoreClock

                          AREA ||i.HAL_RCC_DisableCSS||, CODE, READONLY, ALIGN=2

                  HAL_RCC_DisableCSS PROC
;;;1047     */
;;;1048   void HAL_RCC_DisableCSS(void)
000000  2000              MOVS     r0,#0
;;;1049   {
;;;1050     *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
000002  4901              LDR      r1,|L4.8|
000004  64c8              STR      r0,[r1,#0x4c]
;;;1051   }
000006  4770              BX       lr
;;;1052   
                          ENDP

                  |L4.8|
                          DCD      0x42420000

                          AREA ||i.HAL_RCC_EnableCSS||, CODE, READONLY, ALIGN=2

                  HAL_RCC_EnableCSS PROC
;;;1038     */
;;;1039   void HAL_RCC_EnableCSS(void)
000000  2001              MOVS     r0,#1
;;;1040   {
;;;1041     *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
000002  4901              LDR      r1,|L5.8|
000004  64c8              STR      r0,[r1,#0x4c]
;;;1042   }
000006  4770              BX       lr
;;;1043   
                          ENDP

                  |L5.8|
                          DCD      0x42420000

                          AREA ||i.HAL_RCC_GetClockConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetClockConfig PROC
;;;1311     */
;;;1312   void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
000000  220f              MOVS     r2,#0xf
;;;1313   {
;;;1314     /* Check the parameters */
;;;1315     assert_param(RCC_ClkInitStruct != NULL);
;;;1316     assert_param(pFLatency != NULL);
;;;1317   
;;;1318     /* Set all possible values for the Clock type parameter --------------------*/
;;;1319     RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
000002  6002              STR      r2,[r0,#0]
;;;1320     
;;;1321     /* Get the SYSCLK configuration --------------------------------------------*/ 
;;;1322     RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
000004  4a0d              LDR      r2,|L6.60|
000006  6852              LDR      r2,[r2,#4]
000008  f0020203          AND      r2,r2,#3
00000c  6042              STR      r2,[r0,#4]
;;;1323     
;;;1324     /* Get the HCLK configuration ----------------------------------------------*/ 
;;;1325     RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
00000e  4a0b              LDR      r2,|L6.60|
000010  6852              LDR      r2,[r2,#4]
000012  f00202f0          AND      r2,r2,#0xf0
000016  6082              STR      r2,[r0,#8]
;;;1326     
;;;1327     /* Get the APB1 configuration ----------------------------------------------*/ 
;;;1328     RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
000018  4a08              LDR      r2,|L6.60|
00001a  6852              LDR      r2,[r2,#4]
00001c  f40262e0          AND      r2,r2,#0x700
000020  60c2              STR      r2,[r0,#0xc]
;;;1329     
;;;1330     /* Get the APB2 configuration ----------------------------------------------*/ 
;;;1331     RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
000022  4a06              LDR      r2,|L6.60|
000024  6852              LDR      r2,[r2,#4]
000026  f4025260          AND      r2,r2,#0x3800
00002a  08d2              LSRS     r2,r2,#3
00002c  6102              STR      r2,[r0,#0x10]
;;;1332     
;;;1333   #if   defined(FLASH_ACR_LATENCY)
;;;1334     /* Get the Flash Wait State (Latency) configuration ------------------------*/   
;;;1335     *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
00002e  4a04              LDR      r2,|L6.64|
000030  6812              LDR      r2,[r2,#0]
000032  f0020207          AND      r2,r2,#7
000036  600a              STR      r2,[r1,#0]
;;;1336   #else
;;;1337     /* For VALUE lines devices, only LATENCY_0 can be set*/
;;;1338     *pFLatency = (uint32_t)FLASH_LATENCY_0; 
;;;1339   #endif
;;;1340   }
000038  4770              BX       lr
;;;1341   
                          ENDP

00003a  0000              DCW      0x0000
                  |L6.60|
                          DCD      0x40021000
                  |L6.64|
                          DCD      0x40022000

                          AREA ||i.HAL_RCC_GetHCLKFreq||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetHCLKFreq PROC
;;;1175     */
;;;1176   uint32_t HAL_RCC_GetHCLKFreq(void)
000000  4801              LDR      r0,|L7.8|
;;;1177   {
;;;1178     return SystemCoreClock;
000002  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
;;;1179   }
000004  4770              BX       lr
;;;1180   
                          ENDP

000006  0000              DCW      0x0000
                  |L7.8|
                          DCD      SystemCoreClock

                          AREA ||i.HAL_RCC_GetOscConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetOscConfig PROC
;;;1211     */
;;;1212   void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
000000  210f              MOVS     r1,#0xf
;;;1213   {
;;;1214     /* Check the parameters */
;;;1215     assert_param(RCC_OscInitStruct != NULL);
;;;1216   
;;;1217     /* Set all possible values for the Oscillator type parameter ---------------*/
;;;1218     RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI  \
000002  6001              STR      r1,[r0,#0]
;;;1219                     | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
;;;1220   
;;;1221   #if defined(RCC_CFGR2_PREDIV1SRC)
;;;1222     /* Get the Prediv1 source --------------------------------------------------*/
;;;1223     RCC_OscInitStruct->Prediv1Source = READ_BIT(RCC->CFGR2,RCC_CFGR2_PREDIV1SRC);
;;;1224   #endif /* RCC_CFGR2_PREDIV1SRC */
;;;1225   
;;;1226     /* Get the HSE configuration -----------------------------------------------*/
;;;1227     if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
000004  492f              LDR      r1,|L8.196|
000006  6809              LDR      r1,[r1,#0]
000008  f4012180          AND      r1,r1,#0x40000
00000c  f5b12f80          CMP      r1,#0x40000
000010  d103              BNE      |L8.26|
;;;1228     {
;;;1229       RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
000012  f44f21a0          MOV      r1,#0x50000
000016  6041              STR      r1,[r0,#4]
000018  e00c              B        |L8.52|
                  |L8.26|
;;;1230     }
;;;1231     else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
00001a  492a              LDR      r1,|L8.196|
00001c  6809              LDR      r1,[r1,#0]
00001e  f4013180          AND      r1,r1,#0x10000
000022  f5b13f80          CMP      r1,#0x10000
000026  d103              BNE      |L8.48|
;;;1232     {
;;;1233       RCC_OscInitStruct->HSEState = RCC_HSE_ON;
000028  f44f3180          MOV      r1,#0x10000
00002c  6041              STR      r1,[r0,#4]
00002e  e001              B        |L8.52|
                  |L8.48|
;;;1234     }
;;;1235     else
;;;1236     {
;;;1237       RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
000030  2100              MOVS     r1,#0
000032  6041              STR      r1,[r0,#4]
                  |L8.52|
;;;1238     }
;;;1239     RCC_OscInitStruct->HSEPredivValue = __HAL_RCC_HSE_GET_PREDIV();
000034  4923              LDR      r1,|L8.196|
000036  6849              LDR      r1,[r1,#4]
000038  f4013100          AND      r1,r1,#0x20000
00003c  6081              STR      r1,[r0,#8]
;;;1240   
;;;1241     /* Get the HSI configuration -----------------------------------------------*/
;;;1242     if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
00003e  4921              LDR      r1,|L8.196|
000040  6809              LDR      r1,[r1,#0]
000042  f0010101          AND      r1,r1,#1
000046  b111              CBZ      r1,|L8.78|
;;;1243     {
;;;1244       RCC_OscInitStruct->HSIState = RCC_HSI_ON;
000048  2101              MOVS     r1,#1
00004a  6101              STR      r1,[r0,#0x10]
00004c  e001              B        |L8.82|
                  |L8.78|
;;;1245     }
;;;1246     else
;;;1247     {
;;;1248       RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
00004e  2100              MOVS     r1,#0
000050  6101              STR      r1,[r0,#0x10]
                  |L8.82|
;;;1249     }
;;;1250     
;;;1251     RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR & RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_Pos);
000052  491c              LDR      r1,|L8.196|
000054  6809              LDR      r1,[r1,#0]
000056  f3c101c4          UBFX     r1,r1,#3,#5
00005a  6141              STR      r1,[r0,#0x14]
;;;1252     
;;;1253     /* Get the LSE configuration -----------------------------------------------*/
;;;1254     if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
00005c  4919              LDR      r1,|L8.196|
00005e  6a09              LDR      r1,[r1,#0x20]
000060  f0010104          AND      r1,r1,#4
000064  2904              CMP      r1,#4
000066  d102              BNE      |L8.110|
;;;1255     {
;;;1256       RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
000068  2105              MOVS     r1,#5
00006a  60c1              STR      r1,[r0,#0xc]
00006c  e009              B        |L8.130|
                  |L8.110|
;;;1257     }
;;;1258     else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
00006e  4915              LDR      r1,|L8.196|
000070  6a09              LDR      r1,[r1,#0x20]
000072  f0010101          AND      r1,r1,#1
000076  b111              CBZ      r1,|L8.126|
;;;1259     {
;;;1260       RCC_OscInitStruct->LSEState = RCC_LSE_ON;
000078  2101              MOVS     r1,#1
00007a  60c1              STR      r1,[r0,#0xc]
00007c  e001              B        |L8.130|
                  |L8.126|
;;;1261     }
;;;1262     else
;;;1263     {
;;;1264       RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
00007e  2100              MOVS     r1,#0
000080  60c1              STR      r1,[r0,#0xc]
                  |L8.130|
;;;1265     }
;;;1266     
;;;1267     /* Get the LSI configuration -----------------------------------------------*/
;;;1268     if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
000082  4910              LDR      r1,|L8.196|
000084  6a49              LDR      r1,[r1,#0x24]
000086  f0010101          AND      r1,r1,#1
00008a  b111              CBZ      r1,|L8.146|
;;;1269     {
;;;1270       RCC_OscInitStruct->LSIState = RCC_LSI_ON;
00008c  2101              MOVS     r1,#1
00008e  6181              STR      r1,[r0,#0x18]
000090  e001              B        |L8.150|
                  |L8.146|
;;;1271     }
;;;1272     else
;;;1273     {
;;;1274       RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
000092  2100              MOVS     r1,#0
000094  6181              STR      r1,[r0,#0x18]
                  |L8.150|
;;;1275     }
;;;1276     
;;;1277   
;;;1278     /* Get the PLL configuration -----------------------------------------------*/
;;;1279     if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
000096  490b              LDR      r1,|L8.196|
000098  6809              LDR      r1,[r1,#0]
00009a  f0017180          AND      r1,r1,#0x1000000
00009e  f1b17f80          CMP      r1,#0x1000000
0000a2  d102              BNE      |L8.170|
;;;1280     {
;;;1281       RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
0000a4  2102              MOVS     r1,#2
0000a6  61c1              STR      r1,[r0,#0x1c]
0000a8  e001              B        |L8.174|
                  |L8.170|
;;;1282     }
;;;1283     else
;;;1284     {
;;;1285       RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
0000aa  2101              MOVS     r1,#1
0000ac  61c1              STR      r1,[r0,#0x1c]
                  |L8.174|
;;;1286     }
;;;1287     RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLSRC);
0000ae  4905              LDR      r1,|L8.196|
0000b0  6849              LDR      r1,[r1,#4]
0000b2  f4013280          AND      r2,r1,#0x10000
0000b6  6202              STR      r2,[r0,#0x20]
;;;1288     RCC_OscInitStruct->PLL.PLLMUL = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLMULL);
0000b8  4902              LDR      r1,|L8.196|
0000ba  6849              LDR      r1,[r1,#4]
0000bc  f4011270          AND      r2,r1,#0x3c0000
0000c0  6242              STR      r2,[r0,#0x24]
;;;1289   #if defined(RCC_CR_PLL2ON)
;;;1290     /* Get the PLL2 configuration -----------------------------------------------*/
;;;1291     if((RCC->CR &RCC_CR_PLL2ON) == RCC_CR_PLL2ON)
;;;1292     {
;;;1293       RCC_OscInitStruct->PLL2.PLL2State = RCC_PLL2_ON;
;;;1294     }
;;;1295     else
;;;1296     {
;;;1297       RCC_OscInitStruct->PLL2.PLL2State = RCC_PLL2_OFF;
;;;1298     }
;;;1299     RCC_OscInitStruct->PLL2.HSEPrediv2Value = __HAL_RCC_HSE_GET_PREDIV2();
;;;1300     RCC_OscInitStruct->PLL2.PLL2MUL = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PLL2MUL);
;;;1301   #endif /* RCC_CR_PLL2ON */
;;;1302   }
0000c2  4770              BX       lr
;;;1303   
                          ENDP

                  |L8.196|
                          DCD      0x40021000

                          AREA ||i.HAL_RCC_GetPCLK1Freq||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetPCLK1Freq PROC
;;;1186     */
;;;1187   uint32_t HAL_RCC_GetPCLK1Freq(void)
000000  b500              PUSH     {lr}
;;;1188   {
;;;1189     /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
;;;1190     return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
000002  f7fffffe          BL       HAL_RCC_GetHCLKFreq
000006  4904              LDR      r1,|L9.24|
000008  6849              LDR      r1,[r1,#4]
00000a  f3c12102          UBFX     r1,r1,#8,#3
00000e  4a03              LDR      r2,|L9.28|
000010  5c51              LDRB     r1,[r2,r1]
000012  40c8              LSRS     r0,r0,r1
;;;1191   }    
000014  bd00              POP      {pc}
;;;1192   
                          ENDP

000016  0000              DCW      0x0000
                  |L9.24|
                          DCD      0x40021000
                  |L9.28|
                          DCD      APBPrescTable

                          AREA ||i.HAL_RCC_GetPCLK2Freq||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetPCLK2Freq PROC
;;;1198     */
;;;1199   uint32_t HAL_RCC_GetPCLK2Freq(void)
000000  b500              PUSH     {lr}
;;;1200   {
;;;1201     /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
;;;1202     return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
000002  f7fffffe          BL       HAL_RCC_GetHCLKFreq
000006  4904              LDR      r1,|L10.24|
000008  6849              LDR      r1,[r1,#4]
00000a  f3c121c2          UBFX     r1,r1,#11,#3
00000e  4a03              LDR      r2,|L10.28|
000010  5c51              LDRB     r1,[r2,r1]
000012  40c8              LSRS     r0,r0,r1
;;;1203   } 
000014  bd00              POP      {pc}
;;;1204   
                          ENDP

000016  0000              DCW      0x0000
                  |L10.24|
                          DCD      0x40021000
                  |L10.28|
                          DCD      APBPrescTable

                          AREA ||i.HAL_RCC_GetSysClockFreq||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetSysClockFreq PROC
;;;1081     */
;;;1082   uint32_t HAL_RCC_GetSysClockFreq(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1083   {
000002  b085              SUB      sp,sp,#0x14
;;;1084   #if defined(RCC_CFGR2_PREDIV1SRC)
;;;1085     const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
;;;1086     const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
;;;1087   #else
;;;1088     const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
000004  f20f0c6c          ADR      r12,|L11.116|
000008  e89c10e0          LDM      r12,{r5-r7,r12}
00000c  a801              ADD      r0,sp,#4
00000e  e8a010e0          STM      r0!,{r5-r7,r12}
;;;1089   #if defined(RCC_CFGR2_PREDIV1)
;;;1090     const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
;;;1091   #else
;;;1092     const uint8_t aPredivFactorTable[2] = {1, 2};
000012  a51c              ADR      r5,|L11.132|
000014  682d              LDR      r5,[r5,#0]
000016  9500              STR      r5,[sp,#0]
;;;1093   #endif /*RCC_CFGR2_PREDIV1*/
;;;1094   
;;;1095   #endif
;;;1096     uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
000018  2100              MOVS     r1,#0
00001a  2200              MOVS     r2,#0
00001c  2300              MOVS     r3,#0
00001e  2400              MOVS     r4,#0
;;;1097     uint32_t sysclockfreq = 0U;
000020  2000              MOVS     r0,#0
;;;1098   #if defined(RCC_CFGR2_PREDIV1SRC)
;;;1099     uint32_t prediv2 = 0U, pll2mul = 0U;
;;;1100   #endif /*RCC_CFGR2_PREDIV1SRC*/
;;;1101   
;;;1102     tmpreg = RCC->CFGR;
000022  4d19              LDR      r5,|L11.136|
000024  6869              LDR      r1,[r5,#4]
;;;1103   
;;;1104     /* Get SYSCLK source -------------------------------------------------------*/
;;;1105     switch (tmpreg & RCC_CFGR_SWS)
000026  f001050c          AND      r5,r1,#0xc
00002a  b1f5              CBZ      r5,|L11.106|
00002c  2d04              CMP      r5,#4
00002e  d002              BEQ      |L11.54|
000030  2d08              CMP      r5,#8
000032  d119              BNE      |L11.104|
000034  e001              B        |L11.58|
                  |L11.54|
;;;1106     {
;;;1107       case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
;;;1108       {
;;;1109         sysclockfreq = HSE_VALUE;
000036  4815              LDR      r0,|L11.140|
;;;1110         break;
000038  e019              B        |L11.110|
                  |L11.58|
;;;1111       }
;;;1112       case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
;;;1113       {
;;;1114         pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
00003a  ad01              ADD      r5,sp,#4
00003c  f3c14683          UBFX     r6,r1,#18,#4
000040  5dac              LDRB     r4,[r5,r6]
;;;1115         if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
000042  f4013580          AND      r5,r1,#0x10000
000046  b155              CBZ      r5,|L11.94|
;;;1116         {
;;;1117   #if defined(RCC_CFGR2_PREDIV1)
;;;1118           prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
;;;1119   #else
;;;1120           prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
000048  4d0f              LDR      r5,|L11.136|
00004a  686d              LDR      r5,[r5,#4]
00004c  f3c54540          UBFX     r5,r5,#17,#1
000050  f81d2005          LDRB     r2,[sp,r5]
;;;1121   #endif /*RCC_CFGR2_PREDIV1*/
;;;1122   #if defined(RCC_CFGR2_PREDIV1SRC)
;;;1123   
;;;1124           if(HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
;;;1125           {
;;;1126             /* PLL2 selected as Prediv1 source */
;;;1127             /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
;;;1128             prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
;;;1129             pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
;;;1130             pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
;;;1131           }
;;;1132           else
;;;1133           {
;;;1134             /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
;;;1135             pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
;;;1136           }
;;;1137   
;;;1138           /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
;;;1139           /* In this case need to divide pllclk by 2 */
;;;1140           if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
;;;1141           {
;;;1142               pllclk = pllclk / 2;
;;;1143           }
;;;1144   #else
;;;1145           /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
;;;1146           pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
000054  4d0d              LDR      r5,|L11.140|
000056  4365              MULS     r5,r4,r5
000058  fbb5f3f2          UDIV     r3,r5,r2
00005c  e002              B        |L11.100|
                  |L11.94|
;;;1147   #endif /*RCC_CFGR2_PREDIV1SRC*/
;;;1148         }
;;;1149         else
;;;1150         {
;;;1151           /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
;;;1152           pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
00005e  4d0c              LDR      r5,|L11.144|
000060  fb04f305          MUL      r3,r4,r5
                  |L11.100|
;;;1153         }
;;;1154         sysclockfreq = pllclk;
000064  4618              MOV      r0,r3
;;;1155         break;
000066  e002              B        |L11.110|
                  |L11.104|
;;;1156       }
;;;1157       case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
000068  bf00              NOP      
                  |L11.106|
;;;1158       default: /* HSI used as system clock */
;;;1159       {
;;;1160         sysclockfreq = HSI_VALUE;
00006a  4808              LDR      r0,|L11.140|
;;;1161         break;
00006c  bf00              NOP      
                  |L11.110|
00006e  bf00              NOP                            ;1110
;;;1162       }
;;;1163     }
;;;1164     return sysclockfreq;
;;;1165   }
000070  b005              ADD      sp,sp,#0x14
000072  bdf0              POP      {r4-r7,pc}
;;;1166   
                          ENDP

                  |L11.116|
000074  02030405          DCB      2,3,4,5,6,"\a\b\t\n\v\f\r",14,15,16,16
000078  06070809
00007c  0a0b0c0d
000080  0e0f1010
                  |L11.132|
000084  010200            DCB      1,2,0
000087  00                DCB      0
                  |L11.136|
                          DCD      0x40021000
                  |L11.140|
                          DCD      0x007a1200
                  |L11.144|
                          DCD      0x003d0900

                          AREA ||i.HAL_RCC_MCOConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_MCOConfig PROC
;;;1001     */
;;;1002   void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
000000  b570              PUSH     {r4-r6,lr}
;;;1003   {
000002  b086              SUB      sp,sp,#0x18
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
000008  4616              MOV      r6,r2
;;;1004     GPIO_InitTypeDef gpio = {0U};
00000a  2000              MOVS     r0,#0
00000c  9002              STR      r0,[sp,#8]
00000e  9003              STR      r0,[sp,#0xc]
000010  9004              STR      r0,[sp,#0x10]
000012  9005              STR      r0,[sp,#0x14]
;;;1005   
;;;1006     /* Check the parameters */
;;;1007     assert_param(IS_RCC_MCO(RCC_MCOx));
;;;1008     assert_param(IS_RCC_MCODIV(RCC_MCODiv));
;;;1009     assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
;;;1010   
;;;1011     /* Prevent unused argument(s) compilation warning */
;;;1012     UNUSED(RCC_MCOx);
;;;1013     UNUSED(RCC_MCODiv);
;;;1014   
;;;1015     /* Configure the MCO1 pin in alternate function mode */
;;;1016     gpio.Mode      = GPIO_MODE_AF_PP;
000014  2002              MOVS     r0,#2
000016  9003              STR      r0,[sp,#0xc]
;;;1017     gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
000018  2003              MOVS     r0,#3
00001a  9005              STR      r0,[sp,#0x14]
;;;1018     gpio.Pull      = GPIO_NOPULL;
00001c  2000              MOVS     r0,#0
00001e  9004              STR      r0,[sp,#0x10]
;;;1019     gpio.Pin       = MCO1_PIN;
000020  f44f7080          MOV      r0,#0x100
000024  9002              STR      r0,[sp,#8]
;;;1020   
;;;1021     /* MCO1 Clock Enable */
;;;1022     MCO1_CLK_ENABLE();
000026  bf00              NOP      
000028  480c              LDR      r0,|L12.92|
00002a  6980              LDR      r0,[r0,#0x18]
00002c  f0400004          ORR      r0,r0,#4
000030  490a              LDR      r1,|L12.92|
000032  6188              STR      r0,[r1,#0x18]
000034  4608              MOV      r0,r1
000036  6980              LDR      r0,[r0,#0x18]
000038  f0000004          AND      r0,r0,#4
00003c  9001              STR      r0,[sp,#4]
00003e  bf00              NOP      
000040  bf00              NOP      
;;;1023   
;;;1024     HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
000042  a902              ADD      r1,sp,#8
000044  4806              LDR      r0,|L12.96|
000046  f7fffffe          BL       HAL_GPIO_Init
;;;1025   
;;;1026     /* Configure the MCO clock source */
;;;1027     __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
00004a  4804              LDR      r0,|L12.92|
00004c  6840              LDR      r0,[r0,#4]
00004e  f02060e0          BIC      r0,r0,#0x7000000
000052  4320              ORRS     r0,r0,r4
000054  4901              LDR      r1,|L12.92|
000056  6048              STR      r0,[r1,#4]
;;;1028   }
000058  b006              ADD      sp,sp,#0x18
00005a  bd70              POP      {r4-r6,pc}
;;;1029   
                          ENDP

                  |L12.92|
                          DCD      0x40021000
                  |L12.96|
                          DCD      0x40010800

                          AREA ||i.HAL_RCC_NMI_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_RCC_NMI_IRQHandler PROC
;;;1346     */
;;;1347   void HAL_RCC_NMI_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;1348   {
;;;1349     /* Check RCC CSSF flag  */
;;;1350     if(__HAL_RCC_GET_IT(RCC_IT_CSS))
000002  4806              LDR      r0,|L13.28|
000004  6880              LDR      r0,[r0,#8]
000006  f0000080          AND      r0,r0,#0x80
00000a  2880              CMP      r0,#0x80
00000c  d104              BNE      |L13.24|
;;;1351     {
;;;1352       /* RCC Clock Security System interrupt user callback */
;;;1353       HAL_RCC_CSSCallback();
00000e  f7fffffe          BL       HAL_RCC_CSSCallback
;;;1354       
;;;1355       /* Clear RCC CSS pending bit */
;;;1356       __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
000012  2080              MOVS     r0,#0x80
000014  4901              LDR      r1,|L13.28|
000016  7288              STRB     r0,[r1,#0xa]
                  |L13.24|
;;;1357     }
;;;1358   }
000018  bd10              POP      {r4,pc}
;;;1359   
                          ENDP

00001a  0000              DCW      0x0000
                  |L13.28|
                          DCD      0x40021000

                          AREA ||i.HAL_RCC_OscConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_OscConfig PROC
;;;362      */
;;;363    HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
000000  b5f8              PUSH     {r3-r7,lr}
;;;364    {
000002  4604              MOV      r4,r0
;;;365       uint32_t tickstart = 0U;
000004  2500              MOVS     r5,#0
;;;366      
;;;367      /* Check the parameters */
;;;368      assert_param(RCC_OscInitStruct != NULL);
;;;369      assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
;;;370      
;;;371      /*------------------------------- HSE Configuration ------------------------*/ 
;;;372      if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
000006  7820              LDRB     r0,[r4,#0]
000008  f0000001          AND      r0,r0,#1
00000c  2800              CMP      r0,#0
00000e  d078              BEQ      |L14.258|
;;;373      {
;;;374        /* Check the parameters */
;;;375        assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
;;;376            
;;;377        /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
;;;378        if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
000010  48f8              LDR      r0,|L14.1012|
000012  6840              LDR      r0,[r0,#4]
000014  f000000c          AND      r0,r0,#0xc
000018  2804              CMP      r0,#4
00001a  d00c              BEQ      |L14.54|
;;;379           || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
00001c  48f5              LDR      r0,|L14.1012|
00001e  6840              LDR      r0,[r0,#4]
000020  f000000c          AND      r0,r0,#0xc
000024  2808              CMP      r0,#8
000026  d111              BNE      |L14.76|
000028  48f2              LDR      r0,|L14.1012|
00002a  6840              LDR      r0,[r0,#4]
00002c  f4003080          AND      r0,r0,#0x10000
000030  f5b03f80          CMP      r0,#0x10000
000034  d10a              BNE      |L14.76|
                  |L14.54|
;;;380        {
;;;381          if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
000036  48ef              LDR      r0,|L14.1012|
000038  6800              LDR      r0,[r0,#0]
00003a  f4003000          AND      r0,r0,#0x20000
00003e  2800              CMP      r0,#0
000040  d05f              BEQ      |L14.258|
000042  6860              LDR      r0,[r4,#4]
000044  2800              CMP      r0,#0
000046  d15c              BNE      |L14.258|
;;;382          {
;;;383            return HAL_ERROR;
000048  2001              MOVS     r0,#1
                  |L14.74|
;;;384          }
;;;385        }
;;;386        else
;;;387        {
;;;388          /* Set the new HSE configuration ---------------------------------------*/
;;;389          __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
;;;390          
;;;391    
;;;392           /* Check the HSE State */
;;;393          if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
;;;394          {
;;;395            /* Get Start Tick */
;;;396            tickstart = HAL_GetTick();
;;;397            
;;;398            /* Wait till HSE is ready */
;;;399            while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
;;;400            {
;;;401              if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
;;;402              {
;;;403                return HAL_TIMEOUT;
;;;404              }
;;;405            }
;;;406          }
;;;407          else
;;;408          {
;;;409            /* Get Start Tick */
;;;410            tickstart = HAL_GetTick();
;;;411            
;;;412            /* Wait till HSE is disabled */
;;;413            while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
;;;414            {
;;;415               if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
;;;416              {
;;;417                return HAL_TIMEOUT;
;;;418              }
;;;419            }
;;;420          }
;;;421        }
;;;422      }
;;;423      /*----------------------------- HSI Configuration --------------------------*/ 
;;;424      if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
;;;425      {
;;;426        /* Check the parameters */
;;;427        assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
;;;428        assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
;;;429        
;;;430        /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
;;;431        if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
;;;432           || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
;;;433        {
;;;434          /* When HSI is used as system clock it will not disabled */
;;;435          if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
;;;436          {
;;;437            return HAL_ERROR;
;;;438          }
;;;439          /* Otherwise, just the calibration is allowed */
;;;440          else
;;;441          {
;;;442            /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
;;;443            __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
;;;444          }
;;;445        }
;;;446        else
;;;447        {
;;;448          /* Check the HSI State */
;;;449          if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
;;;450          {
;;;451           /* Enable the Internal High Speed oscillator (HSI). */
;;;452            __HAL_RCC_HSI_ENABLE();
;;;453            
;;;454            /* Get Start Tick */
;;;455            tickstart = HAL_GetTick();
;;;456            
;;;457            /* Wait till HSI is ready */
;;;458            while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
;;;459            {
;;;460              if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
;;;461              {
;;;462                return HAL_TIMEOUT;
;;;463              }
;;;464            }
;;;465                    
;;;466            /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
;;;467            __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
;;;468          }
;;;469          else
;;;470          {
;;;471            /* Disable the Internal High Speed oscillator (HSI). */
;;;472            __HAL_RCC_HSI_DISABLE();
;;;473            
;;;474            /* Get Start Tick */
;;;475            tickstart = HAL_GetTick();
;;;476            
;;;477            /* Wait till HSI is disabled */
;;;478            while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
;;;479            {
;;;480              if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
;;;481              {
;;;482                return HAL_TIMEOUT;
;;;483              }
;;;484            }
;;;485          }
;;;486        }
;;;487      }
;;;488      /*------------------------------ LSI Configuration -------------------------*/ 
;;;489      if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
;;;490      {
;;;491        /* Check the parameters */
;;;492        assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
;;;493        
;;;494        /* Check the LSI State */
;;;495        if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
;;;496        {
;;;497          /* Enable the Internal Low Speed oscillator (LSI). */
;;;498          __HAL_RCC_LSI_ENABLE();
;;;499          
;;;500          /* Get Start Tick */
;;;501          tickstart = HAL_GetTick();
;;;502          
;;;503          /* Wait till LSI is ready */  
;;;504          while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
;;;505          {
;;;506            if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
;;;507            {
;;;508              return HAL_TIMEOUT;
;;;509            }
;;;510          }
;;;511          /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
;;;512              should be added.*/
;;;513          RCC_Delay(1);
;;;514        }
;;;515        else
;;;516        {
;;;517          /* Disable the Internal Low Speed oscillator (LSI). */
;;;518          __HAL_RCC_LSI_DISABLE();
;;;519          
;;;520          /* Get Start Tick */
;;;521          tickstart = HAL_GetTick();
;;;522          
;;;523          /* Wait till LSI is disabled */  
;;;524          while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
;;;525          {
;;;526            if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
;;;527            {
;;;528              return HAL_TIMEOUT;
;;;529            }
;;;530          }
;;;531        }
;;;532      }
;;;533      /*------------------------------ LSE Configuration -------------------------*/ 
;;;534      if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
;;;535      {
;;;536        FlagStatus       pwrclkchanged = RESET;
;;;537        
;;;538        /* Check the parameters */
;;;539        assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
;;;540    
;;;541        /* Update LSE configuration in Backup Domain control register    */
;;;542        /* Requires to enable write access to Backup Domain of necessary */
;;;543        if(__HAL_RCC_PWR_IS_CLK_DISABLED())
;;;544        {
;;;545          __HAL_RCC_PWR_CLK_ENABLE();
;;;546          pwrclkchanged = SET;
;;;547        }
;;;548        
;;;549        if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
;;;550        {
;;;551          /* Enable write access to Backup domain */
;;;552          SET_BIT(PWR->CR, PWR_CR_DBP);
;;;553          
;;;554          /* Wait for Backup domain Write protection disable */
;;;555          tickstart = HAL_GetTick();
;;;556    
;;;557          while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
;;;558          {
;;;559            if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
;;;560            {
;;;561              return HAL_TIMEOUT;
;;;562            }
;;;563          }
;;;564        }
;;;565    
;;;566        /* Set the new LSE configuration -----------------------------------------*/
;;;567        __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
;;;568        /* Check the LSE State */
;;;569        if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
;;;570        {
;;;571          /* Get Start Tick */
;;;572          tickstart = HAL_GetTick();
;;;573          
;;;574          /* Wait till LSE is ready */  
;;;575          while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
;;;576          {
;;;577            if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
;;;578            {
;;;579              return HAL_TIMEOUT;
;;;580            }
;;;581          }
;;;582        }
;;;583        else
;;;584        {
;;;585          /* Get Start Tick */
;;;586          tickstart = HAL_GetTick();
;;;587          
;;;588          /* Wait till LSE is disabled */  
;;;589          while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
;;;590          {
;;;591            if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
;;;592            {
;;;593              return HAL_TIMEOUT;
;;;594            }
;;;595          }
;;;596        }
;;;597    
;;;598        /* Require to disable power clock if necessary */
;;;599        if(pwrclkchanged == SET)
;;;600        {
;;;601          __HAL_RCC_PWR_CLK_DISABLE();
;;;602        }
;;;603      }
;;;604    
;;;605    #if defined(RCC_CR_PLL2ON)
;;;606      /*-------------------------------- PLL2 Configuration -----------------------*/
;;;607      /* Check the parameters */
;;;608      assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
;;;609      if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
;;;610      {
;;;611        /* This bit can not be cleared if the PLL2 clock is used indirectly as system 
;;;612          clock (i.e. it is used as PLL clock entry that is used as system clock). */
;;;613        if((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
;;;614            (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
;;;615            ((READ_BIT(RCC->CFGR2,RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
;;;616        {
;;;617          return HAL_ERROR;
;;;618        }
;;;619        else
;;;620        {
;;;621          if((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
;;;622          {
;;;623            /* Check the parameters */
;;;624            assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
;;;625            assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));
;;;626    
;;;627            /* Prediv2 can be written only when the PLLI2S is disabled. */
;;;628            /* Return an error only if new value is different from the programmed value */
;;;629            if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL3ON) && \
;;;630              (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
;;;631            {
;;;632              return HAL_ERROR;
;;;633            }
;;;634            
;;;635            /* Disable the main PLL2. */
;;;636            __HAL_RCC_PLL2_DISABLE();
;;;637            
;;;638            /* Get Start Tick */
;;;639            tickstart = HAL_GetTick();
;;;640            
;;;641            /* Wait till PLL2 is disabled */
;;;642            while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
;;;643            {
;;;644              if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
;;;645              {
;;;646                return HAL_TIMEOUT;
;;;647              }
;;;648            }
;;;649            
;;;650            /* Configure the HSE prediv2 factor --------------------------------*/
;;;651            __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
;;;652    
;;;653            /* Configure the main PLL2 multiplication factors. */
;;;654            __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
;;;655            
;;;656            /* Enable the main PLL2. */
;;;657            __HAL_RCC_PLL2_ENABLE();
;;;658            
;;;659            /* Get Start Tick */
;;;660            tickstart = HAL_GetTick();
;;;661            
;;;662            /* Wait till PLL2 is ready */
;;;663            while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
;;;664            {
;;;665              if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
;;;666              {
;;;667                return HAL_TIMEOUT;
;;;668              }
;;;669            }
;;;670          }
;;;671          else
;;;672          {
;;;673           /* Set PREDIV1 source to HSE */
;;;674            CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
;;;675    
;;;676            /* Disable the main PLL2. */
;;;677            __HAL_RCC_PLL2_DISABLE();
;;;678     
;;;679            /* Get Start Tick */
;;;680            tickstart = HAL_GetTick();
;;;681            
;;;682            /* Wait till PLL2 is disabled */  
;;;683            while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
;;;684            {
;;;685              if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
;;;686              {
;;;687                return HAL_TIMEOUT;
;;;688              }
;;;689            }
;;;690          }
;;;691        }
;;;692      }
;;;693    
;;;694    #endif /* RCC_CR_PLL2ON */
;;;695      /*-------------------------------- PLL Configuration -----------------------*/
;;;696      /* Check the parameters */
;;;697      assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
;;;698      if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
;;;699      {
;;;700        /* Check if the PLL is used as system clock or not */
;;;701        if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
;;;702        { 
;;;703          if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
;;;704          {
;;;705            /* Check the parameters */
;;;706            assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
;;;707            assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
;;;708      
;;;709            /* Disable the main PLL. */
;;;710            __HAL_RCC_PLL_DISABLE();
;;;711            
;;;712            /* Get Start Tick */
;;;713            tickstart = HAL_GetTick();
;;;714            
;;;715            /* Wait till PLL is disabled */
;;;716            while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
;;;717            {
;;;718              if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
;;;719              {
;;;720                return HAL_TIMEOUT;
;;;721              }
;;;722            }
;;;723    
;;;724            /* Configure the HSE prediv factor --------------------------------*/
;;;725            /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
;;;726            if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
;;;727            {
;;;728              /* Check the parameter */
;;;729              assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
;;;730    #if defined(RCC_CFGR2_PREDIV1SRC)
;;;731              assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));
;;;732              
;;;733              /* Set PREDIV1 source */
;;;734              SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
;;;735    #endif /* RCC_CFGR2_PREDIV1SRC */
;;;736    
;;;737              /* Set PREDIV1 Value */
;;;738              __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
;;;739            }
;;;740    
;;;741            /* Configure the main PLL clock source and multiplication factors. */
;;;742            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
;;;743                                 RCC_OscInitStruct->PLL.PLLMUL);
;;;744            /* Enable the main PLL. */
;;;745            __HAL_RCC_PLL_ENABLE();
;;;746            
;;;747            /* Get Start Tick */
;;;748            tickstart = HAL_GetTick();
;;;749            
;;;750            /* Wait till PLL is ready */
;;;751            while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
;;;752            {
;;;753              if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
;;;754              {
;;;755                return HAL_TIMEOUT;
;;;756              }
;;;757            }
;;;758          }
;;;759          else
;;;760          {
;;;761            /* Disable the main PLL. */
;;;762            __HAL_RCC_PLL_DISABLE();
;;;763     
;;;764            /* Get Start Tick */
;;;765            tickstart = HAL_GetTick();
;;;766            
;;;767            /* Wait till PLL is disabled */  
;;;768            while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
;;;769            {
;;;770              if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
;;;771              {
;;;772                return HAL_TIMEOUT;
;;;773              }
;;;774            }
;;;775          }
;;;776        }
;;;777        else
;;;778        {
;;;779          return HAL_ERROR;
;;;780        }
;;;781      }
;;;782      
;;;783      return HAL_OK;
;;;784    }
00004a  bdf8              POP      {r3-r7,pc}
                  |L14.76|
00004c  bf00              NOP                            ;389
00004e  6860              LDR      r0,[r4,#4]            ;389
000050  f5b03f80          CMP      r0,#0x10000           ;389
000054  d106              BNE      |L14.100|
000056  48e7              LDR      r0,|L14.1012|
000058  6800              LDR      r0,[r0,#0]            ;389
00005a  f4403080          ORR      r0,r0,#0x10000        ;389
00005e  49e5              LDR      r1,|L14.1012|
000060  6008              STR      r0,[r1,#0]            ;389
000062  e028              B        |L14.182|
                  |L14.100|
000064  6860              LDR      r0,[r4,#4]            ;389
000066  b958              CBNZ     r0,|L14.128|
000068  48e2              LDR      r0,|L14.1012|
00006a  6800              LDR      r0,[r0,#0]            ;389
00006c  f4203080          BIC      r0,r0,#0x10000        ;389
000070  49e0              LDR      r1,|L14.1012|
000072  6008              STR      r0,[r1,#0]            ;389
000074  4608              MOV      r0,r1                 ;389
000076  6800              LDR      r0,[r0,#0]            ;389
000078  f4202080          BIC      r0,r0,#0x40000        ;389
00007c  6008              STR      r0,[r1,#0]            ;389
00007e  e01a              B        |L14.182|
                  |L14.128|
000080  6860              LDR      r0,[r4,#4]            ;389
000082  f5b02fa0          CMP      r0,#0x50000           ;389
000086  d10b              BNE      |L14.160|
000088  48da              LDR      r0,|L14.1012|
00008a  6800              LDR      r0,[r0,#0]            ;389
00008c  f4402080          ORR      r0,r0,#0x40000        ;389
000090  49d8              LDR      r1,|L14.1012|
000092  6008              STR      r0,[r1,#0]            ;389
000094  4608              MOV      r0,r1                 ;389
000096  6800              LDR      r0,[r0,#0]            ;389
000098  f4403080          ORR      r0,r0,#0x10000        ;389
00009c  6008              STR      r0,[r1,#0]            ;389
00009e  e00a              B        |L14.182|
                  |L14.160|
0000a0  48d4              LDR      r0,|L14.1012|
0000a2  6800              LDR      r0,[r0,#0]            ;389
0000a4  f4203080          BIC      r0,r0,#0x10000        ;389
0000a8  49d2              LDR      r1,|L14.1012|
0000aa  6008              STR      r0,[r1,#0]            ;389
0000ac  4608              MOV      r0,r1                 ;389
0000ae  6800              LDR      r0,[r0,#0]            ;389
0000b0  f4202080          BIC      r0,r0,#0x40000        ;389
0000b4  6008              STR      r0,[r1,#0]            ;389
                  |L14.182|
0000b6  bf00              NOP                            ;389
0000b8  6860              LDR      r0,[r4,#4]            ;393
0000ba  b188              CBZ      r0,|L14.224|
0000bc  f7fffffe          BL       HAL_GetTick
0000c0  4605              MOV      r5,r0                 ;396
0000c2  e006              B        |L14.210|
                  |L14.196|
0000c4  f7fffffe          BL       HAL_GetTick
0000c8  1b40              SUBS     r0,r0,r5              ;401
0000ca  2864              CMP      r0,#0x64              ;401
0000cc  d901              BLS      |L14.210|
0000ce  2003              MOVS     r0,#3                 ;403
0000d0  e7bb              B        |L14.74|
                  |L14.210|
0000d2  48c8              LDR      r0,|L14.1012|
0000d4  6800              LDR      r0,[r0,#0]            ;399
0000d6  f4003000          AND      r0,r0,#0x20000        ;399
0000da  2800              CMP      r0,#0                 ;399
0000dc  d0f2              BEQ      |L14.196|
0000de  e010              B        |L14.258|
                  |L14.224|
0000e0  f7fffffe          BL       HAL_GetTick
0000e4  4605              MOV      r5,r0                 ;410
0000e6  e006              B        |L14.246|
                  |L14.232|
0000e8  f7fffffe          BL       HAL_GetTick
0000ec  1b40              SUBS     r0,r0,r5              ;415
0000ee  2864              CMP      r0,#0x64              ;415
0000f0  d901              BLS      |L14.246|
0000f2  2003              MOVS     r0,#3                 ;417
0000f4  e7a9              B        |L14.74|
                  |L14.246|
0000f6  48bf              LDR      r0,|L14.1012|
0000f8  6800              LDR      r0,[r0,#0]            ;413
0000fa  f4003000          AND      r0,r0,#0x20000        ;413
0000fe  2800              CMP      r0,#0                 ;413
000100  d1f2              BNE      |L14.232|
                  |L14.258|
000102  7820              LDRB     r0,[r4,#0]            ;424
000104  f0000002          AND      r0,r0,#2              ;424
000108  2802              CMP      r0,#2                 ;424
00010a  d157              BNE      |L14.444|
00010c  48b9              LDR      r0,|L14.1012|
00010e  6840              LDR      r0,[r0,#4]            ;431
000110  f000000c          AND      r0,r0,#0xc            ;431
000114  b150              CBZ      r0,|L14.300|
000116  48b7              LDR      r0,|L14.1012|
000118  6840              LDR      r0,[r0,#4]            ;432
00011a  f000000c          AND      r0,r0,#0xc            ;432
00011e  2808              CMP      r0,#8                 ;432
000120  d118              BNE      |L14.340|
000122  48b4              LDR      r0,|L14.1012|
000124  6840              LDR      r0,[r0,#4]            ;432
000126  f4003080          AND      r0,r0,#0x10000        ;432
00012a  b998              CBNZ     r0,|L14.340|
                  |L14.300|
00012c  48b1              LDR      r0,|L14.1012|
00012e  6800              LDR      r0,[r0,#0]            ;435
000130  f0000002          AND      r0,r0,#2              ;435
000134  b120              CBZ      r0,|L14.320|
000136  6920              LDR      r0,[r4,#0x10]         ;435
000138  2801              CMP      r0,#1                 ;435
00013a  d001              BEQ      |L14.320|
00013c  2001              MOVS     r0,#1                 ;437
00013e  e784              B        |L14.74|
                  |L14.320|
000140  48ac              LDR      r0,|L14.1012|
000142  6800              LDR      r0,[r0,#0]            ;443
000144  f02000f8          BIC      r0,r0,#0xf8           ;443
000148  6961              LDR      r1,[r4,#0x14]         ;443
00014a  ea4000c1          ORR      r0,r0,r1,LSL #3       ;443
00014e  49a9              LDR      r1,|L14.1012|
000150  6008              STR      r0,[r1,#0]            ;443
000152  e033              B        |L14.444|
                  |L14.340|
000154  6920              LDR      r0,[r4,#0x10]         ;449
000156  b1e8              CBZ      r0,|L14.404|
000158  2001              MOVS     r0,#1                 ;452
00015a  49a7              LDR      r1,|L14.1016|
00015c  6008              STR      r0,[r1,#0]            ;452
00015e  f7fffffe          BL       HAL_GetTick
000162  4605              MOV      r5,r0                 ;455
000164  e006              B        |L14.372|
                  |L14.358|
000166  f7fffffe          BL       HAL_GetTick
00016a  1b40              SUBS     r0,r0,r5              ;460
00016c  2802              CMP      r0,#2                 ;460
00016e  d901              BLS      |L14.372|
000170  2003              MOVS     r0,#3                 ;462
000172  e76a              B        |L14.74|
                  |L14.372|
000174  489f              LDR      r0,|L14.1012|
000176  6800              LDR      r0,[r0,#0]            ;458
000178  f0000002          AND      r0,r0,#2              ;458
00017c  2800              CMP      r0,#0                 ;458
00017e  d0f2              BEQ      |L14.358|
000180  489c              LDR      r0,|L14.1012|
000182  6800              LDR      r0,[r0,#0]            ;467
000184  f02000f8          BIC      r0,r0,#0xf8           ;467
000188  6961              LDR      r1,[r4,#0x14]         ;467
00018a  ea4000c1          ORR      r0,r0,r1,LSL #3       ;467
00018e  4999              LDR      r1,|L14.1012|
000190  6008              STR      r0,[r1,#0]            ;467
000192  e013              B        |L14.444|
                  |L14.404|
000194  2000              MOVS     r0,#0                 ;472
000196  4998              LDR      r1,|L14.1016|
000198  6008              STR      r0,[r1,#0]            ;472
00019a  f7fffffe          BL       HAL_GetTick
00019e  4605              MOV      r5,r0                 ;475
0001a0  e006              B        |L14.432|
                  |L14.418|
0001a2  f7fffffe          BL       HAL_GetTick
0001a6  1b40              SUBS     r0,r0,r5              ;480
0001a8  2802              CMP      r0,#2                 ;480
0001aa  d901              BLS      |L14.432|
0001ac  2003              MOVS     r0,#3                 ;482
0001ae  e74c              B        |L14.74|
                  |L14.432|
0001b0  4890              LDR      r0,|L14.1012|
0001b2  6800              LDR      r0,[r0,#0]            ;478
0001b4  f0000002          AND      r0,r0,#2              ;478
0001b8  2800              CMP      r0,#0                 ;478
0001ba  d1f2              BNE      |L14.418|
                  |L14.444|
0001bc  7820              LDRB     r0,[r4,#0]            ;489
0001be  f0000008          AND      r0,r0,#8              ;489
0001c2  2808              CMP      r0,#8                 ;489
0001c4  d12d              BNE      |L14.546|
0001c6  69a0              LDR      r0,[r4,#0x18]         ;495
0001c8  b1b8              CBZ      r0,|L14.506|
0001ca  2001              MOVS     r0,#1                 ;498
0001cc  498b              LDR      r1,|L14.1020|
0001ce  6008              STR      r0,[r1,#0]            ;498
0001d0  f7fffffe          BL       HAL_GetTick
0001d4  4605              MOV      r5,r0                 ;501
0001d6  e006              B        |L14.486|
                  |L14.472|
0001d8  f7fffffe          BL       HAL_GetTick
0001dc  1b40              SUBS     r0,r0,r5              ;506
0001de  2802              CMP      r0,#2                 ;506
0001e0  d901              BLS      |L14.486|
0001e2  2003              MOVS     r0,#3                 ;508
0001e4  e731              B        |L14.74|
                  |L14.486|
0001e6  4883              LDR      r0,|L14.1012|
0001e8  6a40              LDR      r0,[r0,#0x24]         ;504
0001ea  f0000002          AND      r0,r0,#2              ;504
0001ee  2800              CMP      r0,#0                 ;504
0001f0  d0f2              BEQ      |L14.472|
0001f2  2001              MOVS     r0,#1                 ;513
0001f4  f7fffffe          BL       RCC_Delay
0001f8  e013              B        |L14.546|
                  |L14.506|
0001fa  2000              MOVS     r0,#0                 ;518
0001fc  497f              LDR      r1,|L14.1020|
0001fe  6008              STR      r0,[r1,#0]            ;518
000200  f7fffffe          BL       HAL_GetTick
000204  4605              MOV      r5,r0                 ;521
000206  e006              B        |L14.534|
                  |L14.520|
000208  f7fffffe          BL       HAL_GetTick
00020c  1b40              SUBS     r0,r0,r5              ;526
00020e  2802              CMP      r0,#2                 ;526
000210  d901              BLS      |L14.534|
000212  2003              MOVS     r0,#3                 ;528
000214  e719              B        |L14.74|
                  |L14.534|
000216  4877              LDR      r0,|L14.1012|
000218  6a40              LDR      r0,[r0,#0x24]         ;524
00021a  f0000002          AND      r0,r0,#2              ;524
00021e  2800              CMP      r0,#0                 ;524
000220  d1f2              BNE      |L14.520|
                  |L14.546|
000222  7820              LDRB     r0,[r4,#0]            ;534
000224  f0000004          AND      r0,r0,#4              ;534
000228  2804              CMP      r0,#4                 ;534
00022a  d173              BNE      |L14.788|
00022c  2600              MOVS     r6,#0                 ;536
00022e  4871              LDR      r0,|L14.1012|
000230  69c0              LDR      r0,[r0,#0x1c]         ;543
000232  f0005080          AND      r0,r0,#0x10000000     ;543
000236  b970              CBNZ     r0,|L14.598|
000238  bf00              NOP                            ;545
00023a  486e              LDR      r0,|L14.1012|
00023c  69c0              LDR      r0,[r0,#0x1c]         ;545
00023e  f0405080          ORR      r0,r0,#0x10000000     ;545
000242  496c              LDR      r1,|L14.1012|
000244  61c8              STR      r0,[r1,#0x1c]         ;545
000246  4608              MOV      r0,r1                 ;545
000248  69c0              LDR      r0,[r0,#0x1c]         ;545
00024a  f0005080          AND      r0,r0,#0x10000000     ;545
00024e  9000              STR      r0,[sp,#0]            ;545
000250  bf00              NOP                            ;545
000252  bf00              NOP                            ;545
000254  2601              MOVS     r6,#1                 ;546
                  |L14.598|
000256  486a              LDR      r0,|L14.1024|
000258  6800              LDR      r0,[r0,#0]            ;549
00025a  f4007080          AND      r0,r0,#0x100          ;549
00025e  b9b0              CBNZ     r0,|L14.654|
000260  4867              LDR      r0,|L14.1024|
000262  6800              LDR      r0,[r0,#0]            ;552
000264  f4407080          ORR      r0,r0,#0x100          ;552
000268  4965              LDR      r1,|L14.1024|
00026a  6008              STR      r0,[r1,#0]            ;552
00026c  f7fffffe          BL       HAL_GetTick
000270  4605              MOV      r5,r0                 ;555
000272  e006              B        |L14.642|
                  |L14.628|
000274  f7fffffe          BL       HAL_GetTick
000278  1b40              SUBS     r0,r0,r5              ;559
00027a  2864              CMP      r0,#0x64              ;559
00027c  d901              BLS      |L14.642|
00027e  2003              MOVS     r0,#3                 ;561
000280  e6e3              B        |L14.74|
                  |L14.642|
000282  485f              LDR      r0,|L14.1024|
000284  6800              LDR      r0,[r0,#0]            ;557
000286  f4007080          AND      r0,r0,#0x100          ;557
00028a  2800              CMP      r0,#0                 ;557
00028c  d0f2              BEQ      |L14.628|
                  |L14.654|
00028e  bf00              NOP                            ;567
000290  68e0              LDR      r0,[r4,#0xc]          ;567
000292  2801              CMP      r0,#1                 ;567
000294  d106              BNE      |L14.676|
000296  4857              LDR      r0,|L14.1012|
000298  6a00              LDR      r0,[r0,#0x20]         ;567
00029a  f0400001          ORR      r0,r0,#1              ;567
00029e  4955              LDR      r1,|L14.1012|
0002a0  6208              STR      r0,[r1,#0x20]         ;567
0002a2  e027              B        |L14.756|
                  |L14.676|
0002a4  68e0              LDR      r0,[r4,#0xc]          ;567
0002a6  b958              CBNZ     r0,|L14.704|
0002a8  4852              LDR      r0,|L14.1012|
0002aa  6a00              LDR      r0,[r0,#0x20]         ;567
0002ac  f0200001          BIC      r0,r0,#1              ;567
0002b0  4950              LDR      r1,|L14.1012|
0002b2  6208              STR      r0,[r1,#0x20]         ;567
0002b4  4608              MOV      r0,r1                 ;567
0002b6  6a00              LDR      r0,[r0,#0x20]         ;567
0002b8  f0200004          BIC      r0,r0,#4              ;567
0002bc  6208              STR      r0,[r1,#0x20]         ;567
0002be  e019              B        |L14.756|
                  |L14.704|
0002c0  68e0              LDR      r0,[r4,#0xc]          ;567
0002c2  2805              CMP      r0,#5                 ;567
0002c4  d10b              BNE      |L14.734|
0002c6  484b              LDR      r0,|L14.1012|
0002c8  6a00              LDR      r0,[r0,#0x20]         ;567
0002ca  f0400004          ORR      r0,r0,#4              ;567
0002ce  4949              LDR      r1,|L14.1012|
0002d0  6208              STR      r0,[r1,#0x20]         ;567
0002d2  4608              MOV      r0,r1                 ;567
0002d4  6a00              LDR      r0,[r0,#0x20]         ;567
0002d6  f0400001          ORR      r0,r0,#1              ;567
0002da  6208              STR      r0,[r1,#0x20]         ;567
0002dc  e00a              B        |L14.756|
                  |L14.734|
0002de  4845              LDR      r0,|L14.1012|
0002e0  6a00              LDR      r0,[r0,#0x20]         ;567
0002e2  f0200001          BIC      r0,r0,#1              ;567
0002e6  4943              LDR      r1,|L14.1012|
0002e8  6208              STR      r0,[r1,#0x20]         ;567
0002ea  4608              MOV      r0,r1                 ;567
0002ec  6a00              LDR      r0,[r0,#0x20]         ;567
0002ee  f0200004          BIC      r0,r0,#4              ;567
0002f2  6208              STR      r0,[r1,#0x20]         ;567
                  |L14.756|
0002f4  bf00              NOP                            ;567
0002f6  68e0              LDR      r0,[r4,#0xc]          ;569
0002f8  b1a0              CBZ      r0,|L14.804|
0002fa  f7fffffe          BL       HAL_GetTick
0002fe  4605              MOV      r5,r0                 ;572
000300  e009              B        |L14.790|
                  |L14.770|
000302  f7fffffe          BL       HAL_GetTick
000306  1b40              SUBS     r0,r0,r5              ;577
000308  f2413188          MOV      r1,#0x1388            ;577
00030c  4288              CMP      r0,r1                 ;577
00030e  d902              BLS      |L14.790|
000310  2003              MOVS     r0,#3                 ;579
000312  e69a              B        |L14.74|
                  |L14.788|
000314  e022              B        |L14.860|
                  |L14.790|
000316  4837              LDR      r0,|L14.1012|
000318  6a00              LDR      r0,[r0,#0x20]         ;575
00031a  f0000002          AND      r0,r0,#2              ;575
00031e  2800              CMP      r0,#0                 ;575
000320  d0ef              BEQ      |L14.770|
000322  e012              B        |L14.842|
                  |L14.804|
000324  f7fffffe          BL       HAL_GetTick
000328  4605              MOV      r5,r0                 ;586
00032a  e008              B        |L14.830|
                  |L14.812|
00032c  f7fffffe          BL       HAL_GetTick
000330  1b40              SUBS     r0,r0,r5              ;591
000332  f2413188          MOV      r1,#0x1388            ;591
000336  4288              CMP      r0,r1                 ;591
000338  d901              BLS      |L14.830|
00033a  2003              MOVS     r0,#3                 ;593
00033c  e685              B        |L14.74|
                  |L14.830|
00033e  482d              LDR      r0,|L14.1012|
000340  6a00              LDR      r0,[r0,#0x20]         ;589
000342  f0000002          AND      r0,r0,#2              ;589
000346  2800              CMP      r0,#0                 ;589
000348  d1f0              BNE      |L14.812|
                  |L14.842|
00034a  2e01              CMP      r6,#1                 ;599
00034c  d105              BNE      |L14.858|
00034e  4829              LDR      r0,|L14.1012|
000350  69c0              LDR      r0,[r0,#0x1c]         ;601
000352  f0205080          BIC      r0,r0,#0x10000000     ;601
000356  4927              LDR      r1,|L14.1012|
000358  61c8              STR      r0,[r1,#0x1c]         ;601
                  |L14.858|
00035a  bf00              NOP                            ;603
                  |L14.860|
00035c  69e0              LDR      r0,[r4,#0x1c]         ;698
00035e  b3c8              CBZ      r0,|L14.980|
000360  4824              LDR      r0,|L14.1012|
000362  6840              LDR      r0,[r0,#4]            ;701
000364  f000000c          AND      r0,r0,#0xc            ;701
000368  2808              CMP      r0,#8                 ;701
00036a  d060              BEQ      |L14.1070|
00036c  69e0              LDR      r0,[r4,#0x1c]         ;703
00036e  2802              CMP      r0,#2                 ;703
000370  d148              BNE      |L14.1028|
000372  2000              MOVS     r0,#0                 ;710
000374  4920              LDR      r1,|L14.1016|
000376  6608              STR      r0,[r1,#0x60]         ;710
000378  f7fffffe          BL       HAL_GetTick
00037c  4605              MOV      r5,r0                 ;713
00037e  e006              B        |L14.910|
                  |L14.896|
000380  f7fffffe          BL       HAL_GetTick
000384  1b40              SUBS     r0,r0,r5              ;718
000386  2802              CMP      r0,#2                 ;718
000388  d901              BLS      |L14.910|
00038a  2003              MOVS     r0,#3                 ;720
00038c  e65d              B        |L14.74|
                  |L14.910|
00038e  4819              LDR      r0,|L14.1012|
000390  6800              LDR      r0,[r0,#0]            ;716
000392  f0007000          AND      r0,r0,#0x2000000      ;716
000396  2800              CMP      r0,#0                 ;716
000398  d1f2              BNE      |L14.896|
00039a  6a20              LDR      r0,[r4,#0x20]         ;726
00039c  f5b03f80          CMP      r0,#0x10000           ;726
0003a0  d107              BNE      |L14.946|
0003a2  4814              LDR      r0,|L14.1012|
0003a4  6840              LDR      r0,[r0,#4]            ;738
0003a6  f4203000          BIC      r0,r0,#0x20000        ;738
0003aa  68a1              LDR      r1,[r4,#8]            ;738
0003ac  4308              ORRS     r0,r0,r1              ;738
0003ae  4911              LDR      r1,|L14.1012|
0003b0  6048              STR      r0,[r1,#4]            ;738
                  |L14.946|
0003b2  e9d40108          LDRD     r0,r1,[r4,#0x20]      ;742
0003b6  4308              ORRS     r0,r0,r1              ;742
0003b8  490e              LDR      r1,|L14.1012|
0003ba  6849              LDR      r1,[r1,#4]            ;742
0003bc  f4211174          BIC      r1,r1,#0x3d0000       ;742
0003c0  4308              ORRS     r0,r0,r1              ;742
0003c2  490c              LDR      r1,|L14.1012|
0003c4  6048              STR      r0,[r1,#4]            ;742
0003c6  2001              MOVS     r0,#1                 ;745
0003c8  490b              LDR      r1,|L14.1016|
0003ca  6608              STR      r0,[r1,#0x60]         ;745
0003cc  f7fffffe          BL       HAL_GetTick
0003d0  4605              MOV      r5,r0                 ;748
0003d2  e007              B        |L14.996|
                  |L14.980|
0003d4  e02d              B        |L14.1074|
                  |L14.982|
0003d6  f7fffffe          BL       HAL_GetTick
0003da  1b40              SUBS     r0,r0,r5              ;753
0003dc  2802              CMP      r0,#2                 ;753
0003de  d901              BLS      |L14.996|
0003e0  2003              MOVS     r0,#3                 ;755
0003e2  e632              B        |L14.74|
                  |L14.996|
0003e4  4803              LDR      r0,|L14.1012|
0003e6  6800              LDR      r0,[r0,#0]            ;751
0003e8  f0007000          AND      r0,r0,#0x2000000      ;751
0003ec  2800              CMP      r0,#0                 ;751
0003ee  d0f2              BEQ      |L14.982|
0003f0  e01f              B        |L14.1074|
0003f2  0000              DCW      0x0000
                  |L14.1012|
                          DCD      0x40021000
                  |L14.1016|
                          DCD      0x42420000
                  |L14.1020|
                          DCD      0x42420480
                  |L14.1024|
                          DCD      0x40007000
                  |L14.1028|
000404  2000              MOVS     r0,#0                 ;762
000406  490c              LDR      r1,|L14.1080|
000408  6608              STR      r0,[r1,#0x60]         ;762
00040a  f7fffffe          BL       HAL_GetTick
00040e  4605              MOV      r5,r0                 ;765
000410  e006              B        |L14.1056|
                  |L14.1042|
000412  f7fffffe          BL       HAL_GetTick
000416  1b40              SUBS     r0,r0,r5              ;770
000418  2802              CMP      r0,#2                 ;770
00041a  d901              BLS      |L14.1056|
00041c  2003              MOVS     r0,#3                 ;772
00041e  e614              B        |L14.74|
                  |L14.1056|
000420  4806              LDR      r0,|L14.1084|
000422  6800              LDR      r0,[r0,#0]            ;768
000424  f0007000          AND      r0,r0,#0x2000000      ;768
000428  2800              CMP      r0,#0                 ;768
00042a  d1f2              BNE      |L14.1042|
00042c  e001              B        |L14.1074|
                  |L14.1070|
00042e  2001              MOVS     r0,#1                 ;779
000430  e60b              B        |L14.74|
                  |L14.1074|
000432  2000              MOVS     r0,#0                 ;783
000434  e609              B        |L14.74|
;;;785    
                          ENDP

000436  0000              DCW      0x0000
                  |L14.1080|
                          DCD      0x42420000
                  |L14.1084|
                          DCD      0x40021000

                          AREA ||i.RCC_Delay||, CODE, READONLY, ALIGN=2

                  RCC_Delay PROC
;;;1364     */
;;;1365   static void RCC_Delay(uint32_t mdelay)
000000  b508              PUSH     {r3,lr}
;;;1366   {
;;;1367     __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
000002  4908              LDR      r1,|L15.36|
000004  6809              LDR      r1,[r1,#0]  ; SystemCoreClock
000006  08c9              LSRS     r1,r1,#3
000008  f44f727a          MOV      r2,#0x3e8
00000c  fbb1f1f2          UDIV     r1,r1,r2
000010  4341              MULS     r1,r0,r1
000012  9100              STR      r1,[sp,#0]
;;;1368     do 
000014  bf00              NOP      
                  |L15.22|
;;;1369     {
;;;1370       __NOP();
000016  bf00              NOP      
;;;1371     } 
;;;1372     while (Delay --);
000018  9900              LDR      r1,[sp,#0]
00001a  1e4a              SUBS     r2,r1,#1
00001c  9200              STR      r2,[sp,#0]
00001e  2900              CMP      r1,#0
000020  d1f9              BNE      |L15.22|
;;;1373   }
000022  bd08              POP      {r3,pc}
;;;1374   
                          ENDP

                  |L15.36|
                          DCD      SystemCoreClock

;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_rcc_c_b7071a4b____REV16|
#line 388 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___19_stm32f1xx_hal_rcc_c_b7071a4b____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_rcc_c_b7071a4b____REVSH|
#line 402
|__asm___19_stm32f1xx_hal_rcc_c_b7071a4b____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_rcc_c_b7071a4b____RRX|
#line 587
|__asm___19_stm32f1xx_hal_rcc_c_b7071a4b____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
