; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -orcc\stm32f1xx_hal_flash_ex.o --asm_dir=..\ --list_dir=..\ --depend=rcc\stm32f1xx_hal_flash_ex.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy -I../Drivers/CMSIS/Device/ST/STM32F1xx/Include -I../Drivers/CMSIS/Include -ID:\RCCv2\RCC\RCC\MDK-ARM\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=521 -D_RTE_ -DSTM32F10X_MD -DUSE_HAL_DRIVER -DSTM32F103xB --omf_browse=rcc\stm32f1xx_hal_flash_ex.crf ../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_flash_ex.c]
                          THUMB

                          AREA ||i.FLASH_MassErase||, CODE, READONLY, ALIGN=2

                  FLASH_MassErase PROC
;;;610      */
;;;611    static void FLASH_MassErase(uint32_t Banks)
000000  2100              MOVS     r1,#0
;;;612    {
;;;613      /* Check the parameters */
;;;614      assert_param(IS_FLASH_BANK(Banks));
;;;615    
;;;616      /* Clean the error context */
;;;617      pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000002  4a07              LDR      r2,|L1.32|
000004  61d1              STR      r1,[r2,#0x1c]  ; pFlash
;;;618    
;;;619    #if defined(FLASH_BANK2_END)
;;;620      if(Banks == FLASH_BANK_BOTH)
;;;621      {
;;;622        /* bank1 & bank2 will be erased*/
;;;623        SET_BIT(FLASH->CR, FLASH_CR_MER);
;;;624        SET_BIT(FLASH->CR2, FLASH_CR2_MER);
;;;625        SET_BIT(FLASH->CR, FLASH_CR_STRT);
;;;626        SET_BIT(FLASH->CR2, FLASH_CR2_STRT);
;;;627      }
;;;628      else if(Banks == FLASH_BANK_2)
;;;629      {
;;;630        /*Only bank2 will be erased*/
;;;631        SET_BIT(FLASH->CR2, FLASH_CR2_MER);
;;;632        SET_BIT(FLASH->CR2, FLASH_CR2_STRT);
;;;633      }
;;;634      else
;;;635      {
;;;636    #endif /* FLASH_BANK2_END */
;;;637    #if !defined(FLASH_BANK2_END)
;;;638      /* Prevent unused argument(s) compilation warning */
;;;639      UNUSED(Banks);
;;;640    #endif /* FLASH_BANK2_END */  
;;;641        /* Only bank1 will be erased*/
;;;642        SET_BIT(FLASH->CR, FLASH_CR_MER);
000006  4907              LDR      r1,|L1.36|
000008  6909              LDR      r1,[r1,#0x10]
00000a  f0410104          ORR      r1,r1,#4
00000e  4a05              LDR      r2,|L1.36|
000010  6111              STR      r1,[r2,#0x10]
;;;643        SET_BIT(FLASH->CR, FLASH_CR_STRT);
000012  4611              MOV      r1,r2
000014  6909              LDR      r1,[r1,#0x10]
000016  f0410140          ORR      r1,r1,#0x40
00001a  6111              STR      r1,[r2,#0x10]
;;;644    #if defined(FLASH_BANK2_END)
;;;645      }
;;;646    #endif /* FLASH_BANK2_END */
;;;647    }
00001c  4770              BX       lr
;;;648    
                          ENDP

00001e  0000              DCW      0x0000
                  |L1.32|
                          DCD      pFlash
                  |L1.36|
                          DCD      0x40022000

                          AREA ||i.FLASH_OB_DisableWRP||, CODE, READONLY, ALIGN=2

                  FLASH_OB_DisableWRP PROC
;;;782      */
;;;783    static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WriteProtectPage)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;784    {
000004  4604              MOV      r4,r0
;;;785      HAL_StatusTypeDef status = HAL_OK;
000006  2500              MOVS     r5,#0
;;;786      uint16_t WRP0_Data = 0xFFFF;
000008  f64f76ff          MOV      r6,#0xffff
;;;787    #if defined(FLASH_WRP1_WRP1)
;;;788      uint16_t WRP1_Data = 0xFFFF;
00000c  4637              MOV      r7,r6
;;;789    #endif /* FLASH_WRP1_WRP1 */
;;;790    #if defined(FLASH_WRP2_WRP2)
;;;791      uint16_t WRP2_Data = 0xFFFF;
00000e  46b0              MOV      r8,r6
;;;792    #endif /* FLASH_WRP2_WRP2 */
;;;793    #if defined(FLASH_WRP3_WRP3)
;;;794      uint16_t WRP3_Data = 0xFFFF;
000010  46b1              MOV      r9,r6
;;;795    #endif /* FLASH_WRP3_WRP3 */
;;;796      
;;;797      /* Check the parameters */
;;;798      assert_param(IS_OB_WRP(WriteProtectPage));
;;;799    
;;;800      /* Get current write protected pages and the new pages to be unprotected ******/
;;;801      WriteProtectPage = (FLASH_OB_GetWRP() | WriteProtectPage);
000012  f7fffffe          BL       FLASH_OB_GetWRP
000016  4304              ORRS     r4,r4,r0
;;;802    
;;;803    #if defined(OB_WRP_PAGES0TO15MASK)
;;;804      WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO15MASK);
;;;805    #elif defined(OB_WRP_PAGES0TO31MASK)
;;;806      WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
000018  b2e6              UXTB     r6,r4
;;;807    #endif /* OB_WRP_PAGES0TO31MASK */
;;;808      
;;;809    #if defined(OB_WRP_PAGES16TO31MASK)
;;;810      WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES16TO31MASK) >> 8U);
;;;811    #elif defined(OB_WRP_PAGES32TO63MASK)
;;;812      WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO63MASK) >> 8U);
00001a  f3c42707          UBFX     r7,r4,#8,#8
;;;813    #endif /* OB_WRP_PAGES32TO63MASK */
;;;814     
;;;815    #if defined(OB_WRP_PAGES64TO95MASK)
;;;816      WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES64TO95MASK) >> 16U);
00001e  f3c44807          UBFX     r8,r4,#16,#8
;;;817    #endif /* OB_WRP_PAGES64TO95MASK */
;;;818    #if defined(OB_WRP_PAGES32TO47MASK)
;;;819      WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO47MASK) >> 16U);
;;;820    #endif /* OB_WRP_PAGES32TO47MASK */
;;;821    
;;;822    #if defined(OB_WRP_PAGES96TO127MASK)
;;;823      WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES96TO127MASK) >> 24U); 
000022  ea4f6914          LSR      r9,r4,#24
;;;824    #elif defined(OB_WRP_PAGES48TO255MASK)
;;;825      WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO255MASK) >> 24U); 
;;;826    #elif defined(OB_WRP_PAGES48TO511MASK)
;;;827      WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO511MASK) >> 24U); 
;;;828    #elif defined(OB_WRP_PAGES48TO127MASK)
;;;829      WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO127MASK) >> 24U); 
;;;830    #endif /* OB_WRP_PAGES96TO127MASK */
;;;831    
;;;832        
;;;833      /* Wait for last operation to be completed */
;;;834      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000026  f24c3050          MOV      r0,#0xc350
00002a  f7fffffe          BL       FLASH_WaitForLastOperation
00002e  4605              MOV      r5,r0
;;;835    
;;;836      if(status == HAL_OK)
000030  2d00              CMP      r5,#0
000032  d14f              BNE      |L2.212|
;;;837      { 
;;;838        /* Clean the error context */
;;;839        pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000034  4929              LDR      r1,|L2.220|
000036  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;840    
;;;841        /* To be able to write again option byte, need to perform a option byte erase */
;;;842        status = HAL_FLASHEx_OBErase();
000038  f7fffffe          BL       HAL_FLASHEx_OBErase
00003c  4605              MOV      r5,r0
;;;843        if (status == HAL_OK)  
00003e  2d00              CMP      r5,#0
000040  d148              BNE      |L2.212|
;;;844        {
;;;845          SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
000042  4827              LDR      r0,|L2.224|
000044  6900              LDR      r0,[r0,#0x10]
000046  f0400010          ORR      r0,r0,#0x10
00004a  4925              LDR      r1,|L2.224|
00004c  6108              STR      r0,[r1,#0x10]
;;;846    
;;;847    #if defined(FLASH_WRP0_WRP0)
;;;848          if(WRP0_Data != 0xFFU)
00004e  2eff              CMP      r6,#0xff
000050  d009              BEQ      |L2.102|
;;;849          {
;;;850            OB->WRP0 |= WRP0_Data;
000052  4824              LDR      r0,|L2.228|
000054  8800              LDRH     r0,[r0,#0]
000056  4330              ORRS     r0,r0,r6
000058  4922              LDR      r1,|L2.228|
00005a  8008              STRH     r0,[r1,#0]
;;;851            
;;;852            /* Wait for last operation to be completed */
;;;853            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
00005c  f24c3050          MOV      r0,#0xc350
000060  f7fffffe          BL       FLASH_WaitForLastOperation
000064  4605              MOV      r5,r0
                  |L2.102|
;;;854          }
;;;855    #endif /* FLASH_WRP0_WRP0 */
;;;856    
;;;857    #if defined(FLASH_WRP1_WRP1)
;;;858          if((status == HAL_OK) && (WRP1_Data != 0xFFU))
000066  b96d              CBNZ     r5,|L2.132|
000068  2fff              CMP      r7,#0xff
00006a  d00b              BEQ      |L2.132|
;;;859          {
;;;860            OB->WRP1 |= WRP1_Data;
00006c  481d              LDR      r0,|L2.228|
00006e  1c80              ADDS     r0,r0,#2
000070  8800              LDRH     r0,[r0,#0]
000072  4338              ORRS     r0,r0,r7
000074  491b              LDR      r1,|L2.228|
000076  1c89              ADDS     r1,r1,#2
000078  8008              STRH     r0,[r1,#0]
;;;861            
;;;862            /* Wait for last operation to be completed */
;;;863            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
00007a  f24c3050          MOV      r0,#0xc350
00007e  f7fffffe          BL       FLASH_WaitForLastOperation
000082  4605              MOV      r5,r0
                  |L2.132|
;;;864          }
;;;865    #endif /* FLASH_WRP1_WRP1 */
;;;866    
;;;867    #if defined(FLASH_WRP2_WRP2)
;;;868          if((status == HAL_OK) && (WRP2_Data != 0xFFU))
000084  b97d              CBNZ     r5,|L2.166|
000086  f1b80fff          CMP      r8,#0xff
00008a  d00c              BEQ      |L2.166|
;;;869          {
;;;870            OB->WRP2 |= WRP2_Data;
00008c  4815              LDR      r0,|L2.228|
00008e  1d00              ADDS     r0,r0,#4
000090  8800              LDRH     r0,[r0,#0]
000092  ea400008          ORR      r0,r0,r8
000096  4913              LDR      r1,|L2.228|
000098  1d09              ADDS     r1,r1,#4
00009a  8008              STRH     r0,[r1,#0]
;;;871            
;;;872            /* Wait for last operation to be completed */
;;;873            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
00009c  f24c3050          MOV      r0,#0xc350
0000a0  f7fffffe          BL       FLASH_WaitForLastOperation
0000a4  4605              MOV      r5,r0
                  |L2.166|
;;;874          }
;;;875    #endif /* FLASH_WRP2_WRP2 */
;;;876    
;;;877    #if defined(FLASH_WRP3_WRP3)
;;;878          if((status == HAL_OK) && (WRP3_Data != 0xFFU))
0000a6  b97d              CBNZ     r5,|L2.200|
0000a8  f1b90fff          CMP      r9,#0xff
0000ac  d00c              BEQ      |L2.200|
;;;879          {
;;;880            OB->WRP3 |= WRP3_Data;
0000ae  480d              LDR      r0,|L2.228|
0000b0  1d80              ADDS     r0,r0,#6
0000b2  8800              LDRH     r0,[r0,#0]
0000b4  ea400009          ORR      r0,r0,r9
0000b8  490a              LDR      r1,|L2.228|
0000ba  1d89              ADDS     r1,r1,#6
0000bc  8008              STRH     r0,[r1,#0]
;;;881            
;;;882            /* Wait for last operation to be completed */
;;;883            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
0000be  f24c3050          MOV      r0,#0xc350
0000c2  f7fffffe          BL       FLASH_WaitForLastOperation
0000c6  4605              MOV      r5,r0
                  |L2.200|
;;;884          }
;;;885    #endif /* FLASH_WRP3_WRP3 */
;;;886    
;;;887          /* if the program operation is completed, disable the OPTPG Bit */
;;;888          CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
0000c8  4805              LDR      r0,|L2.224|
0000ca  6900              LDR      r0,[r0,#0x10]
0000cc  f0200010          BIC      r0,r0,#0x10
0000d0  4903              LDR      r1,|L2.224|
0000d2  6108              STR      r0,[r1,#0x10]
                  |L2.212|
;;;889        }
;;;890      }
;;;891      return status;
0000d4  4628              MOV      r0,r5
;;;892    }
0000d6  e8bd87f0          POP      {r4-r10,pc}
;;;893    
                          ENDP

0000da  0000              DCW      0x0000
                  |L2.220|
                          DCD      pFlash
                  |L2.224|
                          DCD      0x40022000
                  |L2.228|
                          DCD      0x1ffff808

                          AREA ||i.FLASH_OB_EnableWRP||, CODE, READONLY, ALIGN=2

                  FLASH_OB_EnableWRP PROC
;;;659      */
;;;660    static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WriteProtectPage)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;661    {
000004  4604              MOV      r4,r0
;;;662      HAL_StatusTypeDef status = HAL_OK;
000006  2500              MOVS     r5,#0
;;;663      uint16_t WRP0_Data = 0xFFFF;
000008  f64f76ff          MOV      r6,#0xffff
;;;664    #if defined(FLASH_WRP1_WRP1)
;;;665      uint16_t WRP1_Data = 0xFFFF;
00000c  4637              MOV      r7,r6
;;;666    #endif /* FLASH_WRP1_WRP1 */
;;;667    #if defined(FLASH_WRP2_WRP2)
;;;668      uint16_t WRP2_Data = 0xFFFF;
00000e  46b0              MOV      r8,r6
;;;669    #endif /* FLASH_WRP2_WRP2 */
;;;670    #if defined(FLASH_WRP3_WRP3)
;;;671      uint16_t WRP3_Data = 0xFFFF;
000010  46b1              MOV      r9,r6
;;;672    #endif /* FLASH_WRP3_WRP3 */
;;;673      
;;;674      /* Check the parameters */
;;;675      assert_param(IS_OB_WRP(WriteProtectPage));
;;;676        
;;;677      /* Get current write protected pages and the new pages to be protected ******/
;;;678      WriteProtectPage = (uint32_t)(~((~FLASH_OB_GetWRP()) | WriteProtectPage));
000012  f7fffffe          BL       FLASH_OB_GetWRP
000016  43c0              MVNS     r0,r0
000018  4320              ORRS     r0,r0,r4
00001a  43c4              MVNS     r4,r0
;;;679      
;;;680    #if defined(OB_WRP_PAGES0TO15MASK)
;;;681      WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO15MASK);
;;;682    #elif defined(OB_WRP_PAGES0TO31MASK)
;;;683      WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
00001c  b2e6              UXTB     r6,r4
;;;684    #endif /* OB_WRP_PAGES0TO31MASK */
;;;685      
;;;686    #if defined(OB_WRP_PAGES16TO31MASK)
;;;687      WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES16TO31MASK) >> 8U);
;;;688    #elif defined(OB_WRP_PAGES32TO63MASK)
;;;689      WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO63MASK) >> 8U);
00001e  f3c42707          UBFX     r7,r4,#8,#8
;;;690    #endif /* OB_WRP_PAGES32TO63MASK */
;;;691     
;;;692    #if defined(OB_WRP_PAGES64TO95MASK)
;;;693      WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES64TO95MASK) >> 16U);
000022  f3c44807          UBFX     r8,r4,#16,#8
;;;694    #endif /* OB_WRP_PAGES64TO95MASK */
;;;695    #if defined(OB_WRP_PAGES32TO47MASK)
;;;696      WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO47MASK) >> 16U);
;;;697    #endif /* OB_WRP_PAGES32TO47MASK */
;;;698    
;;;699    #if defined(OB_WRP_PAGES96TO127MASK)
;;;700      WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES96TO127MASK) >> 24U); 
000026  ea4f6914          LSR      r9,r4,#24
;;;701    #elif defined(OB_WRP_PAGES48TO255MASK)
;;;702      WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO255MASK) >> 24U); 
;;;703    #elif defined(OB_WRP_PAGES48TO511MASK)
;;;704      WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO511MASK) >> 24U); 
;;;705    #elif defined(OB_WRP_PAGES48TO127MASK)
;;;706      WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO127MASK) >> 24U); 
;;;707    #endif /* OB_WRP_PAGES96TO127MASK */
;;;708      
;;;709      /* Wait for last operation to be completed */
;;;710      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
00002a  f24c3050          MOV      r0,#0xc350
00002e  f7fffffe          BL       FLASH_WaitForLastOperation
000032  4605              MOV      r5,r0
;;;711    
;;;712      if(status == HAL_OK)
000034  2d00              CMP      r5,#0
000036  d14f              BNE      |L3.216|
;;;713      { 
;;;714        /* Clean the error context */
;;;715        pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000038  4929              LDR      r1,|L3.224|
00003a  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;716    
;;;717        /* To be able to write again option byte, need to perform a option byte erase */
;;;718        status = HAL_FLASHEx_OBErase();
00003c  f7fffffe          BL       HAL_FLASHEx_OBErase
000040  4605              MOV      r5,r0
;;;719        if (status == HAL_OK)  
000042  2d00              CMP      r5,#0
000044  d148              BNE      |L3.216|
;;;720        {
;;;721          /* Enable write protection */
;;;722          SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
000046  4827              LDR      r0,|L3.228|
000048  6900              LDR      r0,[r0,#0x10]
00004a  f0400010          ORR      r0,r0,#0x10
00004e  4925              LDR      r1,|L3.228|
000050  6108              STR      r0,[r1,#0x10]
;;;723    
;;;724    #if defined(FLASH_WRP0_WRP0)
;;;725          if(WRP0_Data != 0xFFU)
000052  2eff              CMP      r6,#0xff
000054  d009              BEQ      |L3.106|
;;;726          {
;;;727            OB->WRP0 &= WRP0_Data;
000056  4824              LDR      r0,|L3.232|
000058  8800              LDRH     r0,[r0,#0]
00005a  4030              ANDS     r0,r0,r6
00005c  4922              LDR      r1,|L3.232|
00005e  8008              STRH     r0,[r1,#0]
;;;728            
;;;729            /* Wait for last operation to be completed */
;;;730            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000060  f24c3050          MOV      r0,#0xc350
000064  f7fffffe          BL       FLASH_WaitForLastOperation
000068  4605              MOV      r5,r0
                  |L3.106|
;;;731          }
;;;732    #endif /* FLASH_WRP0_WRP0 */
;;;733    
;;;734    #if defined(FLASH_WRP1_WRP1)
;;;735          if((status == HAL_OK) && (WRP1_Data != 0xFFU))
00006a  b96d              CBNZ     r5,|L3.136|
00006c  2fff              CMP      r7,#0xff
00006e  d00b              BEQ      |L3.136|
;;;736          {
;;;737            OB->WRP1 &= WRP1_Data;
000070  481d              LDR      r0,|L3.232|
000072  1c80              ADDS     r0,r0,#2
000074  8800              LDRH     r0,[r0,#0]
000076  4038              ANDS     r0,r0,r7
000078  491b              LDR      r1,|L3.232|
00007a  1c89              ADDS     r1,r1,#2
00007c  8008              STRH     r0,[r1,#0]
;;;738            
;;;739            /* Wait for last operation to be completed */
;;;740            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
00007e  f24c3050          MOV      r0,#0xc350
000082  f7fffffe          BL       FLASH_WaitForLastOperation
000086  4605              MOV      r5,r0
                  |L3.136|
;;;741          }
;;;742    #endif /* FLASH_WRP1_WRP1 */
;;;743    
;;;744    #if defined(FLASH_WRP2_WRP2)
;;;745          if((status == HAL_OK) && (WRP2_Data != 0xFFU))
000088  b97d              CBNZ     r5,|L3.170|
00008a  f1b80fff          CMP      r8,#0xff
00008e  d00c              BEQ      |L3.170|
;;;746          {
;;;747            OB->WRP2 &= WRP2_Data;
000090  4815              LDR      r0,|L3.232|
000092  1d00              ADDS     r0,r0,#4
000094  8800              LDRH     r0,[r0,#0]
000096  ea000008          AND      r0,r0,r8
00009a  4913              LDR      r1,|L3.232|
00009c  1d09              ADDS     r1,r1,#4
00009e  8008              STRH     r0,[r1,#0]
;;;748            
;;;749            /* Wait for last operation to be completed */
;;;750            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
0000a0  f24c3050          MOV      r0,#0xc350
0000a4  f7fffffe          BL       FLASH_WaitForLastOperation
0000a8  4605              MOV      r5,r0
                  |L3.170|
;;;751          }
;;;752    #endif /* FLASH_WRP2_WRP2 */
;;;753    
;;;754    #if defined(FLASH_WRP3_WRP3)
;;;755          if((status == HAL_OK) && (WRP3_Data != 0xFFU))
0000aa  b97d              CBNZ     r5,|L3.204|
0000ac  f1b90fff          CMP      r9,#0xff
0000b0  d00c              BEQ      |L3.204|
;;;756          {
;;;757            OB->WRP3 &= WRP3_Data;
0000b2  480d              LDR      r0,|L3.232|
0000b4  1d80              ADDS     r0,r0,#6
0000b6  8800              LDRH     r0,[r0,#0]
0000b8  ea000009          AND      r0,r0,r9
0000bc  490a              LDR      r1,|L3.232|
0000be  1d89              ADDS     r1,r1,#6
0000c0  8008              STRH     r0,[r1,#0]
;;;758            
;;;759            /* Wait for last operation to be completed */
;;;760            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
0000c2  f24c3050          MOV      r0,#0xc350
0000c6  f7fffffe          BL       FLASH_WaitForLastOperation
0000ca  4605              MOV      r5,r0
                  |L3.204|
;;;761          }
;;;762    #endif /* FLASH_WRP3_WRP3 */
;;;763    
;;;764          /* if the program operation is completed, disable the OPTPG Bit */
;;;765          CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
0000cc  4805              LDR      r0,|L3.228|
0000ce  6900              LDR      r0,[r0,#0x10]
0000d0  f0200010          BIC      r0,r0,#0x10
0000d4  4903              LDR      r1,|L3.228|
0000d6  6108              STR      r0,[r1,#0x10]
                  |L3.216|
;;;766        }
;;;767      }
;;;768      
;;;769      return status;
0000d8  4628              MOV      r0,r5
;;;770    }
0000da  e8bd87f0          POP      {r4-r10,pc}
;;;771    
                          ENDP

0000de  0000              DCW      0x0000
                  |L3.224|
                          DCD      pFlash
                  |L3.228|
                          DCD      0x40022000
                  |L3.232|
                          DCD      0x1ffff808

                          AREA ||i.FLASH_OB_GetRDP||, CODE, READONLY, ALIGN=2

                  FLASH_OB_GetRDP PROC
;;;1049     */
;;;1050   static uint32_t FLASH_OB_GetRDP(void)
000000  20a5              MOVS     r0,#0xa5
;;;1051   {
;;;1052     uint32_t readstatus = OB_RDP_LEVEL_0;
;;;1053     uint32_t tmp_reg = 0U;
000002  2100              MOVS     r1,#0
;;;1054     
;;;1055     /* Read RDP level bits */
;;;1056     tmp_reg = READ_BIT(FLASH->OBR, FLASH_OBR_RDPRT);
000004  4a04              LDR      r2,|L4.24|
000006  69d2              LDR      r2,[r2,#0x1c]
000008  f0020102          AND      r1,r2,#2
;;;1057   
;;;1058     if (tmp_reg == FLASH_OBR_RDPRT)
00000c  2902              CMP      r1,#2
00000e  d101              BNE      |L4.20|
;;;1059     {
;;;1060       readstatus = OB_RDP_LEVEL_1;
000010  2000              MOVS     r0,#0
000012  e000              B        |L4.22|
                  |L4.20|
;;;1061     }
;;;1062     else 
;;;1063     {
;;;1064       readstatus = OB_RDP_LEVEL_0;
000014  20a5              MOVS     r0,#0xa5
                  |L4.22|
;;;1065     }
;;;1066   
;;;1067     return readstatus;
;;;1068   }
000016  4770              BX       lr
;;;1069   
                          ENDP

                  |L4.24|
                          DCD      0x40022000

                          AREA ||i.FLASH_OB_GetUser||, CODE, READONLY, ALIGN=2

                  FLASH_OB_GetUser PROC
;;;1075     */
;;;1076   static uint8_t FLASH_OB_GetUser(void)
000000  4802              LDR      r0,|L5.12|
;;;1077   {
;;;1078     /* Return the User Option Byte */
;;;1079     return (uint8_t)((READ_REG(FLASH->OBR) & FLASH_OBR_USER) >> FLASH_POSITION_IWDGSW_BIT);
000002  69c0              LDR      r0,[r0,#0x1c]
000004  f3c00082          UBFX     r0,r0,#2,#3
;;;1080   }
000008  4770              BX       lr
;;;1081   
                          ENDP

00000a  0000              DCW      0x0000
                  |L5.12|
                          DCD      0x40022000

                          AREA ||i.FLASH_OB_GetWRP||, CODE, READONLY, ALIGN=2

                  FLASH_OB_GetWRP PROC
;;;1036     */
;;;1037   static uint32_t FLASH_OB_GetWRP(void)
000000  4801              LDR      r0,|L6.8|
;;;1038   {
;;;1039     /* Return the FLASH write protection Register value */
;;;1040     return (uint32_t)(READ_REG(FLASH->WRPR));
000002  6a00              LDR      r0,[r0,#0x20]
;;;1041   }
000004  4770              BX       lr
;;;1042   
                          ENDP

000006  0000              DCW      0x0000
                  |L6.8|
                          DCD      0x40022000

                          AREA ||i.FLASH_OB_ProgramData||, CODE, READONLY, ALIGN=2

                  FLASH_OB_ProgramData PROC
;;;1003     */
;;;1004   static HAL_StatusTypeDef FLASH_OB_ProgramData(uint32_t Address, uint8_t Data)
000000  b570              PUSH     {r4-r6,lr}
;;;1005   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1006     HAL_StatusTypeDef status = HAL_ERROR;
000006  2601              MOVS     r6,#1
;;;1007     
;;;1008     /* Check the parameters */
;;;1009     assert_param(IS_OB_DATA_ADDRESS(Address));
;;;1010     
;;;1011     /* Wait for last operation to be completed */
;;;1012     status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000008  f24c3050          MOV      r0,#0xc350
00000c  f7fffffe          BL       FLASH_WaitForLastOperation
000010  4606              MOV      r6,r0
;;;1013     
;;;1014     if(status == HAL_OK)
000012  b9a6              CBNZ     r6,|L7.62|
;;;1015     {
;;;1016       /* Clean the error context */
;;;1017       pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000014  2000              MOVS     r0,#0
000016  490b              LDR      r1,|L7.68|
000018  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;1018   
;;;1019       /* Enables the Option Bytes Programming operation */
;;;1020       SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
00001a  480b              LDR      r0,|L7.72|
00001c  6900              LDR      r0,[r0,#0x10]
00001e  f0400010          ORR      r0,r0,#0x10
000022  4909              LDR      r1,|L7.72|
000024  6108              STR      r0,[r1,#0x10]
;;;1021       *(__IO uint16_t*)Address = Data;
000026  8025              STRH     r5,[r4,#0]
;;;1022       
;;;1023       /* Wait for last operation to be completed */
;;;1024       status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000028  f24c3050          MOV      r0,#0xc350
00002c  f7fffffe          BL       FLASH_WaitForLastOperation
000030  4606              MOV      r6,r0
;;;1025       
;;;1026       /* If the program operation is completed, disable the OPTPG Bit */
;;;1027       CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
000032  4805              LDR      r0,|L7.72|
000034  6900              LDR      r0,[r0,#0x10]
000036  f0200010          BIC      r0,r0,#0x10
00003a  4903              LDR      r1,|L7.72|
00003c  6108              STR      r0,[r1,#0x10]
                  |L7.62|
;;;1028     }
;;;1029     /* Return the Option Byte Data Program Status */
;;;1030     return status;
00003e  4630              MOV      r0,r6
;;;1031   }
000040  bd70              POP      {r4-r6,pc}
;;;1032   
                          ENDP

000042  0000              DCW      0x0000
                  |L7.68|
                          DCD      pFlash
                  |L7.72|
                          DCD      0x40022000

                          AREA ||i.FLASH_OB_RDP_LevelConfig||, CODE, READONLY, ALIGN=2

                  FLASH_OB_RDP_LevelConfig PROC
;;;901      */
;;;902    static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t ReadProtectLevel)
000000  b570              PUSH     {r4-r6,lr}
;;;903    {
000002  4605              MOV      r5,r0
;;;904      HAL_StatusTypeDef status = HAL_OK;
000004  2400              MOVS     r4,#0
;;;905      
;;;906      /* Check the parameters */
;;;907      assert_param(IS_OB_RDP_LEVEL(ReadProtectLevel));
;;;908      
;;;909      /* Wait for last operation to be completed */
;;;910      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000006  f24c3050          MOV      r0,#0xc350
00000a  f7fffffe          BL       FLASH_WaitForLastOperation
00000e  4604              MOV      r4,r0
;;;911      
;;;912      if(status == HAL_OK)
000010  bb5c              CBNZ     r4,|L8.106|
;;;913      { 
;;;914        /* Clean the error context */
;;;915        pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000012  2000              MOVS     r0,#0
000014  4916              LDR      r1,|L8.112|
000016  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;916        
;;;917        /* If the previous operation is completed, proceed to erase the option bytes */
;;;918        SET_BIT(FLASH->CR, FLASH_CR_OPTER);
000018  4816              LDR      r0,|L8.116|
00001a  6900              LDR      r0,[r0,#0x10]
00001c  f0400020          ORR      r0,r0,#0x20
000020  4914              LDR      r1,|L8.116|
000022  6108              STR      r0,[r1,#0x10]
;;;919        SET_BIT(FLASH->CR, FLASH_CR_STRT);
000024  4608              MOV      r0,r1
000026  6900              LDR      r0,[r0,#0x10]
000028  f0400040          ORR      r0,r0,#0x40
00002c  6108              STR      r0,[r1,#0x10]
;;;920    
;;;921        /* Wait for last operation to be completed */
;;;922        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
00002e  f24c3050          MOV      r0,#0xc350
000032  f7fffffe          BL       FLASH_WaitForLastOperation
000036  4604              MOV      r4,r0
;;;923    
;;;924        /* If the erase operation is completed, disable the OPTER Bit */
;;;925        CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
000038  480e              LDR      r0,|L8.116|
00003a  6900              LDR      r0,[r0,#0x10]
00003c  f0200020          BIC      r0,r0,#0x20
000040  490c              LDR      r1,|L8.116|
000042  6108              STR      r0,[r1,#0x10]
;;;926    
;;;927        if(status == HAL_OK)
000044  b98c              CBNZ     r4,|L8.106|
;;;928        {
;;;929          /* Enable the Option Bytes Programming operation */
;;;930          SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
000046  4608              MOV      r0,r1
000048  6900              LDR      r0,[r0,#0x10]
00004a  f0400010          ORR      r0,r0,#0x10
00004e  6108              STR      r0,[r1,#0x10]
;;;931          
;;;932          WRITE_REG(OB->RDP, ReadProtectLevel);
000050  4809              LDR      r0,|L8.120|
000052  8005              STRH     r5,[r0,#0]
;;;933          
;;;934          /* Wait for last operation to be completed */
;;;935          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE); 
000054  f24c3050          MOV      r0,#0xc350
000058  f7fffffe          BL       FLASH_WaitForLastOperation
00005c  4604              MOV      r4,r0
;;;936          
;;;937          /* if the program operation is completed, disable the OPTPG Bit */
;;;938          CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
00005e  4805              LDR      r0,|L8.116|
000060  6900              LDR      r0,[r0,#0x10]
000062  f0200010          BIC      r0,r0,#0x10
000066  4903              LDR      r1,|L8.116|
000068  6108              STR      r0,[r1,#0x10]
                  |L8.106|
;;;939        }
;;;940      }
;;;941      
;;;942      return status;
00006a  4620              MOV      r0,r4
;;;943    }
00006c  bd70              POP      {r4-r6,pc}
;;;944    
                          ENDP

00006e  0000              DCW      0x0000
                  |L8.112|
                          DCD      pFlash
                  |L8.116|
                          DCD      0x40022000
                  |L8.120|
                          DCD      0x1ffff800

                          AREA ||i.FLASH_OB_UserConfig||, CODE, READONLY, ALIGN=2

                  FLASH_OB_UserConfig PROC
;;;952      */
;;;953    static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t UserConfig)
000000  b570              PUSH     {r4-r6,lr}
;;;954    {
000002  4604              MOV      r4,r0
;;;955      HAL_StatusTypeDef status = HAL_OK;
000004  2500              MOVS     r5,#0
;;;956    
;;;957      /* Check the parameters */
;;;958      assert_param(IS_OB_IWDG_SOURCE((UserConfig&OB_IWDG_SW)));
;;;959      assert_param(IS_OB_STOP_SOURCE((UserConfig&OB_STOP_NO_RST)));
;;;960      assert_param(IS_OB_STDBY_SOURCE((UserConfig&OB_STDBY_NO_RST)));
;;;961    #if defined(FLASH_BANK2_END)
;;;962      assert_param(IS_OB_BOOT1((UserConfig&OB_BOOT1_SET)));
;;;963    #endif /* FLASH_BANK2_END */
;;;964    
;;;965      /* Wait for last operation to be completed */
;;;966      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000006  f24c3050          MOV      r0,#0xc350
00000a  f7fffffe          BL       FLASH_WaitForLastOperation
00000e  4605              MOV      r5,r0
;;;967      
;;;968      if(status == HAL_OK)
000010  b9bd              CBNZ     r5,|L9.66|
;;;969      {     
;;;970        /* Clean the error context */
;;;971        pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000012  2000              MOVS     r0,#0
000014  490c              LDR      r1,|L9.72|
000016  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;972    
;;;973        /* Enable the Option Bytes Programming operation */
;;;974        SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
000018  480c              LDR      r0,|L9.76|
00001a  6900              LDR      r0,[r0,#0x10]
00001c  f0400010          ORR      r0,r0,#0x10
000020  490a              LDR      r1,|L9.76|
000022  6108              STR      r0,[r1,#0x10]
;;;975     
;;;976    #if defined(FLASH_BANK2_END)
;;;977        OB->USER = (UserConfig | 0xF0U);
;;;978    #else
;;;979        OB->USER = (UserConfig | 0x88U);
000024  f0440088          ORR      r0,r4,#0x88
000028  4909              LDR      r1,|L9.80|
00002a  8008              STRH     r0,[r1,#0]
;;;980    #endif /* FLASH_BANK2_END */
;;;981    
;;;982        /* Wait for last operation to be completed */
;;;983        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
00002c  f24c3050          MOV      r0,#0xc350
000030  f7fffffe          BL       FLASH_WaitForLastOperation
000034  4605              MOV      r5,r0
;;;984    
;;;985        /* if the program operation is completed, disable the OPTPG Bit */
;;;986        CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
000036  4805              LDR      r0,|L9.76|
000038  6900              LDR      r0,[r0,#0x10]
00003a  f0200010          BIC      r0,r0,#0x10
00003e  4903              LDR      r1,|L9.76|
000040  6108              STR      r0,[r1,#0x10]
                  |L9.66|
;;;987      }
;;;988      
;;;989      return status; 
000042  4628              MOV      r0,r5
;;;990    }
000044  bd70              POP      {r4-r6,pc}
;;;991    
                          ENDP

000046  0000              DCW      0x0000
                  |L9.72|
                          DCD      pFlash
                  |L9.76|
                          DCD      0x40022000
                  |L9.80|
                          DCD      0x1ffff802

                          AREA ||i.FLASH_PageErase||, CODE, READONLY, ALIGN=2

                  FLASH_PageErase PROC
;;;1104     */
;;;1105   void FLASH_PageErase(uint32_t PageAddress)
000000  2100              MOVS     r1,#0
;;;1106   {
;;;1107     /* Clean the error context */
;;;1108     pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000002  4a07              LDR      r2,|L10.32|
000004  61d1              STR      r1,[r2,#0x1c]  ; pFlash
;;;1109   
;;;1110   #if defined(FLASH_BANK2_END)
;;;1111     if(PageAddress > FLASH_BANK1_END)
;;;1112     { 
;;;1113       /* Proceed to erase the page */
;;;1114       SET_BIT(FLASH->CR2, FLASH_CR2_PER);
;;;1115       WRITE_REG(FLASH->AR2, PageAddress);
;;;1116       SET_BIT(FLASH->CR2, FLASH_CR2_STRT);
;;;1117     }
;;;1118     else
;;;1119     {
;;;1120   #endif /* FLASH_BANK2_END */
;;;1121       /* Proceed to erase the page */
;;;1122       SET_BIT(FLASH->CR, FLASH_CR_PER);
000006  4907              LDR      r1,|L10.36|
000008  6909              LDR      r1,[r1,#0x10]
00000a  f0410102          ORR      r1,r1,#2
00000e  4a05              LDR      r2,|L10.36|
000010  6111              STR      r1,[r2,#0x10]
;;;1123       WRITE_REG(FLASH->AR, PageAddress);
000012  4611              MOV      r1,r2
000014  6148              STR      r0,[r1,#0x14]
;;;1124       SET_BIT(FLASH->CR, FLASH_CR_STRT);
000016  6909              LDR      r1,[r1,#0x10]
000018  f0410140          ORR      r1,r1,#0x40
00001c  6111              STR      r1,[r2,#0x10]
;;;1125   #if defined(FLASH_BANK2_END)
;;;1126     }
;;;1127   #endif /* FLASH_BANK2_END */
;;;1128   }
00001e  4770              BX       lr
;;;1129   
                          ENDP

                  |L10.32|
                          DCD      pFlash
                  |L10.36|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASHEx_Erase||, CODE, READONLY, ALIGN=2

                  HAL_FLASHEx_Erase PROC
;;;174      */
;;;175    HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;176    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;177      HAL_StatusTypeDef status = HAL_ERROR;
000008  2701              MOVS     r7,#1
;;;178      uint32_t address = 0U;
00000a  2500              MOVS     r5,#0
;;;179    
;;;180      /* Process Locked */
;;;181      __HAL_LOCK(&pFlash);
00000c  bf00              NOP      
00000e  4826              LDR      r0,|L11.168|
000010  7e00              LDRB     r0,[r0,#0x18]  ; pFlash
000012  2801              CMP      r0,#1
000014  d102              BNE      |L11.28|
000016  2002              MOVS     r0,#2
                  |L11.24|
;;;182    
;;;183      /* Check the parameters */
;;;184      assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
;;;185    
;;;186      if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
;;;187      {
;;;188    #if defined(FLASH_BANK2_END)
;;;189        if (pEraseInit->Banks == FLASH_BANK_BOTH)
;;;190        {
;;;191          /* Mass Erase requested for Bank1 and Bank2 */
;;;192          /* Wait for last operation to be completed */
;;;193          if ((FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK) && \
;;;194              (FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK))
;;;195          {
;;;196            /*Mass erase to be done*/
;;;197            FLASH_MassErase(FLASH_BANK_BOTH);
;;;198            
;;;199            /* Wait for last operation to be completed */
;;;200            if ((FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK) && \
;;;201                (FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK))
;;;202            {
;;;203              status = HAL_OK;
;;;204            }
;;;205            
;;;206            /* If the erase operation is completed, disable the MER Bit */
;;;207            CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
;;;208            CLEAR_BIT(FLASH->CR2, FLASH_CR2_MER);
;;;209          }
;;;210        }
;;;211        else if (pEraseInit->Banks == FLASH_BANK_2)
;;;212        {
;;;213          /* Mass Erase requested for Bank2 */
;;;214          /* Wait for last operation to be completed */
;;;215          if (FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
;;;216          {
;;;217            /*Mass erase to be done*/
;;;218            FLASH_MassErase(FLASH_BANK_2);
;;;219            
;;;220            /* Wait for last operation to be completed */
;;;221            status = FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE);
;;;222            
;;;223            /* If the erase operation is completed, disable the MER Bit */
;;;224            CLEAR_BIT(FLASH->CR2, FLASH_CR2_MER);
;;;225          }
;;;226        }
;;;227        else 
;;;228    #endif /* FLASH_BANK2_END */
;;;229        {
;;;230          /* Mass Erase requested for Bank1 */
;;;231          /* Wait for last operation to be completed */
;;;232          if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
;;;233          {
;;;234            /*Mass erase to be done*/
;;;235            FLASH_MassErase(FLASH_BANK_1);
;;;236            
;;;237            /* Wait for last operation to be completed */
;;;238            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
;;;239            
;;;240            /* If the erase operation is completed, disable the MER Bit */
;;;241            CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
;;;242          }
;;;243        }
;;;244      }
;;;245      else
;;;246      {
;;;247        /* Page Erase is requested */
;;;248        /* Check the parameters */
;;;249        assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
;;;250        assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
;;;251        
;;;252    #if defined(FLASH_BANK2_END)
;;;253        /* Page Erase requested on address located on bank2 */
;;;254        if(pEraseInit->PageAddress > FLASH_BANK1_END)
;;;255        {   
;;;256          /* Wait for last operation to be completed */
;;;257          if (FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
;;;258          {
;;;259            /*Initialization of PageError variable*/
;;;260            *PageError = 0xFFFFFFFFU;
;;;261            
;;;262            /* Erase by page by page to be done*/
;;;263            for(address = pEraseInit->PageAddress;
;;;264                address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
;;;265                address += FLASH_PAGE_SIZE)
;;;266            {
;;;267              FLASH_PageErase(address);
;;;268              
;;;269              /* Wait for last operation to be completed */
;;;270              status = FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE);
;;;271              
;;;272              /* If the erase operation is completed, disable the PER Bit */
;;;273              CLEAR_BIT(FLASH->CR2, FLASH_CR2_PER);
;;;274              
;;;275              if (status != HAL_OK)
;;;276              {
;;;277                /* In case of error, stop erase procedure and return the faulty address */
;;;278                *PageError = address;
;;;279                break;
;;;280              }
;;;281            }
;;;282          }
;;;283        }
;;;284        else
;;;285    #endif /* FLASH_BANK2_END */
;;;286       {
;;;287          /* Page Erase requested on address located on bank1 */
;;;288          /* Wait for last operation to be completed */
;;;289          if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
;;;290          {
;;;291            /*Initialization of PageError variable*/
;;;292            *PageError = 0xFFFFFFFFU;
;;;293            
;;;294            /* Erase page by page to be done*/
;;;295            for(address = pEraseInit->PageAddress;
;;;296                address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
;;;297                address += FLASH_PAGE_SIZE)
;;;298            {
;;;299              FLASH_PageErase(address);
;;;300              
;;;301              /* Wait for last operation to be completed */
;;;302              status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
;;;303              
;;;304              /* If the erase operation is completed, disable the PER Bit */
;;;305              CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
;;;306              
;;;307              if (status != HAL_OK)
;;;308              {
;;;309                /* In case of error, stop erase procedure and return the faulty address */
;;;310                *PageError = address;
;;;311                break;
;;;312              }
;;;313            }
;;;314          }
;;;315        }
;;;316      }
;;;317    
;;;318      /* Process Unlocked */
;;;319      __HAL_UNLOCK(&pFlash);
;;;320    
;;;321      return status;
;;;322    }
000018  e8bd81f0          POP      {r4-r8,pc}
                  |L11.28|
00001c  2001              MOVS     r0,#1                 ;181
00001e  4922              LDR      r1,|L11.168|
000020  7608              STRB     r0,[r1,#0x18]         ;181
000022  bf00              NOP                            ;181
000024  6820              LDR      r0,[r4,#0]            ;186
000026  2802              CMP      r0,#2                 ;186
000028  d113              BNE      |L11.82|
00002a  f24c3050          MOV      r0,#0xc350            ;232
00002e  f7fffffe          BL       FLASH_WaitForLastOperation
000032  bb90              CBNZ     r0,|L11.154|
000034  2001              MOVS     r0,#1                 ;235
000036  f7fffffe          BL       FLASH_MassErase
00003a  f24c3050          MOV      r0,#0xc350            ;238
00003e  f7fffffe          BL       FLASH_WaitForLastOperation
000042  4607              MOV      r7,r0                 ;238
000044  4819              LDR      r0,|L11.172|
000046  6900              LDR      r0,[r0,#0x10]         ;241
000048  f0200004          BIC      r0,r0,#4              ;241
00004c  4917              LDR      r1,|L11.172|
00004e  6108              STR      r0,[r1,#0x10]         ;241
000050  e023              B        |L11.154|
                  |L11.82|
000052  f24c3050          MOV      r0,#0xc350            ;289
000056  f7fffffe          BL       FLASH_WaitForLastOperation
00005a  b9f0              CBNZ     r0,|L11.154|
00005c  f04f30ff          MOV      r0,#0xffffffff        ;292
000060  6030              STR      r0,[r6,#0]            ;292
000062  68a5              LDR      r5,[r4,#8]            ;295
000064  e012              B        |L11.140|
                  |L11.102|
000066  4628              MOV      r0,r5                 ;299
000068  f7fffffe          BL       FLASH_PageErase
00006c  f24c3050          MOV      r0,#0xc350            ;302
000070  f7fffffe          BL       FLASH_WaitForLastOperation
000074  4607              MOV      r7,r0                 ;302
000076  480d              LDR      r0,|L11.172|
000078  6900              LDR      r0,[r0,#0x10]         ;305
00007a  f0200002          BIC      r0,r0,#2              ;305
00007e  490b              LDR      r1,|L11.172|
000080  6108              STR      r0,[r1,#0x10]         ;305
000082  b10f              CBZ      r7,|L11.136|
000084  6035              STR      r5,[r6,#0]            ;310
000086  e007              B        |L11.152|
                  |L11.136|
000088  f5056580          ADD      r5,r5,#0x400          ;297
                  |L11.140|
00008c  e9d41002          LDRD     r1,r0,[r4,#8]         ;296
000090  eb012080          ADD      r0,r1,r0,LSL #10      ;296
000094  42a8              CMP      r0,r5                 ;296
000096  d8e6              BHI      |L11.102|
                  |L11.152|
000098  bf00              NOP                            ;311
                  |L11.154|
00009a  bf00              NOP                            ;319
00009c  2000              MOVS     r0,#0                 ;319
00009e  4902              LDR      r1,|L11.168|
0000a0  7608              STRB     r0,[r1,#0x18]         ;319
0000a2  bf00              NOP                            ;319
0000a4  4638              MOV      r0,r7                 ;321
0000a6  e7b7              B        |L11.24|
;;;323    
                          ENDP

                  |L11.168|
                          DCD      pFlash
                  |L11.172|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASHEx_Erase_IT||, CODE, READONLY, ALIGN=2

                  HAL_FLASHEx_Erase_IT PROC
;;;334      */
;;;335    HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
000000  b570              PUSH     {r4-r6,lr}
;;;336    {
000002  4604              MOV      r4,r0
;;;337      HAL_StatusTypeDef status = HAL_OK;
000004  2500              MOVS     r5,#0
;;;338    
;;;339      /* Process Locked */
;;;340      __HAL_LOCK(&pFlash);
000006  bf00              NOP      
000008  4814              LDR      r0,|L12.92|
00000a  7e00              LDRB     r0,[r0,#0x18]  ; pFlash
00000c  2801              CMP      r0,#1
00000e  d101              BNE      |L12.20|
000010  2002              MOVS     r0,#2
                  |L12.18|
;;;341    
;;;342      /* If procedure already ongoing, reject the next one */
;;;343      if (pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
;;;344      {
;;;345        return HAL_ERROR;
;;;346      }
;;;347      
;;;348      /* Check the parameters */
;;;349      assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
;;;350    
;;;351      /* Enable End of FLASH Operation and Error source interrupts */
;;;352      __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
;;;353    
;;;354    #if defined(FLASH_BANK2_END)
;;;355      /* Enable End of FLASH Operation and Error source interrupts */
;;;356      __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
;;;357      
;;;358    #endif
;;;359      if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
;;;360      {
;;;361        /*Mass erase to be done*/
;;;362        pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE;
;;;363            FLASH_MassErase(pEraseInit->Banks);
;;;364      }
;;;365      else
;;;366      {
;;;367        /* Erase by page to be done*/
;;;368    
;;;369        /* Check the parameters */
;;;370        assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
;;;371        assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
;;;372    
;;;373        pFlash.ProcedureOnGoing = FLASH_PROC_PAGEERASE;
;;;374        pFlash.DataRemaining = pEraseInit->NbPages;
;;;375        pFlash.Address = pEraseInit->PageAddress;
;;;376    
;;;377        /*Erase 1st page and wait for IT*/
;;;378        FLASH_PageErase(pEraseInit->PageAddress);
;;;379      }
;;;380    
;;;381      return status;
;;;382    }
000012  bd70              POP      {r4-r6,pc}
                  |L12.20|
000014  2001              MOVS     r0,#1                 ;340
000016  4911              LDR      r1,|L12.92|
000018  7608              STRB     r0,[r1,#0x18]         ;340
00001a  bf00              NOP                            ;340
00001c  4608              MOV      r0,r1                 ;343
00001e  7800              LDRB     r0,[r0,#0]            ;343  ; pFlash
000020  b108              CBZ      r0,|L12.38|
000022  2001              MOVS     r0,#1                 ;345
000024  e7f5              B        |L12.18|
                  |L12.38|
000026  480e              LDR      r0,|L12.96|
000028  6900              LDR      r0,[r0,#0x10]         ;352
00002a  f44050a0          ORR      r0,r0,#0x1400         ;352
00002e  490c              LDR      r1,|L12.96|
000030  6108              STR      r0,[r1,#0x10]         ;352
000032  6820              LDR      r0,[r4,#0]            ;359
000034  2802              CMP      r0,#2                 ;359
000036  d105              BNE      |L12.68|
000038  4908              LDR      r1,|L12.92|
00003a  7008              STRB     r0,[r1,#0]            ;362
00003c  6860              LDR      r0,[r4,#4]            ;363
00003e  f7fffffe          BL       FLASH_MassErase
000042  e009              B        |L12.88|
                  |L12.68|
000044  2001              MOVS     r0,#1                 ;373
000046  4905              LDR      r1,|L12.92|
000048  7008              STRB     r0,[r1,#0]            ;373
00004a  68e0              LDR      r0,[r4,#0xc]          ;374
00004c  6048              STR      r0,[r1,#4]            ;374  ; pFlash
00004e  68a0              LDR      r0,[r4,#8]            ;375
000050  6088              STR      r0,[r1,#8]            ;375  ; pFlash
000052  68a0              LDR      r0,[r4,#8]            ;378
000054  f7fffffe          BL       FLASH_PageErase
                  |L12.88|
000058  4628              MOV      r0,r5                 ;381
00005a  e7da              B        |L12.18|
;;;383    
                          ENDP

                  |L12.92|
                          DCD      pFlash
                  |L12.96|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASHEx_OBErase||, CODE, READONLY, ALIGN=2

                  HAL_FLASHEx_OBErase PROC
;;;412    
;;;413    HAL_StatusTypeDef HAL_FLASHEx_OBErase(void)
000000  b570              PUSH     {r4-r6,lr}
;;;414    {
;;;415      uint8_t rdptmp = OB_RDP_LEVEL_0;
000002  25a5              MOVS     r5,#0xa5
;;;416      HAL_StatusTypeDef status = HAL_ERROR;
000004  2401              MOVS     r4,#1
;;;417    
;;;418      /* Get the actual read protection Option Byte value */
;;;419      rdptmp = FLASH_OB_GetRDP();
000006  f7fffffe          BL       FLASH_OB_GetRDP
00000a  b2c5              UXTB     r5,r0
;;;420    
;;;421      /* Wait for last operation to be completed */
;;;422      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
00000c  f24c3050          MOV      r0,#0xc350
000010  f7fffffe          BL       FLASH_WaitForLastOperation
000014  4604              MOV      r4,r0
;;;423    
;;;424      if(status == HAL_OK)
000016  b9ec              CBNZ     r4,|L13.84|
;;;425      {
;;;426        /* Clean the error context */
;;;427        pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000018  2000              MOVS     r0,#0
00001a  490f              LDR      r1,|L13.88|
00001c  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;428    
;;;429        /* If the previous operation is completed, proceed to erase the option bytes */
;;;430        SET_BIT(FLASH->CR, FLASH_CR_OPTER);
00001e  480f              LDR      r0,|L13.92|
000020  6900              LDR      r0,[r0,#0x10]
000022  f0400020          ORR      r0,r0,#0x20
000026  490d              LDR      r1,|L13.92|
000028  6108              STR      r0,[r1,#0x10]
;;;431        SET_BIT(FLASH->CR, FLASH_CR_STRT);
00002a  4608              MOV      r0,r1
00002c  6900              LDR      r0,[r0,#0x10]
00002e  f0400040          ORR      r0,r0,#0x40
000032  6108              STR      r0,[r1,#0x10]
;;;432    
;;;433        /* Wait for last operation to be completed */
;;;434        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000034  f24c3050          MOV      r0,#0xc350
000038  f7fffffe          BL       FLASH_WaitForLastOperation
00003c  4604              MOV      r4,r0
;;;435    
;;;436        /* If the erase operation is completed, disable the OPTER Bit */
;;;437        CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
00003e  4807              LDR      r0,|L13.92|
000040  6900              LDR      r0,[r0,#0x10]
000042  f0200020          BIC      r0,r0,#0x20
000046  4905              LDR      r1,|L13.92|
000048  6108              STR      r0,[r1,#0x10]
;;;438    
;;;439        if(status == HAL_OK)
00004a  b91c              CBNZ     r4,|L13.84|
;;;440        {
;;;441          /* Restore the last read protection Option Byte value */
;;;442          status = FLASH_OB_RDP_LevelConfig(rdptmp);
00004c  4628              MOV      r0,r5
00004e  f7fffffe          BL       FLASH_OB_RDP_LevelConfig
000052  4604              MOV      r4,r0
                  |L13.84|
;;;443        }
;;;444      }
;;;445    
;;;446      /* Return the erase status */
;;;447      return status;
000054  4620              MOV      r0,r4
;;;448    }
000056  bd70              POP      {r4-r6,pc}
;;;449    
                          ENDP

                  |L13.88|
                          DCD      pFlash
                  |L13.92|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASHEx_OBGetConfig||, CODE, READONLY, ALIGN=1

                  HAL_FLASHEx_OBGetConfig PROC
;;;542      */
;;;543    void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
000000  b510              PUSH     {r4,lr}
;;;544    {
000002  4604              MOV      r4,r0
;;;545      pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER;
000004  2007              MOVS     r0,#7
000006  6020              STR      r0,[r4,#0]
;;;546    
;;;547      /*Get WRP*/
;;;548      pOBInit->WRPPage = FLASH_OB_GetWRP();
000008  f7fffffe          BL       FLASH_OB_GetWRP
00000c  60a0              STR      r0,[r4,#8]
;;;549    
;;;550      /*Get RDP Level*/
;;;551      pOBInit->RDPLevel = FLASH_OB_GetRDP();
00000e  f7fffffe          BL       FLASH_OB_GetRDP
000012  7420              STRB     r0,[r4,#0x10]
;;;552    
;;;553      /*Get USER*/
;;;554      pOBInit->USERConfig = FLASH_OB_GetUser();
000014  f7fffffe          BL       FLASH_OB_GetUser
000018  7460              STRB     r0,[r4,#0x11]
;;;555    }
00001a  bd10              POP      {r4,pc}
;;;556    
                          ENDP


                          AREA ||i.HAL_FLASHEx_OBGetUserData||, CODE, READONLY, ALIGN=2

                  HAL_FLASHEx_OBGetUserData PROC
;;;564      */
;;;565    uint32_t HAL_FLASHEx_OBGetUserData(uint32_t DATAAdress)
000000  4601              MOV      r1,r0
;;;566    {
;;;567      uint32_t value = 0;
000002  2000              MOVS     r0,#0
;;;568      
;;;569      if (DATAAdress == OB_DATA_ADDRESS_DATA0)
000004  4a06              LDR      r2,|L15.32|
000006  4291              CMP      r1,r2
000008  d104              BNE      |L15.20|
;;;570      {
;;;571        /* Get value programmed in OB USER Data0 */
;;;572        value = READ_BIT(FLASH->OBR, FLASH_OBR_DATA0) >> FLASH_POSITION_OB_USERDATA0_BIT;
00000a  4a06              LDR      r2,|L15.36|
00000c  69d2              LDR      r2,[r2,#0x1c]
00000e  f3c22087          UBFX     r0,r2,#10,#8
000012  e003              B        |L15.28|
                  |L15.20|
;;;573      }
;;;574      else
;;;575      {
;;;576        /* Get value programmed in OB USER Data1 */
;;;577        value = READ_BIT(FLASH->OBR, FLASH_OBR_DATA1) >> FLASH_POSITION_OB_USERDATA1_BIT;
000014  4a03              LDR      r2,|L15.36|
000016  69d2              LDR      r2,[r2,#0x1c]
000018  f3c24087          UBFX     r0,r2,#18,#8
                  |L15.28|
;;;578      }
;;;579      
;;;580      return value;
;;;581    }
00001c  4770              BX       lr
;;;582    
                          ENDP

00001e  0000              DCW      0x0000
                  |L15.32|
                          DCD      0x1ffff804
                  |L15.36|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASHEx_OBProgram||, CODE, READONLY, ALIGN=2

                  HAL_FLASHEx_OBProgram PROC
;;;461      */
;;;462    HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
000000  b570              PUSH     {r4-r6,lr}
;;;463    {
000002  4604              MOV      r4,r0
;;;464      HAL_StatusTypeDef status = HAL_ERROR;
000004  2501              MOVS     r5,#1
;;;465    
;;;466      /* Process Locked */
;;;467      __HAL_LOCK(&pFlash);
000006  bf00              NOP      
000008  482e              LDR      r0,|L16.196|
00000a  7e00              LDRB     r0,[r0,#0x18]  ; pFlash
00000c  2801              CMP      r0,#1
00000e  d101              BNE      |L16.20|
000010  2002              MOVS     r0,#2
                  |L16.18|
;;;468    
;;;469      /* Check the parameters */
;;;470      assert_param(IS_OPTIONBYTE(pOBInit->OptionType));
;;;471    
;;;472      /* Write protection configuration */
;;;473      if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
;;;474      {
;;;475        assert_param(IS_WRPSTATE(pOBInit->WRPState));
;;;476        if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
;;;477        {
;;;478          /* Enable of Write protection on the selected page */
;;;479          status = FLASH_OB_EnableWRP(pOBInit->WRPPage);
;;;480        }
;;;481        else
;;;482        {
;;;483          /* Disable of Write protection on the selected page */
;;;484          status = FLASH_OB_DisableWRP(pOBInit->WRPPage);
;;;485        }
;;;486        if (status != HAL_OK)
;;;487        {
;;;488          /* Process Unlocked */
;;;489          __HAL_UNLOCK(&pFlash);
;;;490          return status;
;;;491        }
;;;492      }
;;;493    
;;;494      /* Read protection configuration */
;;;495      if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
;;;496      {
;;;497        status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
;;;498        if (status != HAL_OK)
;;;499        {
;;;500          /* Process Unlocked */
;;;501          __HAL_UNLOCK(&pFlash);
;;;502          return status;
;;;503        }
;;;504      }
;;;505    
;;;506      /* USER configuration */
;;;507      if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
;;;508      {
;;;509        status = FLASH_OB_UserConfig(pOBInit->USERConfig);
;;;510        if (status != HAL_OK)
;;;511        {
;;;512          /* Process Unlocked */
;;;513          __HAL_UNLOCK(&pFlash);
;;;514          return status;
;;;515        }
;;;516      }
;;;517    
;;;518      /* DATA configuration*/
;;;519      if((pOBInit->OptionType & OPTIONBYTE_DATA) == OPTIONBYTE_DATA)
;;;520      {
;;;521        status = FLASH_OB_ProgramData(pOBInit->DATAAddress, pOBInit->DATAData);
;;;522        if (status != HAL_OK)
;;;523        {
;;;524          /* Process Unlocked */
;;;525          __HAL_UNLOCK(&pFlash);
;;;526          return status;
;;;527        }
;;;528      }
;;;529    
;;;530      /* Process Unlocked */
;;;531      __HAL_UNLOCK(&pFlash);
;;;532    
;;;533      return status;
;;;534    }
000012  bd70              POP      {r4-r6,pc}
                  |L16.20|
000014  2001              MOVS     r0,#1                 ;467
000016  492b              LDR      r1,|L16.196|
000018  7608              STRB     r0,[r1,#0x18]         ;467
00001a  bf00              NOP                            ;467
00001c  7820              LDRB     r0,[r4,#0]            ;473
00001e  f0000001          AND      r0,r0,#1              ;473
000022  b198              CBZ      r0,|L16.76|
000024  6860              LDR      r0,[r4,#4]            ;476
000026  2801              CMP      r0,#1                 ;476
000028  d104              BNE      |L16.52|
00002a  68a0              LDR      r0,[r4,#8]            ;479
00002c  f7fffffe          BL       FLASH_OB_EnableWRP
000030  4605              MOV      r5,r0                 ;479
000032  e003              B        |L16.60|
                  |L16.52|
000034  68a0              LDR      r0,[r4,#8]            ;484
000036  f7fffffe          BL       FLASH_OB_DisableWRP
00003a  4605              MOV      r5,r0                 ;484
                  |L16.60|
00003c  b135              CBZ      r5,|L16.76|
00003e  bf00              NOP                            ;489
000040  2000              MOVS     r0,#0                 ;489
000042  4920              LDR      r1,|L16.196|
000044  7608              STRB     r0,[r1,#0x18]         ;489
000046  bf00              NOP                            ;489
000048  4628              MOV      r0,r5                 ;490
00004a  e7e2              B        |L16.18|
                  |L16.76|
00004c  7820              LDRB     r0,[r4,#0]            ;495
00004e  f0000002          AND      r0,r0,#2              ;495
000052  2802              CMP      r0,#2                 ;495
000054  d10b              BNE      |L16.110|
000056  7c20              LDRB     r0,[r4,#0x10]         ;497
000058  f7fffffe          BL       FLASH_OB_RDP_LevelConfig
00005c  4605              MOV      r5,r0                 ;497
00005e  b135              CBZ      r5,|L16.110|
000060  bf00              NOP                            ;501
000062  2000              MOVS     r0,#0                 ;501
000064  4917              LDR      r1,|L16.196|
000066  7608              STRB     r0,[r1,#0x18]         ;501
000068  bf00              NOP                            ;501
00006a  4628              MOV      r0,r5                 ;502
00006c  e7d1              B        |L16.18|
                  |L16.110|
00006e  7820              LDRB     r0,[r4,#0]            ;507
000070  f0000004          AND      r0,r0,#4              ;507
000074  2804              CMP      r0,#4                 ;507
000076  d10b              BNE      |L16.144|
000078  7c60              LDRB     r0,[r4,#0x11]         ;509
00007a  f7fffffe          BL       FLASH_OB_UserConfig
00007e  4605              MOV      r5,r0                 ;509
000080  b135              CBZ      r5,|L16.144|
000082  bf00              NOP                            ;513
000084  2000              MOVS     r0,#0                 ;513
000086  490f              LDR      r1,|L16.196|
000088  7608              STRB     r0,[r1,#0x18]         ;513
00008a  bf00              NOP                            ;513
00008c  4628              MOV      r0,r5                 ;514
00008e  e7c0              B        |L16.18|
                  |L16.144|
000090  7820              LDRB     r0,[r4,#0]            ;519
000092  f0000008          AND      r0,r0,#8              ;519
000096  2808              CMP      r0,#8                 ;519
000098  d10c              BNE      |L16.180|
00009a  7e21              LDRB     r1,[r4,#0x18]         ;521
00009c  6960              LDR      r0,[r4,#0x14]         ;521
00009e  f7fffffe          BL       FLASH_OB_ProgramData
0000a2  4605              MOV      r5,r0                 ;521
0000a4  b135              CBZ      r5,|L16.180|
0000a6  bf00              NOP                            ;525
0000a8  2000              MOVS     r0,#0                 ;525
0000aa  4906              LDR      r1,|L16.196|
0000ac  7608              STRB     r0,[r1,#0x18]         ;525
0000ae  bf00              NOP                            ;525
0000b0  4628              MOV      r0,r5                 ;526
0000b2  e7ae              B        |L16.18|
                  |L16.180|
0000b4  bf00              NOP                            ;531
0000b6  2000              MOVS     r0,#0                 ;531
0000b8  4902              LDR      r1,|L16.196|
0000ba  7608              STRB     r0,[r1,#0x18]         ;531
0000bc  bf00              NOP                            ;531
0000be  4628              MOV      r0,r5                 ;533
0000c0  e7a7              B        |L16.18|
;;;535    
                          ENDP

0000c2  0000              DCW      0x0000
                  |L16.196|
                          DCD      pFlash

;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_flash_ex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___24_stm32f1xx_hal_flash_ex_c_6648b60e____REV16|
#line 388 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___24_stm32f1xx_hal_flash_ex_c_6648b60e____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___24_stm32f1xx_hal_flash_ex_c_6648b60e____REVSH|
#line 402
|__asm___24_stm32f1xx_hal_flash_ex_c_6648b60e____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___24_stm32f1xx_hal_flash_ex_c_6648b60e____RRX|
#line 587
|__asm___24_stm32f1xx_hal_flash_ex_c_6648b60e____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
